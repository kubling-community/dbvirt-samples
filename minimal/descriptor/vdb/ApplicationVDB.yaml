# This configuration file has 3 main parts, source definitions, internal virtual schemas and translators that act
# as a bridge between a virtual entity and a physical source.
---
# Name of the Virtual Database as will be registered in the system
name: "Application"
version: "1"

# The list of real (physical) data sources that can be mapped to a virtual entity.
# In this sample repo we will explore only JavaScript based data sources, however DBVirt supports others by default
dataSourceModels:
  - name: "app_ds"
    dataSourceType: "SCRIPT_JS"
    # 'bundle:' scheme indicates that the resource is in this bundle file and is relative to this vdb config directory!
    config: "bundle:scripting/js-config.yaml"

# Translators define the allowed behaviour of operations on entities. Please see translator config file.
translatorModels:
  - name: "js_translator"
    dataSourceType: "SCRIPT_JS"
    config: "bundle:translator/js-translator.yaml"

schemaModels:
  - name: "app"
    # PHYSICAL indicates that the entity definition is registered in the engine, even though the actual data is not stored
    # locally but read from a data source
    type: "PHYSICAL"
    dataMappings:
      # Here we map a translator with a datasource
      js_translator: "app_ds"
    # The actual visible entity, defined using standard PostgresSQL.
    # A hypothetical table that shows a summary of Kubling deployments
    ddl: |
      CREATE FOREIGN TABLE KUBLING_DEPLOYMENT
                (name string primary key, readiness string, state string, age integer, replicas integer, message string)
            OPTIONS(updatable true);
      CREATE FOREIGN TABLE NESTED_OBJECT (my__field string, my__nested_field string) OPTIONS(updatable true);