{% set vdb = "App" %}
{% set componentName = get_k8s_component_info(_context.vdb, _context.component_id) %}
{% set clusterSchema = find_best_cluster_for_deploy(_context.vdb, _context.component_id, _context.env) %}
{% set selectorUUID = uuid() %}
---

needed:
  fields:
    - component_id
    - env
    - containers

before:
  - name: "Component must exist"
    virtualDatabase: {{ vdb }}
    entity: "app_db.COMPONENT"
    filters:
      - field: "ID"
        value: {{ component_id }}
        operation: EQUAL
    assertThat: exists
    message: "Component {{ component_id }} does no exist."

  - name: "Deployment does not yet exist"
    virtualDatabase: {{ vdb }}
    entity: "app_db.COMPONENT_DEPLOYMENT_JOIN"
    filters:
      - field: "component_id"
        value: {{ component_id }}
        operation: EQUAL
      - field: "environment"
        value: {{ env }}
        operation: "EQUAL"
    assertThat: does_not_exist
    message: "Deployment {{ componentName }} of Application {{ app_id }} environment {{ env }} already exists."

# ********* OPERATIONS *********

operations:

  - name: "namespace_insert"
    type: "insert"
    virtualDatabase: {{ vdb }}
    entity: "{{ clusterSchema }}.NAMESPACE"
    skipWhenTrue: {{ ns_exists(_context.vdb, _context.clusterSchema, _context.component_id) }}
    valueAssignments:
      - field: "metadata__name"
        value: "{{ component_id }}"
    waitUntilEffective:
      maxSeconds: 15
      checkEverySeconds: 5
      byGetting:
        fields:
          - "metadata__name"
        usingFilterFieldValuePairs:
          metadata__name: "{{ component_id }}"
          status__phase: "Active"

  - name: "deployment_insert"
    type: "insert"
    virtualDatabase: {{ vdb }}
    entity: "{{ clusterSchema }}.DEPLOYMENT"
    valueAssignments:
# We marked identifier as NOT NULL, therefore the engine will reject an operation if it is not present, even if it is
# a calculated field. Here we just assign a random value.
      - field: "identifier"
        value: "xxx"
      - field: "metadata__namespace"
        value: "{{ component_id }}"
      - field: "metadata__name"
        value: "{{ componentName }}"
      - field: "spec__template__metadata__labels"
        dataType: "json"
        value:
          mgmt.kubling.com/managed: "appmodel"
          mgmt.kubling.com/uid: {{ selectorUUID }}
      - field: "spec__selector__matchLabels"
        dataType: "json"
        value:
          mgmt.kubling.com/managed: "appmodel"
          mgmt.kubling.com/uid: {{ selectorUUID }}

#     One option is receiving a byte array with the section the document we want to insert, in which case we have to escape
#     it using base64 encoding filter (applied as a template evaluation level) and then using specialConversion which
#     indicates that the value must be decoded before inserting
#      - field: "spec__template__spec__containers"
#        value: "{{ containers | raw | base64encode }}"
#        specialConversion: base64

#     Another option is using the polymorphic nature of 'value', which allows to specify a document node as-is without
#     the need to treat it as a byte array.
#     Parameter 'containers' does not have to follow the expected schema of spec__template__spec__containers, can be defined
#     and transformed to an Array/Map and put into the context, so we easily iterate over it a fill the node
      - field: "spec__template__spec__containers"
        dataType: "json"
        value:
    {% for container in fromYamlArrayToIterable(containers) %}
          - name: {{ container.name }}
            image: {{ container.image }}
            imagePullPolicy: IfNotPresent
          {% for envEntry in fromYamlArrayToIterable(container.env) %}
            env:
              - name: {{ envEntry.name }}
                value: {{ envEntry.value }}
          {% endfor %}
            resources:
              requests:
                cpu: {{ container.cpuRequest }}
                memory: {{ container.memRequest }}
          {% for port in fromYamlArrayToIterable(container.ports) %}
            ports:
              - containerPort: {{ port.portNumber }}
          {% endfor %}
    {% endfor %}
    waitUntilEffective:
      maxSeconds: 60
      checkEverySeconds: 5
      byGetting:
        fields:
          - "identifier"
        usingFilterFields:
          - "metadata__namespace"
          - "metadata__name"
        putInContextVar: newAppliedDeployment

  - name: "join_insert"
    type: "insert"
    virtualDatabase: {{ vdb }}
    entity: "app_db.COMPONENT_DEPLOYMENT_JOIN"
    valueAssignments:
      - field: "component_id"
        value: "{{ component_id }}"
      - field: "environment"
        value: "{{ env }}"
      - field: "deployment_identifier"
        ## We defer the value processing by calling template func deferValueProcessing, which indicates to the engine
        ## that value must not be calculated during first template eval but postponed until all the previous
        ## operations are complete since, in this case, we do need the deployment identifier in order to insert a new
        ## join record.
        value: "{{ deferValueProcessing(contextVar='newAppliedDeployment.identifier') }}"