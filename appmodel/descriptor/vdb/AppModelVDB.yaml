---
name: "App"
version: "{{ vdb_version }}"

dataSources:

#  Uncomment if you want to use an ephemeral in-mem DB, although for this particular sample we do recommend using postgres
#  - name: "{{ ds_embedded_name }}"
#    dataSourceType: "EMBEDDED_INMEM"
#    config: "bundle:datasource/embedded-datasource.yaml"

  - name: "app_db"
    dataSourceType: "POSTGRESQL"
    config: "bundle:datasource/psql-datasource.yaml"
    translatorConfig: "bundle:translator/base-translator-config.yaml"
    schema:
      type: "PHYSICAL"
      # Important! This Schema is only an import, therefore we assume that the remote data source already has the expected schema,
      # which, in the particular example, is specified in the Data Source config file when using in-mem but in Postgres must be applied manually.
      properties:
        'importer.useFullSchemaName': 'false'
        'importer.useCatalogName': 'false'
        'importer.schemaName': 'public'

  - name: "k8s_1"
    dataSourceType: "KUBERNETES"
    config: "bundle:datasource/k8s-cluster1-datasource.yaml"
    translatorConfig: "bundle:translator/base-translator-config.yaml"
#    properties:
#      cluster_name: "my_demo_cluster_1"
#      kubernetes_api_url: {{ kubernetes_cluster_1_api_url }}
    schema:
      type: "PHYSICAL"
      properties:
        cluster_name: "k8s_cluster_1"
        kubernetes_api_url: {{ kubernetes_cluster_1_api_url }}
      ddlFilePaths:
        - "bundle:k8s.ddl"

  - name: "k8s_2"
    dataSourceType: "KUBERNETES"
    config: "bundle:datasource/k8s-cluster2-datasource.yaml"
    translatorConfig: "bundle:translator/base-translator-config.yaml"
#    properties:
#      cluster_name: "my_demo_cluster_2"
#      kubernetes_api_url: {{ kubernetes_cluster_2_api_url }}
    schema:
      type: "PHYSICAL"
      properties:
        cluster_name: "k8s_cluster_2"
        kubernetes_api_url: {{ kubernetes_cluster_2_api_url }}
      ddlFilePaths:
        - "bundle:k8s.ddl"

  - name: "app_delegate"
    dataSourceType: "SCRIPT_DOCUMENT_JS"
    config: "bundle:datasource/js-datasource.yaml"
    translatorConfig: "bundle:translator/base-translator-config.yaml"
    schema:
      type: "PHYSICAL"
      ddl: |
        CREATE FOREIGN TABLE CODE_REPO
                  ( 
                    identifier string OPTIONS(val_pk 'org+name' ),
                    org string not null, 
                    owner__login string, 
                    id integer,
                    node_id string,
                    name string not null,
                    full_name string, 
                    description string, 
                    private boolean, 
                    visibility string, 
                    html_url string,
                    owner json OPTIONS(parser_format 'asJsonPretty'),                  
                    PRIMARY KEY(identifier)
              ) OPTIONS(updatable true);

## In order to avoid having to define aggregated views, the Engine has a special schema
## type called aggregatorSchemaModels which creates new schemas that contain VIEWS ONLY,
## by aggregating other schemas with the same entity structure, that is, DDL.

aggregatorSchemaModels:
  - name: "k8s"
    schemas:
      - "k8s_1"
      - "k8s_2"
    tables:
      - name: "DEPLOYMENT"
        options:
          updatable: false
      - name: "NAMESPACE"
        options:
          updatable: false
      - name: "DEPLOYMENT_CONDITIONS"
        options:
          updatable: false
      - name: "DEPLOYMENT_CONTAINER"
        options:
          updatable: false
      - name: "DEPLOYMENT_CONTAINER_VOLS"
        options:
          updatable: false