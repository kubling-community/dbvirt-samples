---
name: "k8s"
version: "1"

dataSourceModels:
  - name: "k8s_1_ds"
    dataSourceType: "KUBERNETES"
    config: "bundle:k8s/k8s-cluster1-config.yaml"
    properties:
      cluster_name: "my_demo_cluster_1"
      # Used in val_variable resolution!
      kubernetes_api_url: {{ kubernetes_cluster_1_api_url }}
  - name: "k8s_2_ds"
    dataSourceType: "KUBERNETES"
    config: "bundle:k8s/k8s-cluster2-config.yaml"
    properties:
      cluster_name: "my_demo_cluster_2"
      kubernetes_api_url: {{ kubernetes_cluster_2_api_url }}

translatorModels:
  - name: "k8s_translator"
    dataSourceType: "KUBERNETES"
    config: "bundle:translator/k8s-translator.yaml"

schemaModels:
  - name: "k8s_1"
    type: "PHYSICAL"
    dataMappings:
      k8s_translator: "k8s_1_ds"
    properties:
      # DDL uses template vars (mostly for tagging), here we need to list them if they do not exist in the environment
      # which, in our case, does not since those variables are SCHEMA SPECIFIC
      cluster_name: "my_demo_cluster_1"
    ddlFilePaths:
      - "bundle:k8s.ddl"

  - name: "k8s_2"
    type: "PHYSICAL"
    dataMappings:
      k8s_translator: "k8s_2_ds"
    properties:
      cluster_name: "my_demo_cluster_2"
    ddlFilePaths:
      # DDL is shared between schemas, since it does not have any schema-specific info and Kubernetes APIs are the same.
      # That is why some environment variables must be set in the data source configuration
      # Note that when a ddl is loaded, since it is a nested template, the current schemaModel is injected in the ddl template
      # context, adding additional possibilities like the one used for building synthetic_parent directive's value
      - "bundle:k8s.ddl"