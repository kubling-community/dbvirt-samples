/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SyncUpdateProperties model module.
 * @module model/SyncUpdateProperties
 * @version 2019-06-01-preview
 */
class SyncUpdateProperties {
    /**
     * Constructs a new <code>SyncUpdateProperties</code>.
     * The parameters for updating the sync properties of the connected registry with its parent.
     * @alias module:model/SyncUpdateProperties
     */
    constructor() { 
        
        SyncUpdateProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SyncUpdateProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SyncUpdateProperties} obj Optional instance to populate.
     * @return {module:model/SyncUpdateProperties} The populated <code>SyncUpdateProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SyncUpdateProperties();

            if (data.hasOwnProperty('schedule')) {
                obj['schedule'] = ApiClient.convertToType(data['schedule'], 'String');
            }
            if (data.hasOwnProperty('syncWindow')) {
                obj['syncWindow'] = ApiClient.convertToType(data['syncWindow'], 'String');
            }
            if (data.hasOwnProperty('messageTtl')) {
                obj['messageTtl'] = ApiClient.convertToType(data['messageTtl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SyncUpdateProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SyncUpdateProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['schedule'] && !(typeof data['schedule'] === 'string' || data['schedule'] instanceof String)) {
            throw new Error("Expected the field `schedule` to be a primitive type in the JSON string but got " + data['schedule']);
        }
        // ensure the json data is a string
        if (data['syncWindow'] && !(typeof data['syncWindow'] === 'string' || data['syncWindow'] instanceof String)) {
            throw new Error("Expected the field `syncWindow` to be a primitive type in the JSON string but got " + data['syncWindow']);
        }
        // ensure the json data is a string
        if (data['messageTtl'] && !(typeof data['messageTtl'] === 'string' || data['messageTtl'] instanceof String)) {
            throw new Error("Expected the field `messageTtl` to be a primitive type in the JSON string but got " + data['messageTtl']);
        }

        return true;
    }


}



/**
 * The cron expression indicating the schedule that the connected registry will sync with its parent.
 * @member {String} schedule
 */
SyncUpdateProperties.prototype['schedule'] = undefined;

/**
 * The time window during which sync is enabled for each schedule occurrence. Specify the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.
 * @member {String} syncWindow
 */
SyncUpdateProperties.prototype['syncWindow'] = undefined;

/**
 * The period of time for which a message is available to sync before it is expired. Specify the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.
 * @member {String} messageTtl
 */
SyncUpdateProperties.prototype['messageTtl'] = undefined;






export default SyncUpdateProperties;

