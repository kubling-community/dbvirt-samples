/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SecretObject model module.
 * @module model/SecretObject
 * @version 2019-06-01-preview
 */
class SecretObject {
    /**
     * Constructs a new <code>SecretObject</code>.
     * Describes the properties of a secret object value.
     * @alias module:model/SecretObject
     */
    constructor() { 
        
        SecretObject.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SecretObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SecretObject} obj Optional instance to populate.
     * @return {module:model/SecretObject} The populated <code>SecretObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SecretObject();

            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SecretObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SecretObject</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The value of the secret. The format of this value will be determined  based on the type of the secret object. If the type is Opaque, the value will be  used as is without any modification.
 * @member {String} value
 */
SecretObject.prototype['value'] = undefined;

/**
 * The type of the secret object which determines how the value of the secret object has to be  interpreted.
 * @member {module:model/SecretObject.TypeEnum} type
 */
SecretObject.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
SecretObject['TypeEnum'] = {

    /**
     * value: "Opaque"
     * @const
     */
    "Opaque": "Opaque",

    /**
     * value: "Vaultsecret"
     * @const
     */
    "Vaultsecret": "Vaultsecret"
};



export default SecretObject;

