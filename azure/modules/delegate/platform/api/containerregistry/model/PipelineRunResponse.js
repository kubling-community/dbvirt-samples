/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExportPipelineTargetProperties from './ExportPipelineTargetProperties';
import ImportPipelineSourceProperties from './ImportPipelineSourceProperties';
import PipelineTriggerDescriptor from './PipelineTriggerDescriptor';
import ProgressProperties from './ProgressProperties';

/**
 * The PipelineRunResponse model module.
 * @module model/PipelineRunResponse
 * @version 2019-06-01-preview
 */
class PipelineRunResponse {
    /**
     * Constructs a new <code>PipelineRunResponse</code>.
     * The response properties returned for a pipeline run.
     * @alias module:model/PipelineRunResponse
     */
    constructor() { 
        
        PipelineRunResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PipelineRunResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PipelineRunResponse} obj Optional instance to populate.
     * @return {module:model/PipelineRunResponse} The populated <code>PipelineRunResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PipelineRunResponse();

            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('importedArtifacts')) {
                obj['importedArtifacts'] = ApiClient.convertToType(data['importedArtifacts'], ['String']);
            }
            if (data.hasOwnProperty('progress')) {
                obj['progress'] = ProgressProperties.constructFromObject(data['progress']);
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
            }
            if (data.hasOwnProperty('finishTime')) {
                obj['finishTime'] = ApiClient.convertToType(data['finishTime'], 'Date');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ImportPipelineSourceProperties.constructFromObject(data['source']);
            }
            if (data.hasOwnProperty('target')) {
                obj['target'] = ExportPipelineTargetProperties.constructFromObject(data['target']);
            }
            if (data.hasOwnProperty('catalogDigest')) {
                obj['catalogDigest'] = ApiClient.convertToType(data['catalogDigest'], 'String');
            }
            if (data.hasOwnProperty('trigger')) {
                obj['trigger'] = PipelineTriggerDescriptor.constructFromObject(data['trigger']);
            }
            if (data.hasOwnProperty('pipelineRunErrorMessage')) {
                obj['pipelineRunErrorMessage'] = ApiClient.convertToType(data['pipelineRunErrorMessage'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PipelineRunResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PipelineRunResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['importedArtifacts'])) {
            throw new Error("Expected the field `importedArtifacts` to be an array in the JSON data but got " + data['importedArtifacts']);
        }
        // validate the optional field `progress`
        if (data['progress']) { // data not null
          ProgressProperties.validateJSON(data['progress']);
        }
        // validate the optional field `source`
        if (data['source']) { // data not null
          ImportPipelineSourceProperties.validateJSON(data['source']);
        }
        // validate the optional field `target`
        if (data['target']) { // data not null
          ExportPipelineTargetProperties.validateJSON(data['target']);
        }
        // ensure the json data is a string
        if (data['catalogDigest'] && !(typeof data['catalogDigest'] === 'string' || data['catalogDigest'] instanceof String)) {
            throw new Error("Expected the field `catalogDigest` to be a primitive type in the JSON string but got " + data['catalogDigest']);
        }
        // validate the optional field `trigger`
        if (data['trigger']) { // data not null
          PipelineTriggerDescriptor.validateJSON(data['trigger']);
        }
        // ensure the json data is a string
        if (data['pipelineRunErrorMessage'] && !(typeof data['pipelineRunErrorMessage'] === 'string' || data['pipelineRunErrorMessage'] instanceof String)) {
            throw new Error("Expected the field `pipelineRunErrorMessage` to be a primitive type in the JSON string but got " + data['pipelineRunErrorMessage']);
        }

        return true;
    }


}



/**
 * The current status of the pipeline run.
 * @member {String} status
 */
PipelineRunResponse.prototype['status'] = undefined;

/**
 * The artifacts imported in the pipeline run.
 * @member {Array.<String>} importedArtifacts
 */
PipelineRunResponse.prototype['importedArtifacts'] = undefined;

/**
 * @member {module:model/ProgressProperties} progress
 */
PipelineRunResponse.prototype['progress'] = undefined;

/**
 * The time the pipeline run started.
 * @member {Date} startTime
 */
PipelineRunResponse.prototype['startTime'] = undefined;

/**
 * The time the pipeline run finished.
 * @member {Date} finishTime
 */
PipelineRunResponse.prototype['finishTime'] = undefined;

/**
 * @member {module:model/ImportPipelineSourceProperties} source
 */
PipelineRunResponse.prototype['source'] = undefined;

/**
 * @member {module:model/ExportPipelineTargetProperties} target
 */
PipelineRunResponse.prototype['target'] = undefined;

/**
 * The digest of the tar used to transfer the artifacts.
 * @member {String} catalogDigest
 */
PipelineRunResponse.prototype['catalogDigest'] = undefined;

/**
 * @member {module:model/PipelineTriggerDescriptor} trigger
 */
PipelineRunResponse.prototype['trigger'] = undefined;

/**
 * The detailed error message for the pipeline run in the case of failure.
 * @member {String} pipelineRunErrorMessage
 */
PipelineRunResponse.prototype['pipelineRunErrorMessage'] = undefined;






export default PipelineRunResponse;

