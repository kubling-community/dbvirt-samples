/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AuthCredential from './AuthCredential';

/**
 * The CredentialSetProperties model module.
 * @module model/CredentialSetProperties
 * @version 2019-06-01-preview
 */
class CredentialSetProperties {
    /**
     * Constructs a new <code>CredentialSetProperties</code>.
     * The properties of a credential set resource.
     * @alias module:model/CredentialSetProperties
     */
    constructor() { 
        
        CredentialSetProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CredentialSetProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CredentialSetProperties} obj Optional instance to populate.
     * @return {module:model/CredentialSetProperties} The populated <code>CredentialSetProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CredentialSetProperties();

            if (data.hasOwnProperty('loginServer')) {
                obj['loginServer'] = ApiClient.convertToType(data['loginServer'], 'String');
            }
            if (data.hasOwnProperty('authCredentials')) {
                obj['authCredentials'] = ApiClient.convertToType(data['authCredentials'], [AuthCredential]);
            }
            if (data.hasOwnProperty('creationDate')) {
                obj['creationDate'] = ApiClient.convertToType(data['creationDate'], 'Date');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CredentialSetProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CredentialSetProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['loginServer'] && !(typeof data['loginServer'] === 'string' || data['loginServer'] instanceof String)) {
            throw new Error("Expected the field `loginServer` to be a primitive type in the JSON string but got " + data['loginServer']);
        }
        if (data['authCredentials']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['authCredentials'])) {
                throw new Error("Expected the field `authCredentials` to be an array in the JSON data but got " + data['authCredentials']);
            }
            // validate the optional field `authCredentials` (array)
            for (const item of data['authCredentials']) {
                AuthCredential.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }

        return true;
    }


}



/**
 * The credentials are stored for this upstream or login server.
 * @member {String} loginServer
 */
CredentialSetProperties.prototype['loginServer'] = undefined;

/**
 * List of authentication credentials stored for an upstream.  Usually consists of a primary and an optional secondary credential.
 * @member {Array.<module:model/AuthCredential>} authCredentials
 */
CredentialSetProperties.prototype['authCredentials'] = undefined;

/**
 * The creation date of credential store resource.
 * @member {Date} creationDate
 */
CredentialSetProperties.prototype['creationDate'] = undefined;

/**
 * Provisioning state of the resource.
 * @member {module:model/CredentialSetProperties.ProvisioningStateEnum} provisioningState
 */
CredentialSetProperties.prototype['provisioningState'] = undefined;





/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
CredentialSetProperties['ProvisioningStateEnum'] = {

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "Updating"
     * @const
     */
    "Updating": "Updating",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed",

    /**
     * value: "Canceled"
     * @const
     */
    "Canceled": "Canceled"
};



export default CredentialSetProperties;

