/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ArchivePackageSourceProperties from './ArchivePackageSourceProperties';

/**
 * The DebianArchivePackageSourceProperties model module.
 * @module model/DebianArchivePackageSourceProperties
 * @version 2019-06-01-preview
 */
class DebianArchivePackageSourceProperties {
    /**
     * Constructs a new <code>DebianArchivePackageSourceProperties</code>.
     * The properties of the archive package source.
     * @alias module:model/DebianArchivePackageSourceProperties
     * @implements module:model/ArchivePackageSourceProperties
     */
    constructor() { 
        ArchivePackageSourceProperties.initialize(this);
        DebianArchivePackageSourceProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DebianArchivePackageSourceProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DebianArchivePackageSourceProperties} obj Optional instance to populate.
     * @return {module:model/DebianArchivePackageSourceProperties} The populated <code>DebianArchivePackageSourceProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DebianArchivePackageSourceProperties();
            ArchivePackageSourceProperties.constructFromObject(data, obj);

            if (data.hasOwnProperty('distributionName')) {
                obj['distributionName'] = ApiClient.convertToType(data['distributionName'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DebianArchivePackageSourceProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DebianArchivePackageSourceProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['distributionName'] && !(typeof data['distributionName'] === 'string' || data['distributionName'] instanceof String)) {
            throw new Error("Expected the field `distributionName` to be a primitive type in the JSON string but got " + data['distributionName']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * Upstream Debian distribution Name.
 * @member {String} distributionName
 */
DebianArchivePackageSourceProperties.prototype['distributionName'] = undefined;

/**
 * The type of package source for a archive.
 * @member {module:model/DebianArchivePackageSourceProperties.TypeEnum} type
 */
DebianArchivePackageSourceProperties.prototype['type'] = undefined;

/**
 * The external repository url.
 * @member {String} url
 */
DebianArchivePackageSourceProperties.prototype['url'] = undefined;


// Implement ArchivePackageSourceProperties interface:
/**
 * The type of package source for a archive.
 * @member {module:model/ArchivePackageSourceProperties.TypeEnum} type
 */
ArchivePackageSourceProperties.prototype['type'] = undefined;
/**
 * The external repository url.
 * @member {String} url
 */
ArchivePackageSourceProperties.prototype['url'] = undefined;



/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
DebianArchivePackageSourceProperties['TypeEnum'] = {

    /**
     * value: "remote"
     * @const
     */
    "remote": "remote"
};



export default DebianArchivePackageSourceProperties;

