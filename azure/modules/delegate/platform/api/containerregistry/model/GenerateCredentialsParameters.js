/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GenerateCredentialsParameters model module.
 * @module model/GenerateCredentialsParameters
 * @version 2019-06-01-preview
 */
class GenerateCredentialsParameters {
    /**
     * Constructs a new <code>GenerateCredentialsParameters</code>.
     * The parameters used to generate credentials for a specified token or user of a container registry.
     * @alias module:model/GenerateCredentialsParameters
     */
    constructor() { 
        
        GenerateCredentialsParameters.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GenerateCredentialsParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GenerateCredentialsParameters} obj Optional instance to populate.
     * @return {module:model/GenerateCredentialsParameters} The populated <code>GenerateCredentialsParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GenerateCredentialsParameters();

            if (data.hasOwnProperty('tokenId')) {
                obj['tokenId'] = ApiClient.convertToType(data['tokenId'], 'String');
            }
            if (data.hasOwnProperty('expiry')) {
                obj['expiry'] = ApiClient.convertToType(data['expiry'], 'Date');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GenerateCredentialsParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GenerateCredentialsParameters</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['tokenId'] && !(typeof data['tokenId'] === 'string' || data['tokenId'] instanceof String)) {
            throw new Error("Expected the field `tokenId` to be a primitive type in the JSON string but got " + data['tokenId']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * The resource ID of the token for which credentials have to be generated.
 * @member {String} tokenId
 */
GenerateCredentialsParameters.prototype['tokenId'] = undefined;

/**
 * The expiry date of the generated credentials after which the credentials become invalid.
 * @member {Date} expiry
 */
GenerateCredentialsParameters.prototype['expiry'] = undefined;

/**
 * Specifies name of the password which should be regenerated if any -- password1 or password2.
 * @member {module:model/GenerateCredentialsParameters.NameEnum} name
 */
GenerateCredentialsParameters.prototype['name'] = undefined;





/**
 * Allowed values for the <code>name</code> property.
 * @enum {String}
 * @readonly
 */
GenerateCredentialsParameters['NameEnum'] = {

    /**
     * value: "password1"
     * @const
     */
    "password1": "password1",

    /**
     * value: "password2"
     * @const
     */
    "password2": "password2"
};



export default GenerateCredentialsParameters;

