/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LocationData model module.
 * @module model/LocationData
 * @version 2019-06-01-preview
 */
class LocationData {
    /**
     * Constructs a new <code>LocationData</code>.
     * Metadata pertaining to the geographic location of the resource.
     * @alias module:model/LocationData
     * @param name {String} A canonical name for the geographic or physical location.
     */
    constructor(name) { 
        
        LocationData.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
    }

    /**
     * Constructs a <code>LocationData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LocationData} obj Optional instance to populate.
     * @return {module:model/LocationData} The populated <code>LocationData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LocationData();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('district')) {
                obj['district'] = ApiClient.convertToType(data['district'], 'String');
            }
            if (data.hasOwnProperty('countryOrRegion')) {
                obj['countryOrRegion'] = ApiClient.convertToType(data['countryOrRegion'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LocationData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LocationData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LocationData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['district'] && !(typeof data['district'] === 'string' || data['district'] instanceof String)) {
            throw new Error("Expected the field `district` to be a primitive type in the JSON string but got " + data['district']);
        }
        // ensure the json data is a string
        if (data['countryOrRegion'] && !(typeof data['countryOrRegion'] === 'string' || data['countryOrRegion'] instanceof String)) {
            throw new Error("Expected the field `countryOrRegion` to be a primitive type in the JSON string but got " + data['countryOrRegion']);
        }

        return true;
    }


}

LocationData.RequiredProperties = ["name"];

/**
 * A canonical name for the geographic or physical location.
 * @member {String} name
 */
LocationData.prototype['name'] = undefined;

/**
 * The city or locality where the resource is located.
 * @member {String} city
 */
LocationData.prototype['city'] = undefined;

/**
 * The district, state, or province where the resource is located.
 * @member {String} district
 */
LocationData.prototype['district'] = undefined;

/**
 * The country or region where the resource is located
 * @member {String} countryOrRegion
 */
LocationData.prototype['countryOrRegion'] = undefined;






export default LocationData;

