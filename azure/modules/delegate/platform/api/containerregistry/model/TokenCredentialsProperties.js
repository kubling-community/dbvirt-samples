/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TokenCertificate from './TokenCertificate';
import TokenPassword from './TokenPassword';

/**
 * The TokenCredentialsProperties model module.
 * @module model/TokenCredentialsProperties
 * @version 2019-06-01-preview
 */
class TokenCredentialsProperties {
    /**
     * Constructs a new <code>TokenCredentialsProperties</code>.
     * The properties of the credentials that can be used for authenticating the token.
     * @alias module:model/TokenCredentialsProperties
     */
    constructor() { 
        
        TokenCredentialsProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TokenCredentialsProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TokenCredentialsProperties} obj Optional instance to populate.
     * @return {module:model/TokenCredentialsProperties} The populated <code>TokenCredentialsProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TokenCredentialsProperties();

            if (data.hasOwnProperty('certificates')) {
                obj['certificates'] = ApiClient.convertToType(data['certificates'], [TokenCertificate]);
            }
            if (data.hasOwnProperty('passwords')) {
                obj['passwords'] = ApiClient.convertToType(data['passwords'], [TokenPassword]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TokenCredentialsProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TokenCredentialsProperties</code>.
     */
    static validateJSON(data) {
        if (data['certificates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['certificates'])) {
                throw new Error("Expected the field `certificates` to be an array in the JSON data but got " + data['certificates']);
            }
            // validate the optional field `certificates` (array)
            for (const item of data['certificates']) {
                TokenCertificate.validateJSON(item);
            };
        }
        if (data['passwords']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['passwords'])) {
                throw new Error("Expected the field `passwords` to be an array in the JSON data but got " + data['passwords']);
            }
            // validate the optional field `passwords` (array)
            for (const item of data['passwords']) {
                TokenPassword.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/TokenCertificate>} certificates
 */
TokenCredentialsProperties.prototype['certificates'] = undefined;

/**
 * @member {Array.<module:model/TokenPassword>} passwords
 */
TokenCredentialsProperties.prototype['passwords'] = undefined;






export default TokenCredentialsProperties;

