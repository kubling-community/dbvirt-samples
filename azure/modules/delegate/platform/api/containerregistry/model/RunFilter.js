/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RunFilter model module.
 * @module model/RunFilter
 * @version 2019-06-01-preview
 */
class RunFilter {
    /**
     * Constructs a new <code>RunFilter</code>.
     * Properties that are enabled for Odata querying on runs.
     * @alias module:model/RunFilter
     */
    constructor() { 
        
        RunFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RunFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RunFilter} obj Optional instance to populate.
     * @return {module:model/RunFilter} The populated <code>RunFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RunFilter();

            if (data.hasOwnProperty('runId')) {
                obj['runId'] = ApiClient.convertToType(data['runId'], 'String');
            }
            if (data.hasOwnProperty('runType')) {
                obj['runType'] = ApiClient.convertToType(data['runType'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'Date');
            }
            if (data.hasOwnProperty('finishTime')) {
                obj['finishTime'] = ApiClient.convertToType(data['finishTime'], 'Date');
            }
            if (data.hasOwnProperty('outputImageManifests')) {
                obj['outputImageManifests'] = ApiClient.convertToType(data['outputImageManifests'], 'String');
            }
            if (data.hasOwnProperty('isArchiveEnabled')) {
                obj['isArchiveEnabled'] = ApiClient.convertToType(data['isArchiveEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('taskName')) {
                obj['taskName'] = ApiClient.convertToType(data['taskName'], 'String');
            }
            if (data.hasOwnProperty('agentPoolName')) {
                obj['agentPoolName'] = ApiClient.convertToType(data['agentPoolName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RunFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RunFilter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['runId'] && !(typeof data['runId'] === 'string' || data['runId'] instanceof String)) {
            throw new Error("Expected the field `runId` to be a primitive type in the JSON string but got " + data['runId']);
        }
        // ensure the json data is a string
        if (data['runType'] && !(typeof data['runType'] === 'string' || data['runType'] instanceof String)) {
            throw new Error("Expected the field `runType` to be a primitive type in the JSON string but got " + data['runType']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['outputImageManifests'] && !(typeof data['outputImageManifests'] === 'string' || data['outputImageManifests'] instanceof String)) {
            throw new Error("Expected the field `outputImageManifests` to be a primitive type in the JSON string but got " + data['outputImageManifests']);
        }
        // ensure the json data is a string
        if (data['taskName'] && !(typeof data['taskName'] === 'string' || data['taskName'] instanceof String)) {
            throw new Error("Expected the field `taskName` to be a primitive type in the JSON string but got " + data['taskName']);
        }
        // ensure the json data is a string
        if (data['agentPoolName'] && !(typeof data['agentPoolName'] === 'string' || data['agentPoolName'] instanceof String)) {
            throw new Error("Expected the field `agentPoolName` to be a primitive type in the JSON string but got " + data['agentPoolName']);
        }

        return true;
    }


}



/**
 * The unique identifier for the run.
 * @member {String} runId
 */
RunFilter.prototype['runId'] = undefined;

/**
 * The type of run.
 * @member {module:model/RunFilter.RunTypeEnum} runType
 */
RunFilter.prototype['runType'] = undefined;

/**
 * The current status of the run.
 * @member {module:model/RunFilter.StatusEnum} status
 */
RunFilter.prototype['status'] = undefined;

/**
 * The create time for a run.
 * @member {Date} createTime
 */
RunFilter.prototype['createTime'] = undefined;

/**
 * The time the run finished.
 * @member {Date} finishTime
 */
RunFilter.prototype['finishTime'] = undefined;

/**
 * The list of comma-separated image manifests that were generated from the run. This is applicable if the run is of  build type.
 * @member {String} outputImageManifests
 */
RunFilter.prototype['outputImageManifests'] = undefined;

/**
 * The value that indicates whether archiving is enabled or not.
 * @member {Boolean} isArchiveEnabled
 */
RunFilter.prototype['isArchiveEnabled'] = undefined;

/**
 * The name of the task that the run corresponds to.
 * @member {String} taskName
 */
RunFilter.prototype['taskName'] = undefined;

/**
 * The name of the agent pool that the run corresponds to.
 * @member {String} agentPoolName
 */
RunFilter.prototype['agentPoolName'] = undefined;





/**
 * Allowed values for the <code>runType</code> property.
 * @enum {String}
 * @readonly
 */
RunFilter['RunTypeEnum'] = {

    /**
     * value: "QuickBuild"
     * @const
     */
    "QuickBuild": "QuickBuild",

    /**
     * value: "QuickRun"
     * @const
     */
    "QuickRun": "QuickRun",

    /**
     * value: "AutoBuild"
     * @const
     */
    "AutoBuild": "AutoBuild",

    /**
     * value: "AutoRun"
     * @const
     */
    "AutoRun": "AutoRun"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
RunFilter['StatusEnum'] = {

    /**
     * value: "Queued"
     * @const
     */
    "Queued": "Queued",

    /**
     * value: "Started"
     * @const
     */
    "Started": "Started",

    /**
     * value: "Running"
     * @const
     */
    "Running": "Running",

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed",

    /**
     * value: "Canceled"
     * @const
     */
    "Canceled": "Canceled",

    /**
     * value: "Error"
     * @const
     */
    "Error": "Error",

    /**
     * value: "Timeout"
     * @const
     */
    "Timeout": "Timeout"
};



export default RunFilter;

