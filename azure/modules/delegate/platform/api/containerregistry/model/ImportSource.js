/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ImportSourceCredentials from './ImportSourceCredentials';

/**
 * The ImportSource model module.
 * @module model/ImportSource
 * @version 2019-06-01-preview
 */
class ImportSource {
    /**
     * Constructs a new <code>ImportSource</code>.
     * @alias module:model/ImportSource
     * @param sourceImage {String} Repository name of the source image.  Specify an image by repository ('hello-world'). This will use the 'latest' tag.  Specify an image by tag ('hello-world:latest').  Specify an image by sha256-based manifest digest ('hello-world@sha256:abc123').
     */
    constructor(sourceImage) { 
        
        ImportSource.initialize(this, sourceImage);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, sourceImage) { 
        obj['sourceImage'] = sourceImage;
    }

    /**
     * Constructs a <code>ImportSource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImportSource} obj Optional instance to populate.
     * @return {module:model/ImportSource} The populated <code>ImportSource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImportSource();

            if (data.hasOwnProperty('resourceId')) {
                obj['resourceId'] = ApiClient.convertToType(data['resourceId'], 'String');
            }
            if (data.hasOwnProperty('registryUri')) {
                obj['registryUri'] = ApiClient.convertToType(data['registryUri'], 'String');
            }
            if (data.hasOwnProperty('credentials')) {
                obj['credentials'] = ImportSourceCredentials.constructFromObject(data['credentials']);
            }
            if (data.hasOwnProperty('sourceImage')) {
                obj['sourceImage'] = ApiClient.convertToType(data['sourceImage'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImportSource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImportSource</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ImportSource.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['resourceId'] && !(typeof data['resourceId'] === 'string' || data['resourceId'] instanceof String)) {
            throw new Error("Expected the field `resourceId` to be a primitive type in the JSON string but got " + data['resourceId']);
        }
        // ensure the json data is a string
        if (data['registryUri'] && !(typeof data['registryUri'] === 'string' || data['registryUri'] instanceof String)) {
            throw new Error("Expected the field `registryUri` to be a primitive type in the JSON string but got " + data['registryUri']);
        }
        // validate the optional field `credentials`
        if (data['credentials']) { // data not null
          ImportSourceCredentials.validateJSON(data['credentials']);
        }
        // ensure the json data is a string
        if (data['sourceImage'] && !(typeof data['sourceImage'] === 'string' || data['sourceImage'] instanceof String)) {
            throw new Error("Expected the field `sourceImage` to be a primitive type in the JSON string but got " + data['sourceImage']);
        }

        return true;
    }


}

ImportSource.RequiredProperties = ["sourceImage"];

/**
 * The resource identifier of the source Azure Container Registry.
 * @member {String} resourceId
 */
ImportSource.prototype['resourceId'] = undefined;

/**
 * The address of the source registry (e.g. 'mcr.microsoft.com').
 * @member {String} registryUri
 */
ImportSource.prototype['registryUri'] = undefined;

/**
 * @member {module:model/ImportSourceCredentials} credentials
 */
ImportSource.prototype['credentials'] = undefined;

/**
 * Repository name of the source image.  Specify an image by repository ('hello-world'). This will use the 'latest' tag.  Specify an image by tag ('hello-world:latest').  Specify an image by sha256-based manifest digest ('hello-world@sha256:abc123').
 * @member {String} sourceImage
 */
ImportSource.prototype['sourceImage'] = undefined;






export default ImportSource;

