/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Status from './Status';

/**
 * The ReplicationProperties model module.
 * @module model/ReplicationProperties
 * @version 2019-06-01-preview
 */
class ReplicationProperties {
    /**
     * Constructs a new <code>ReplicationProperties</code>.
     * The properties of a replication.
     * @alias module:model/ReplicationProperties
     */
    constructor() { 
        
        ReplicationProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReplicationProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReplicationProperties} obj Optional instance to populate.
     * @return {module:model/ReplicationProperties} The populated <code>ReplicationProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReplicationProperties();

            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = Status.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('regionEndpointEnabled')) {
                obj['regionEndpointEnabled'] = ApiClient.convertToType(data['regionEndpointEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('zoneRedundancy')) {
                obj['zoneRedundancy'] = ApiClient.convertToType(data['zoneRedundancy'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReplicationProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReplicationProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          Status.validateJSON(data['status']);
        }
        // ensure the json data is a string
        if (data['zoneRedundancy'] && !(typeof data['zoneRedundancy'] === 'string' || data['zoneRedundancy'] instanceof String)) {
            throw new Error("Expected the field `zoneRedundancy` to be a primitive type in the JSON string but got " + data['zoneRedundancy']);
        }

        return true;
    }


}



/**
 * The provisioning state of the replication at the time the operation was called.
 * @member {module:model/ReplicationProperties.ProvisioningStateEnum} provisioningState
 */
ReplicationProperties.prototype['provisioningState'] = undefined;

/**
 * @member {module:model/Status} status
 */
ReplicationProperties.prototype['status'] = undefined;

/**
 * Specifies whether the replication's regional endpoint is enabled. Requests will not be routed to a replication whose regional endpoint is disabled, however its data will continue to be synced with other replications.
 * @member {Boolean} regionEndpointEnabled
 * @default true
 */
ReplicationProperties.prototype['regionEndpointEnabled'] = true;

/**
 * Whether or not zone redundancy is enabled for this container registry replication
 * @member {module:model/ReplicationProperties.ZoneRedundancyEnum} zoneRedundancy
 * @default 'Disabled'
 */
ReplicationProperties.prototype['zoneRedundancy'] = 'Disabled';





/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
ReplicationProperties['ProvisioningStateEnum'] = {

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "Updating"
     * @const
     */
    "Updating": "Updating",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed",

    /**
     * value: "Canceled"
     * @const
     */
    "Canceled": "Canceled"
};


/**
 * Allowed values for the <code>zoneRedundancy</code> property.
 * @enum {String}
 * @readonly
 */
ReplicationProperties['ZoneRedundancyEnum'] = {

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};



export default ReplicationProperties;

