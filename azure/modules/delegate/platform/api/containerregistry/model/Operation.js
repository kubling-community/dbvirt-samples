/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OperationDisplay from './OperationDisplay';

/**
 * The Operation model module.
 * @module model/Operation
 * @version 2019-06-01-preview
 */
class Operation {
    /**
     * Constructs a new <code>Operation</code>.
     * Details of a REST API operation, returned from the Resource Provider Operations API
     * @alias module:model/Operation
     */
    constructor() { 
        
        Operation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Operation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Operation} obj Optional instance to populate.
     * @return {module:model/Operation} The populated <code>Operation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Operation();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('isDataAction')) {
                obj['isDataAction'] = ApiClient.convertToType(data['isDataAction'], 'Boolean');
            }
            if (data.hasOwnProperty('display')) {
                obj['display'] = OperationDisplay.constructFromObject(data['display']);
            }
            if (data.hasOwnProperty('origin')) {
                obj['origin'] = ApiClient.convertToType(data['origin'], 'String');
            }
            if (data.hasOwnProperty('actionType')) {
                obj['actionType'] = ApiClient.convertToType(data['actionType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Operation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Operation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `display`
        if (data['display']) { // data not null
          OperationDisplay.validateJSON(data['display']);
        }
        // ensure the json data is a string
        if (data['origin'] && !(typeof data['origin'] === 'string' || data['origin'] instanceof String)) {
            throw new Error("Expected the field `origin` to be a primitive type in the JSON string but got " + data['origin']);
        }
        // ensure the json data is a string
        if (data['actionType'] && !(typeof data['actionType'] === 'string' || data['actionType'] instanceof String)) {
            throw new Error("Expected the field `actionType` to be a primitive type in the JSON string but got " + data['actionType']);
        }

        return true;
    }


}



/**
 * The name of the operation, as per Resource-Based Access Control (RBAC). Examples: \"Microsoft.Compute/virtualMachines/write\", \"Microsoft.Compute/virtualMachines/capture/action\"
 * @member {String} name
 */
Operation.prototype['name'] = undefined;

/**
 * Whether the operation applies to data-plane. This is \"true\" for data-plane operations and \"false\" for ARM/control-plane operations.
 * @member {Boolean} isDataAction
 */
Operation.prototype['isDataAction'] = undefined;

/**
 * @member {module:model/OperationDisplay} display
 */
Operation.prototype['display'] = undefined;

/**
 * The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is \"user,system\"
 * @member {module:model/Operation.OriginEnum} origin
 */
Operation.prototype['origin'] = undefined;

/**
 * Enum. Indicates the action type. \"Internal\" refers to actions that are for internal only APIs.
 * @member {module:model/Operation.ActionTypeEnum} actionType
 */
Operation.prototype['actionType'] = undefined;





/**
 * Allowed values for the <code>origin</code> property.
 * @enum {String}
 * @readonly
 */
Operation['OriginEnum'] = {

    /**
     * value: "user"
     * @const
     */
    "user": "user",

    /**
     * value: "system"
     * @const
     */
    "system": "system",

    /**
     * value: "user,system"
     * @const
     */
    "user,system": "user,system"
};


/**
 * Allowed values for the <code>actionType</code> property.
 * @enum {String}
 * @readonly
 */
Operation['ActionTypeEnum'] = {

    /**
     * value: "Internal"
     * @const
     */
    "Internal": "Internal"
};



export default Operation;

