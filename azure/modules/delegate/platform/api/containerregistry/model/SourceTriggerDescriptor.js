/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SourceTriggerDescriptor model module.
 * @module model/SourceTriggerDescriptor
 * @version 2019-06-01-preview
 */
class SourceTriggerDescriptor {
    /**
     * Constructs a new <code>SourceTriggerDescriptor</code>.
     * The source trigger that caused a run.
     * @alias module:model/SourceTriggerDescriptor
     */
    constructor() { 
        
        SourceTriggerDescriptor.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SourceTriggerDescriptor</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SourceTriggerDescriptor} obj Optional instance to populate.
     * @return {module:model/SourceTriggerDescriptor} The populated <code>SourceTriggerDescriptor</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SourceTriggerDescriptor();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('eventType')) {
                obj['eventType'] = ApiClient.convertToType(data['eventType'], 'String');
            }
            if (data.hasOwnProperty('commitId')) {
                obj['commitId'] = ApiClient.convertToType(data['commitId'], 'String');
            }
            if (data.hasOwnProperty('pullRequestId')) {
                obj['pullRequestId'] = ApiClient.convertToType(data['pullRequestId'], 'String');
            }
            if (data.hasOwnProperty('repositoryUrl')) {
                obj['repositoryUrl'] = ApiClient.convertToType(data['repositoryUrl'], 'String');
            }
            if (data.hasOwnProperty('branchName')) {
                obj['branchName'] = ApiClient.convertToType(data['branchName'], 'String');
            }
            if (data.hasOwnProperty('providerType')) {
                obj['providerType'] = ApiClient.convertToType(data['providerType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SourceTriggerDescriptor</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SourceTriggerDescriptor</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['eventType'] && !(typeof data['eventType'] === 'string' || data['eventType'] instanceof String)) {
            throw new Error("Expected the field `eventType` to be a primitive type in the JSON string but got " + data['eventType']);
        }
        // ensure the json data is a string
        if (data['commitId'] && !(typeof data['commitId'] === 'string' || data['commitId'] instanceof String)) {
            throw new Error("Expected the field `commitId` to be a primitive type in the JSON string but got " + data['commitId']);
        }
        // ensure the json data is a string
        if (data['pullRequestId'] && !(typeof data['pullRequestId'] === 'string' || data['pullRequestId'] instanceof String)) {
            throw new Error("Expected the field `pullRequestId` to be a primitive type in the JSON string but got " + data['pullRequestId']);
        }
        // ensure the json data is a string
        if (data['repositoryUrl'] && !(typeof data['repositoryUrl'] === 'string' || data['repositoryUrl'] instanceof String)) {
            throw new Error("Expected the field `repositoryUrl` to be a primitive type in the JSON string but got " + data['repositoryUrl']);
        }
        // ensure the json data is a string
        if (data['branchName'] && !(typeof data['branchName'] === 'string' || data['branchName'] instanceof String)) {
            throw new Error("Expected the field `branchName` to be a primitive type in the JSON string but got " + data['branchName']);
        }
        // ensure the json data is a string
        if (data['providerType'] && !(typeof data['providerType'] === 'string' || data['providerType'] instanceof String)) {
            throw new Error("Expected the field `providerType` to be a primitive type in the JSON string but got " + data['providerType']);
        }

        return true;
    }


}



/**
 * The unique ID of the trigger.
 * @member {String} id
 */
SourceTriggerDescriptor.prototype['id'] = undefined;

/**
 * The event type of the trigger.
 * @member {String} eventType
 */
SourceTriggerDescriptor.prototype['eventType'] = undefined;

/**
 * The unique ID that identifies a commit.
 * @member {String} commitId
 */
SourceTriggerDescriptor.prototype['commitId'] = undefined;

/**
 * The unique ID that identifies pull request.
 * @member {String} pullRequestId
 */
SourceTriggerDescriptor.prototype['pullRequestId'] = undefined;

/**
 * The repository URL.
 * @member {String} repositoryUrl
 */
SourceTriggerDescriptor.prototype['repositoryUrl'] = undefined;

/**
 * The branch name in the repository.
 * @member {String} branchName
 */
SourceTriggerDescriptor.prototype['branchName'] = undefined;

/**
 * The source control provider type.
 * @member {String} providerType
 */
SourceTriggerDescriptor.prototype['providerType'] = undefined;






export default SourceTriggerDescriptor;

