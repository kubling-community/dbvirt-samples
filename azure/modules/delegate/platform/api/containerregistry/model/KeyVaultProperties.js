/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The KeyVaultProperties model module.
 * @module model/KeyVaultProperties
 * @version 2019-06-01-preview
 */
class KeyVaultProperties {
    /**
     * Constructs a new <code>KeyVaultProperties</code>.
     * @alias module:model/KeyVaultProperties
     */
    constructor() { 
        
        KeyVaultProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>KeyVaultProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/KeyVaultProperties} obj Optional instance to populate.
     * @return {module:model/KeyVaultProperties} The populated <code>KeyVaultProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new KeyVaultProperties();

            if (data.hasOwnProperty('keyIdentifier')) {
                obj['keyIdentifier'] = ApiClient.convertToType(data['keyIdentifier'], 'String');
            }
            if (data.hasOwnProperty('identity')) {
                obj['identity'] = ApiClient.convertToType(data['identity'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>KeyVaultProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>KeyVaultProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['keyIdentifier'] && !(typeof data['keyIdentifier'] === 'string' || data['keyIdentifier'] instanceof String)) {
            throw new Error("Expected the field `keyIdentifier` to be a primitive type in the JSON string but got " + data['keyIdentifier']);
        }
        // ensure the json data is a string
        if (data['identity'] && !(typeof data['identity'] === 'string' || data['identity'] instanceof String)) {
            throw new Error("Expected the field `identity` to be a primitive type in the JSON string but got " + data['identity']);
        }

        return true;
    }


}



/**
 * Key vault uri to access the encryption key.
 * @member {String} keyIdentifier
 */
KeyVaultProperties.prototype['keyIdentifier'] = undefined;

/**
 * The client ID of the identity which will be used to access key vault.
 * @member {String} identity
 */
KeyVaultProperties.prototype['identity'] = undefined;






export default KeyVaultProperties;

