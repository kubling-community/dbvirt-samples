/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExportPipelineTargetProperties from './ExportPipelineTargetProperties';

/**
 * The ExportPipelineProperties model module.
 * @module model/ExportPipelineProperties
 * @version 2019-06-01-preview
 */
class ExportPipelineProperties {
    /**
     * Constructs a new <code>ExportPipelineProperties</code>.
     * The properties of an export pipeline.
     * @alias module:model/ExportPipelineProperties
     * @param target {module:model/ExportPipelineTargetProperties} 
     */
    constructor(target) { 
        
        ExportPipelineProperties.initialize(this, target);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, target) { 
        obj['target'] = target;
    }

    /**
     * Constructs a <code>ExportPipelineProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExportPipelineProperties} obj Optional instance to populate.
     * @return {module:model/ExportPipelineProperties} The populated <code>ExportPipelineProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExportPipelineProperties();

            if (data.hasOwnProperty('target')) {
                obj['target'] = ExportPipelineTargetProperties.constructFromObject(data['target']);
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = ApiClient.convertToType(data['options'], ['String']);
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExportPipelineProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExportPipelineProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ExportPipelineProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `target`
        if (data['target']) { // data not null
          ExportPipelineTargetProperties.validateJSON(data['target']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['options'])) {
            throw new Error("Expected the field `options` to be an array in the JSON data but got " + data['options']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }

        return true;
    }


}

ExportPipelineProperties.RequiredProperties = ["target"];

/**
 * @member {module:model/ExportPipelineTargetProperties} target
 */
ExportPipelineProperties.prototype['target'] = undefined;

/**
 * The list of all options configured for the pipeline.
 * @member {Array.<module:model/ExportPipelineProperties.OptionsEnum>} options
 */
ExportPipelineProperties.prototype['options'] = undefined;

/**
 * The provisioning state of the pipeline at the time the operation was called.
 * @member {module:model/ExportPipelineProperties.ProvisioningStateEnum} provisioningState
 */
ExportPipelineProperties.prototype['provisioningState'] = undefined;





/**
 * Allowed values for the <code>options</code> property.
 * @enum {String}
 * @readonly
 */
ExportPipelineProperties['OptionsEnum'] = {

    /**
     * value: "OverwriteTags"
     * @const
     */
    "OverwriteTags": "OverwriteTags",

    /**
     * value: "OverwriteBlobs"
     * @const
     */
    "OverwriteBlobs": "OverwriteBlobs",

    /**
     * value: "DeleteSourceBlobOnSuccess"
     * @const
     */
    "DeleteSourceBlobOnSuccess": "DeleteSourceBlobOnSuccess",

    /**
     * value: "ContinueOnErrors"
     * @const
     */
    "ContinueOnErrors": "ContinueOnErrors"
};


/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
ExportPipelineProperties['ProvisioningStateEnum'] = {

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "Updating"
     * @const
     */
    "Updating": "Updating",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed",

    /**
     * value: "Canceled"
     * @const
     */
    "Canceled": "Canceled"
};



export default ExportPipelineProperties;

