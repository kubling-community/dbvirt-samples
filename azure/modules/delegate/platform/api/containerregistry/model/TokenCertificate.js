/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TokenCertificate model module.
 * @module model/TokenCertificate
 * @version 2019-06-01-preview
 */
class TokenCertificate {
    /**
     * Constructs a new <code>TokenCertificate</code>.
     * The properties of a certificate used for authenticating a token.
     * @alias module:model/TokenCertificate
     */
    constructor() { 
        
        TokenCertificate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TokenCertificate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TokenCertificate} obj Optional instance to populate.
     * @return {module:model/TokenCertificate} The populated <code>TokenCertificate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TokenCertificate();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('expiry')) {
                obj['expiry'] = ApiClient.convertToType(data['expiry'], 'Date');
            }
            if (data.hasOwnProperty('thumbprint')) {
                obj['thumbprint'] = ApiClient.convertToType(data['thumbprint'], 'String');
            }
            if (data.hasOwnProperty('encodedPemCertificate')) {
                obj['encodedPemCertificate'] = ApiClient.convertToType(data['encodedPemCertificate'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TokenCertificate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TokenCertificate</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['thumbprint'] && !(typeof data['thumbprint'] === 'string' || data['thumbprint'] instanceof String)) {
            throw new Error("Expected the field `thumbprint` to be a primitive type in the JSON string but got " + data['thumbprint']);
        }
        // ensure the json data is a string
        if (data['encodedPemCertificate'] && !(typeof data['encodedPemCertificate'] === 'string' || data['encodedPemCertificate'] instanceof String)) {
            throw new Error("Expected the field `encodedPemCertificate` to be a primitive type in the JSON string but got " + data['encodedPemCertificate']);
        }

        return true;
    }


}



/**
 * @member {module:model/TokenCertificate.NameEnum} name
 */
TokenCertificate.prototype['name'] = undefined;

/**
 * The expiry datetime of the certificate.
 * @member {Date} expiry
 */
TokenCertificate.prototype['expiry'] = undefined;

/**
 * The thumbprint of the certificate.
 * @member {String} thumbprint
 */
TokenCertificate.prototype['thumbprint'] = undefined;

/**
 * Base 64 encoded string of the public certificate1 in PEM format that will be used for authenticating the token.
 * @member {String} encodedPemCertificate
 */
TokenCertificate.prototype['encodedPemCertificate'] = undefined;





/**
 * Allowed values for the <code>name</code> property.
 * @enum {String}
 * @readonly
 */
TokenCertificate['NameEnum'] = {

    /**
     * value: "certificate1"
     * @const
     */
    "certificate1": "certificate1",

    /**
     * value: "certificate2"
     * @const
     */
    "certificate2": "certificate2"
};



export default TokenCertificate;

