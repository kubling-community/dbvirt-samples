/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LoggingProperties model module.
 * @module model/LoggingProperties
 * @version 2019-06-01-preview
 */
class LoggingProperties {
    /**
     * Constructs a new <code>LoggingProperties</code>.
     * The logging properties of the connected registry.
     * @alias module:model/LoggingProperties
     */
    constructor() { 
        
        LoggingProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LoggingProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LoggingProperties} obj Optional instance to populate.
     * @return {module:model/LoggingProperties} The populated <code>LoggingProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LoggingProperties();

            if (data.hasOwnProperty('logLevel')) {
                obj['logLevel'] = ApiClient.convertToType(data['logLevel'], 'String');
            }
            if (data.hasOwnProperty('auditLogStatus')) {
                obj['auditLogStatus'] = ApiClient.convertToType(data['auditLogStatus'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LoggingProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LoggingProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['logLevel'] && !(typeof data['logLevel'] === 'string' || data['logLevel'] instanceof String)) {
            throw new Error("Expected the field `logLevel` to be a primitive type in the JSON string but got " + data['logLevel']);
        }
        // ensure the json data is a string
        if (data['auditLogStatus'] && !(typeof data['auditLogStatus'] === 'string' || data['auditLogStatus'] instanceof String)) {
            throw new Error("Expected the field `auditLogStatus` to be a primitive type in the JSON string but got " + data['auditLogStatus']);
        }

        return true;
    }


}



/**
 * The verbosity of logs persisted on the connected registry.
 * @member {module:model/LoggingProperties.LogLevelEnum} logLevel
 * @default 'Information'
 */
LoggingProperties.prototype['logLevel'] = 'Information';

/**
 * Indicates whether audit logs are enabled on the connected registry.
 * @member {module:model/LoggingProperties.AuditLogStatusEnum} auditLogStatus
 * @default 'Disabled'
 */
LoggingProperties.prototype['auditLogStatus'] = 'Disabled';





/**
 * Allowed values for the <code>logLevel</code> property.
 * @enum {String}
 * @readonly
 */
LoggingProperties['LogLevelEnum'] = {

    /**
     * value: "Debug"
     * @const
     */
    "Debug": "Debug",

    /**
     * value: "Information"
     * @const
     */
    "Information": "Information",

    /**
     * value: "Warning"
     * @const
     */
    "Warning": "Warning",

    /**
     * value: "Error"
     * @const
     */
    "Error": "Error",

    /**
     * value: "None"
     * @const
     */
    "None": "None"
};


/**
 * Allowed values for the <code>auditLogStatus</code> property.
 * @enum {String}
 * @readonly
 */
LoggingProperties['AuditLogStatusEnum'] = {

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};



export default LoggingProperties;

