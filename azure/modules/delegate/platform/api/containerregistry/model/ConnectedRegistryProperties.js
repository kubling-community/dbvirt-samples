/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ActivationProperties from './ActivationProperties';
import LoggingProperties from './LoggingProperties';
import LoginServerProperties from './LoginServerProperties';
import ParentProperties from './ParentProperties';
import StatusDetailProperties from './StatusDetailProperties';

/**
 * The ConnectedRegistryProperties model module.
 * @module model/ConnectedRegistryProperties
 * @version 2019-06-01-preview
 */
class ConnectedRegistryProperties {
    /**
     * Constructs a new <code>ConnectedRegistryProperties</code>.
     * The properties of a connected registry.
     * @alias module:model/ConnectedRegistryProperties
     * @param mode {module:model/ConnectedRegistryProperties.ModeEnum} The mode of the connected registry resource that indicates the permissions of the registry.
     * @param parent {module:model/ParentProperties} 
     */
    constructor(mode, parent) { 
        
        ConnectedRegistryProperties.initialize(this, mode, parent);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, mode, parent) { 
        obj['mode'] = mode;
        obj['parent'] = parent;
    }

    /**
     * Constructs a <code>ConnectedRegistryProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConnectedRegistryProperties} obj Optional instance to populate.
     * @return {module:model/ConnectedRegistryProperties} The populated <code>ConnectedRegistryProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConnectedRegistryProperties();

            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
            if (data.hasOwnProperty('connectionState')) {
                obj['connectionState'] = ApiClient.convertToType(data['connectionState'], 'String');
            }
            if (data.hasOwnProperty('lastActivityTime')) {
                obj['lastActivityTime'] = ApiClient.convertToType(data['lastActivityTime'], 'Date');
            }
            if (data.hasOwnProperty('activation')) {
                obj['activation'] = ActivationProperties.constructFromObject(data['activation']);
            }
            if (data.hasOwnProperty('parent')) {
                obj['parent'] = ParentProperties.constructFromObject(data['parent']);
            }
            if (data.hasOwnProperty('clientTokenIds')) {
                obj['clientTokenIds'] = ApiClient.convertToType(data['clientTokenIds'], ['String']);
            }
            if (data.hasOwnProperty('loginServer')) {
                obj['loginServer'] = LoginServerProperties.constructFromObject(data['loginServer']);
            }
            if (data.hasOwnProperty('logging')) {
                obj['logging'] = LoggingProperties.constructFromObject(data['logging']);
            }
            if (data.hasOwnProperty('statusDetails')) {
                obj['statusDetails'] = ApiClient.convertToType(data['statusDetails'], [StatusDetailProperties]);
            }
            if (data.hasOwnProperty('notificationsList')) {
                obj['notificationsList'] = ApiClient.convertToType(data['notificationsList'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConnectedRegistryProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConnectedRegistryProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ConnectedRegistryProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['mode'] && !(typeof data['mode'] === 'string' || data['mode'] instanceof String)) {
            throw new Error("Expected the field `mode` to be a primitive type in the JSON string but got " + data['mode']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }
        // ensure the json data is a string
        if (data['connectionState'] && !(typeof data['connectionState'] === 'string' || data['connectionState'] instanceof String)) {
            throw new Error("Expected the field `connectionState` to be a primitive type in the JSON string but got " + data['connectionState']);
        }
        // validate the optional field `activation`
        if (data['activation']) { // data not null
          ActivationProperties.validateJSON(data['activation']);
        }
        // validate the optional field `parent`
        if (data['parent']) { // data not null
          ParentProperties.validateJSON(data['parent']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['clientTokenIds'])) {
            throw new Error("Expected the field `clientTokenIds` to be an array in the JSON data but got " + data['clientTokenIds']);
        }
        // validate the optional field `loginServer`
        if (data['loginServer']) { // data not null
          LoginServerProperties.validateJSON(data['loginServer']);
        }
        // validate the optional field `logging`
        if (data['logging']) { // data not null
          LoggingProperties.validateJSON(data['logging']);
        }
        if (data['statusDetails']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['statusDetails'])) {
                throw new Error("Expected the field `statusDetails` to be an array in the JSON data but got " + data['statusDetails']);
            }
            // validate the optional field `statusDetails` (array)
            for (const item of data['statusDetails']) {
                StatusDetailProperties.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['notificationsList'])) {
            throw new Error("Expected the field `notificationsList` to be an array in the JSON data but got " + data['notificationsList']);
        }

        return true;
    }


}

ConnectedRegistryProperties.RequiredProperties = ["mode", "parent"];

/**
 * Provisioning state of the resource.
 * @member {module:model/ConnectedRegistryProperties.ProvisioningStateEnum} provisioningState
 */
ConnectedRegistryProperties.prototype['provisioningState'] = undefined;

/**
 * The mode of the connected registry resource that indicates the permissions of the registry.
 * @member {module:model/ConnectedRegistryProperties.ModeEnum} mode
 */
ConnectedRegistryProperties.prototype['mode'] = undefined;

/**
 * The current version of ACR runtime on the connected registry.
 * @member {String} version
 */
ConnectedRegistryProperties.prototype['version'] = undefined;

/**
 * The current connection state of the connected registry.
 * @member {module:model/ConnectedRegistryProperties.ConnectionStateEnum} connectionState
 */
ConnectedRegistryProperties.prototype['connectionState'] = undefined;

/**
 * The last activity time of the connected registry.
 * @member {Date} lastActivityTime
 */
ConnectedRegistryProperties.prototype['lastActivityTime'] = undefined;

/**
 * @member {module:model/ActivationProperties} activation
 */
ConnectedRegistryProperties.prototype['activation'] = undefined;

/**
 * @member {module:model/ParentProperties} parent
 */
ConnectedRegistryProperties.prototype['parent'] = undefined;

/**
 * The list of the ACR token resource IDs used to authenticate clients to the connected registry.
 * @member {Array.<String>} clientTokenIds
 */
ConnectedRegistryProperties.prototype['clientTokenIds'] = undefined;

/**
 * @member {module:model/LoginServerProperties} loginServer
 */
ConnectedRegistryProperties.prototype['loginServer'] = undefined;

/**
 * @member {module:model/LoggingProperties} logging
 */
ConnectedRegistryProperties.prototype['logging'] = undefined;

/**
 * The list of current statuses of the connected registry.
 * @member {Array.<module:model/StatusDetailProperties>} statusDetails
 */
ConnectedRegistryProperties.prototype['statusDetails'] = undefined;

/**
 * The list of notifications subscription information for the connected registry.
 * @member {Array.<String>} notificationsList
 */
ConnectedRegistryProperties.prototype['notificationsList'] = undefined;





/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
ConnectedRegistryProperties['ProvisioningStateEnum'] = {

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "Updating"
     * @const
     */
    "Updating": "Updating",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed",

    /**
     * value: "Canceled"
     * @const
     */
    "Canceled": "Canceled"
};


/**
 * Allowed values for the <code>mode</code> property.
 * @enum {String}
 * @readonly
 */
ConnectedRegistryProperties['ModeEnum'] = {

    /**
     * value: "ReadWrite"
     * @const
     */
    "ReadWrite": "ReadWrite",

    /**
     * value: "ReadOnly"
     * @const
     */
    "ReadOnly": "ReadOnly",

    /**
     * value: "Registry"
     * @const
     */
    "Registry": "Registry",

    /**
     * value: "Mirror"
     * @const
     */
    "Mirror": "Mirror"
};


/**
 * Allowed values for the <code>connectionState</code> property.
 * @enum {String}
 * @readonly
 */
ConnectedRegistryProperties['ConnectionStateEnum'] = {

    /**
     * value: "Online"
     * @const
     */
    "Online": "Online",

    /**
     * value: "Offline"
     * @const
     */
    "Offline": "Offline",

    /**
     * value: "Syncing"
     * @const
     */
    "Syncing": "Syncing",

    /**
     * value: "Unhealthy"
     * @const
     */
    "Unhealthy": "Unhealthy"
};



export default ConnectedRegistryProperties;

