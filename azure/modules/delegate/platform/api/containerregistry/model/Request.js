/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Request model module.
 * @module model/Request
 * @version 2019-06-01-preview
 */
class Request {
    /**
     * Constructs a new <code>Request</code>.
     * The request that generated the event.
     * @alias module:model/Request
     */
    constructor() { 
        
        Request.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Request</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Request} obj Optional instance to populate.
     * @return {module:model/Request} The populated <code>Request</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Request();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('addr')) {
                obj['addr'] = ApiClient.convertToType(data['addr'], 'String');
            }
            if (data.hasOwnProperty('host')) {
                obj['host'] = ApiClient.convertToType(data['host'], 'String');
            }
            if (data.hasOwnProperty('method')) {
                obj['method'] = ApiClient.convertToType(data['method'], 'String');
            }
            if (data.hasOwnProperty('useragent')) {
                obj['useragent'] = ApiClient.convertToType(data['useragent'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Request</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Request</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['addr'] && !(typeof data['addr'] === 'string' || data['addr'] instanceof String)) {
            throw new Error("Expected the field `addr` to be a primitive type in the JSON string but got " + data['addr']);
        }
        // ensure the json data is a string
        if (data['host'] && !(typeof data['host'] === 'string' || data['host'] instanceof String)) {
            throw new Error("Expected the field `host` to be a primitive type in the JSON string but got " + data['host']);
        }
        // ensure the json data is a string
        if (data['method'] && !(typeof data['method'] === 'string' || data['method'] instanceof String)) {
            throw new Error("Expected the field `method` to be a primitive type in the JSON string but got " + data['method']);
        }
        // ensure the json data is a string
        if (data['useragent'] && !(typeof data['useragent'] === 'string' || data['useragent'] instanceof String)) {
            throw new Error("Expected the field `useragent` to be a primitive type in the JSON string but got " + data['useragent']);
        }

        return true;
    }


}



/**
 * The ID of the request that initiated the event.
 * @member {String} id
 */
Request.prototype['id'] = undefined;

/**
 * The IP or hostname and possibly port of the client connection that initiated the event. This is the RemoteAddr from the standard http request.
 * @member {String} addr
 */
Request.prototype['addr'] = undefined;

/**
 * The externally accessible hostname of the registry instance, as specified by the http host header on incoming requests.
 * @member {String} host
 */
Request.prototype['host'] = undefined;

/**
 * The request method that generated the event.
 * @member {String} method
 */
Request.prototype['method'] = undefined;

/**
 * The user agent header of the request.
 * @member {String} useragent
 */
Request.prototype['useragent'] = undefined;






export default Request;

