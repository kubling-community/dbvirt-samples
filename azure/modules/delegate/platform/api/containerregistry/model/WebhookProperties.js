/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WebhookProperties model module.
 * @module model/WebhookProperties
 * @version 2019-06-01-preview
 */
class WebhookProperties {
    /**
     * Constructs a new <code>WebhookProperties</code>.
     * The properties of a webhook.
     * @alias module:model/WebhookProperties
     * @param actions {Array.<module:model/WebhookProperties.ActionsEnum>} The list of actions that trigger the webhook to post notifications.
     */
    constructor(actions) { 
        
        WebhookProperties.initialize(this, actions);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, actions) { 
        obj['actions'] = actions;
    }

    /**
     * Constructs a <code>WebhookProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WebhookProperties} obj Optional instance to populate.
     * @return {module:model/WebhookProperties} The populated <code>WebhookProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WebhookProperties();

            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('scope')) {
                obj['scope'] = ApiClient.convertToType(data['scope'], 'String');
            }
            if (data.hasOwnProperty('actions')) {
                obj['actions'] = ApiClient.convertToType(data['actions'], ['String']);
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WebhookProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WebhookProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WebhookProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['scope'] && !(typeof data['scope'] === 'string' || data['scope'] instanceof String)) {
            throw new Error("Expected the field `scope` to be a primitive type in the JSON string but got " + data['scope']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['actions'])) {
            throw new Error("Expected the field `actions` to be an array in the JSON data but got " + data['actions']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }

        return true;
    }


}

WebhookProperties.RequiredProperties = ["actions"];

/**
 * The status of the webhook at the time the operation was called.
 * @member {module:model/WebhookProperties.StatusEnum} status
 */
WebhookProperties.prototype['status'] = undefined;

/**
 * The scope of repositories where the event can be triggered. For example, 'foo:*' means events for all tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is equivalent to 'foo:latest'. Empty means all events.
 * @member {String} scope
 */
WebhookProperties.prototype['scope'] = undefined;

/**
 * The list of actions that trigger the webhook to post notifications.
 * @member {Array.<module:model/WebhookProperties.ActionsEnum>} actions
 */
WebhookProperties.prototype['actions'] = undefined;

/**
 * The provisioning state of the webhook at the time the operation was called.
 * @member {module:model/WebhookProperties.ProvisioningStateEnum} provisioningState
 */
WebhookProperties.prototype['provisioningState'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
WebhookProperties['StatusEnum'] = {

    /**
     * value: "enabled"
     * @const
     */
    "enabled": "enabled",

    /**
     * value: "disabled"
     * @const
     */
    "disabled": "disabled"
};


/**
 * Allowed values for the <code>actions</code> property.
 * @enum {String}
 * @readonly
 */
WebhookProperties['ActionsEnum'] = {

    /**
     * value: "push"
     * @const
     */
    "push": "push",

    /**
     * value: "delete"
     * @const
     */
    "delete": "delete",

    /**
     * value: "quarantine"
     * @const
     */
    "quarantine": "quarantine",

    /**
     * value: "chart_push"
     * @const
     */
    "chart_push": "chart_push",

    /**
     * value: "chart_delete"
     * @const
     */
    "chart_delete": "chart_delete"
};


/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
WebhookProperties['ProvisioningStateEnum'] = {

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "Updating"
     * @const
     */
    "Updating": "Updating",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed",

    /**
     * value: "Canceled"
     * @const
     */
    "Canceled": "Canceled"
};



export default WebhookProperties;

