/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PipelineRunSourceProperties from './PipelineRunSourceProperties';
import PipelineRunTargetProperties from './PipelineRunTargetProperties';

/**
 * The PipelineRunRequest model module.
 * @module model/PipelineRunRequest
 * @version 2019-06-01-preview
 */
class PipelineRunRequest {
    /**
     * Constructs a new <code>PipelineRunRequest</code>.
     * The request properties provided for a pipeline run.
     * @alias module:model/PipelineRunRequest
     */
    constructor() { 
        
        PipelineRunRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PipelineRunRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PipelineRunRequest} obj Optional instance to populate.
     * @return {module:model/PipelineRunRequest} The populated <code>PipelineRunRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PipelineRunRequest();

            if (data.hasOwnProperty('pipelineResourceId')) {
                obj['pipelineResourceId'] = ApiClient.convertToType(data['pipelineResourceId'], 'String');
            }
            if (data.hasOwnProperty('artifacts')) {
                obj['artifacts'] = ApiClient.convertToType(data['artifacts'], ['String']);
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = PipelineRunSourceProperties.constructFromObject(data['source']);
            }
            if (data.hasOwnProperty('target')) {
                obj['target'] = PipelineRunTargetProperties.constructFromObject(data['target']);
            }
            if (data.hasOwnProperty('catalogDigest')) {
                obj['catalogDigest'] = ApiClient.convertToType(data['catalogDigest'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PipelineRunRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PipelineRunRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['pipelineResourceId'] && !(typeof data['pipelineResourceId'] === 'string' || data['pipelineResourceId'] instanceof String)) {
            throw new Error("Expected the field `pipelineResourceId` to be a primitive type in the JSON string but got " + data['pipelineResourceId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['artifacts'])) {
            throw new Error("Expected the field `artifacts` to be an array in the JSON data but got " + data['artifacts']);
        }
        // validate the optional field `source`
        if (data['source']) { // data not null
          PipelineRunSourceProperties.validateJSON(data['source']);
        }
        // validate the optional field `target`
        if (data['target']) { // data not null
          PipelineRunTargetProperties.validateJSON(data['target']);
        }
        // ensure the json data is a string
        if (data['catalogDigest'] && !(typeof data['catalogDigest'] === 'string' || data['catalogDigest'] instanceof String)) {
            throw new Error("Expected the field `catalogDigest` to be a primitive type in the JSON string but got " + data['catalogDigest']);
        }

        return true;
    }


}



/**
 * The resource ID of the pipeline to run.
 * @member {String} pipelineResourceId
 */
PipelineRunRequest.prototype['pipelineResourceId'] = undefined;

/**
 * List of source artifacts to be transferred by the pipeline.   Specify an image by repository ('hello-world'). This will use the 'latest' tag.  Specify an image by tag ('hello-world:latest').  Specify an image by sha256-based manifest digest ('hello-world@sha256:abc123').
 * @member {Array.<String>} artifacts
 */
PipelineRunRequest.prototype['artifacts'] = undefined;

/**
 * @member {module:model/PipelineRunSourceProperties} source
 */
PipelineRunRequest.prototype['source'] = undefined;

/**
 * @member {module:model/PipelineRunTargetProperties} target
 */
PipelineRunRequest.prototype['target'] = undefined;

/**
 * The digest of the tar used to transfer the artifacts.
 * @member {String} catalogDigest
 */
PipelineRunRequest.prototype['catalogDigest'] = undefined;






export default PipelineRunRequest;

