/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AgentProperties from './AgentProperties';
import Credentials from './Credentials';
import PlatformProperties from './PlatformProperties';
import TaskStepProperties from './TaskStepProperties';
import TriggerProperties from './TriggerProperties';

/**
 * The TaskProperties model module.
 * @module model/TaskProperties
 * @version 2019-06-01-preview
 */
class TaskProperties {
    /**
     * Constructs a new <code>TaskProperties</code>.
     * The properties of a task.
     * @alias module:model/TaskProperties
     */
    constructor() { 
        
        TaskProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TaskProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TaskProperties} obj Optional instance to populate.
     * @return {module:model/TaskProperties} The populated <code>TaskProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TaskProperties();

            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('creationDate')) {
                obj['creationDate'] = ApiClient.convertToType(data['creationDate'], 'Date');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('platform')) {
                obj['platform'] = PlatformProperties.constructFromObject(data['platform']);
            }
            if (data.hasOwnProperty('agentConfiguration')) {
                obj['agentConfiguration'] = AgentProperties.constructFromObject(data['agentConfiguration']);
            }
            if (data.hasOwnProperty('agentPoolName')) {
                obj['agentPoolName'] = ApiClient.convertToType(data['agentPoolName'], 'String');
            }
            if (data.hasOwnProperty('timeout')) {
                obj['timeout'] = ApiClient.convertToType(data['timeout'], 'Number');
            }
            if (data.hasOwnProperty('step')) {
                obj['step'] = TaskStepProperties.constructFromObject(data['step']);
            }
            if (data.hasOwnProperty('trigger')) {
                obj['trigger'] = TriggerProperties.constructFromObject(data['trigger']);
            }
            if (data.hasOwnProperty('credentials')) {
                obj['credentials'] = Credentials.constructFromObject(data['credentials']);
            }
            if (data.hasOwnProperty('logTemplate')) {
                obj['logTemplate'] = ApiClient.convertToType(data['logTemplate'], 'String');
            }
            if (data.hasOwnProperty('isSystemTask')) {
                obj['isSystemTask'] = ApiClient.convertToType(data['isSystemTask'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TaskProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TaskProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // validate the optional field `platform`
        if (data['platform']) { // data not null
          PlatformProperties.validateJSON(data['platform']);
        }
        // validate the optional field `agentConfiguration`
        if (data['agentConfiguration']) { // data not null
          AgentProperties.validateJSON(data['agentConfiguration']);
        }
        // ensure the json data is a string
        if (data['agentPoolName'] && !(typeof data['agentPoolName'] === 'string' || data['agentPoolName'] instanceof String)) {
            throw new Error("Expected the field `agentPoolName` to be a primitive type in the JSON string but got " + data['agentPoolName']);
        }
        // validate the optional field `step`
        if (data['step']) { // data not null
          TaskStepProperties.validateJSON(data['step']);
        }
        // validate the optional field `trigger`
        if (data['trigger']) { // data not null
          TriggerProperties.validateJSON(data['trigger']);
        }
        // validate the optional field `credentials`
        if (data['credentials']) { // data not null
          Credentials.validateJSON(data['credentials']);
        }
        // ensure the json data is a string
        if (data['logTemplate'] && !(typeof data['logTemplate'] === 'string' || data['logTemplate'] instanceof String)) {
            throw new Error("Expected the field `logTemplate` to be a primitive type in the JSON string but got " + data['logTemplate']);
        }

        return true;
    }


}



/**
 * The provisioning state of the task.
 * @member {module:model/TaskProperties.ProvisioningStateEnum} provisioningState
 */
TaskProperties.prototype['provisioningState'] = undefined;

/**
 * The creation date of task.
 * @member {Date} creationDate
 */
TaskProperties.prototype['creationDate'] = undefined;

/**
 * The current status of task.
 * @member {module:model/TaskProperties.StatusEnum} status
 */
TaskProperties.prototype['status'] = undefined;

/**
 * @member {module:model/PlatformProperties} platform
 */
TaskProperties.prototype['platform'] = undefined;

/**
 * @member {module:model/AgentProperties} agentConfiguration
 */
TaskProperties.prototype['agentConfiguration'] = undefined;

/**
 * The dedicated agent pool for the task.
 * @member {String} agentPoolName
 */
TaskProperties.prototype['agentPoolName'] = undefined;

/**
 * Run timeout in seconds.
 * @member {Number} timeout
 * @default 3600
 */
TaskProperties.prototype['timeout'] = 3600;

/**
 * @member {module:model/TaskStepProperties} step
 */
TaskProperties.prototype['step'] = undefined;

/**
 * @member {module:model/TriggerProperties} trigger
 */
TaskProperties.prototype['trigger'] = undefined;

/**
 * @member {module:model/Credentials} credentials
 */
TaskProperties.prototype['credentials'] = undefined;

/**
 * The template that describes the repository and tag information for run log artifact.
 * @member {String} logTemplate
 */
TaskProperties.prototype['logTemplate'] = undefined;

/**
 * The value of this property indicates whether the task resource is system task or not.
 * @member {Boolean} isSystemTask
 * @default false
 */
TaskProperties.prototype['isSystemTask'] = false;





/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
TaskProperties['ProvisioningStateEnum'] = {

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "Updating"
     * @const
     */
    "Updating": "Updating",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed",

    /**
     * value: "Canceled"
     * @const
     */
    "Canceled": "Canceled"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
TaskProperties['StatusEnum'] = {

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled",

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled"
};



export default TaskProperties;

