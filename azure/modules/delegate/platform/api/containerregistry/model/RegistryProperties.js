/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EncryptionProperty from './EncryptionProperty';
import NetworkRuleSet from './NetworkRuleSet';
import Policies from './Policies';
import PrivateEndpointConnection from './PrivateEndpointConnection';
import Status from './Status';

/**
 * The RegistryProperties model module.
 * @module model/RegistryProperties
 * @version 2019-06-01-preview
 */
class RegistryProperties {
    /**
     * Constructs a new <code>RegistryProperties</code>.
     * The properties of a container registry.
     * @alias module:model/RegistryProperties
     */
    constructor() { 
        
        RegistryProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RegistryProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RegistryProperties} obj Optional instance to populate.
     * @return {module:model/RegistryProperties} The populated <code>RegistryProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RegistryProperties();

            if (data.hasOwnProperty('loginServer')) {
                obj['loginServer'] = ApiClient.convertToType(data['loginServer'], 'String');
            }
            if (data.hasOwnProperty('creationDate')) {
                obj['creationDate'] = ApiClient.convertToType(data['creationDate'], 'Date');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = Status.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('adminUserEnabled')) {
                obj['adminUserEnabled'] = ApiClient.convertToType(data['adminUserEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('networkRuleSet')) {
                obj['networkRuleSet'] = NetworkRuleSet.constructFromObject(data['networkRuleSet']);
            }
            if (data.hasOwnProperty('policies')) {
                obj['policies'] = Policies.constructFromObject(data['policies']);
            }
            if (data.hasOwnProperty('encryption')) {
                obj['encryption'] = EncryptionProperty.constructFromObject(data['encryption']);
            }
            if (data.hasOwnProperty('dataEndpointEnabled')) {
                obj['dataEndpointEnabled'] = ApiClient.convertToType(data['dataEndpointEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('dataEndpointHostNames')) {
                obj['dataEndpointHostNames'] = ApiClient.convertToType(data['dataEndpointHostNames'], ['String']);
            }
            if (data.hasOwnProperty('privateEndpointConnections')) {
                obj['privateEndpointConnections'] = ApiClient.convertToType(data['privateEndpointConnections'], [PrivateEndpointConnection]);
            }
            if (data.hasOwnProperty('publicNetworkAccess')) {
                obj['publicNetworkAccess'] = ApiClient.convertToType(data['publicNetworkAccess'], 'String');
            }
            if (data.hasOwnProperty('networkRuleBypassOptions')) {
                obj['networkRuleBypassOptions'] = ApiClient.convertToType(data['networkRuleBypassOptions'], 'String');
            }
            if (data.hasOwnProperty('zoneRedundancy')) {
                obj['zoneRedundancy'] = ApiClient.convertToType(data['zoneRedundancy'], 'String');
            }
            if (data.hasOwnProperty('anonymousPullEnabled')) {
                obj['anonymousPullEnabled'] = ApiClient.convertToType(data['anonymousPullEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('metadataSearch')) {
                obj['metadataSearch'] = ApiClient.convertToType(data['metadataSearch'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RegistryProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RegistryProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['loginServer'] && !(typeof data['loginServer'] === 'string' || data['loginServer'] instanceof String)) {
            throw new Error("Expected the field `loginServer` to be a primitive type in the JSON string but got " + data['loginServer']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          Status.validateJSON(data['status']);
        }
        // validate the optional field `networkRuleSet`
        if (data['networkRuleSet']) { // data not null
          NetworkRuleSet.validateJSON(data['networkRuleSet']);
        }
        // validate the optional field `policies`
        if (data['policies']) { // data not null
          Policies.validateJSON(data['policies']);
        }
        // validate the optional field `encryption`
        if (data['encryption']) { // data not null
          EncryptionProperty.validateJSON(data['encryption']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['dataEndpointHostNames'])) {
            throw new Error("Expected the field `dataEndpointHostNames` to be an array in the JSON data but got " + data['dataEndpointHostNames']);
        }
        if (data['privateEndpointConnections']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['privateEndpointConnections'])) {
                throw new Error("Expected the field `privateEndpointConnections` to be an array in the JSON data but got " + data['privateEndpointConnections']);
            }
            // validate the optional field `privateEndpointConnections` (array)
            for (const item of data['privateEndpointConnections']) {
                PrivateEndpointConnection.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['publicNetworkAccess'] && !(typeof data['publicNetworkAccess'] === 'string' || data['publicNetworkAccess'] instanceof String)) {
            throw new Error("Expected the field `publicNetworkAccess` to be a primitive type in the JSON string but got " + data['publicNetworkAccess']);
        }
        // ensure the json data is a string
        if (data['networkRuleBypassOptions'] && !(typeof data['networkRuleBypassOptions'] === 'string' || data['networkRuleBypassOptions'] instanceof String)) {
            throw new Error("Expected the field `networkRuleBypassOptions` to be a primitive type in the JSON string but got " + data['networkRuleBypassOptions']);
        }
        // ensure the json data is a string
        if (data['zoneRedundancy'] && !(typeof data['zoneRedundancy'] === 'string' || data['zoneRedundancy'] instanceof String)) {
            throw new Error("Expected the field `zoneRedundancy` to be a primitive type in the JSON string but got " + data['zoneRedundancy']);
        }
        // ensure the json data is a string
        if (data['metadataSearch'] && !(typeof data['metadataSearch'] === 'string' || data['metadataSearch'] instanceof String)) {
            throw new Error("Expected the field `metadataSearch` to be a primitive type in the JSON string but got " + data['metadataSearch']);
        }

        return true;
    }


}



/**
 * The URL that can be used to log into the container registry.
 * @member {String} loginServer
 */
RegistryProperties.prototype['loginServer'] = undefined;

/**
 * The creation date of the container registry in ISO8601 format.
 * @member {Date} creationDate
 */
RegistryProperties.prototype['creationDate'] = undefined;

/**
 * The provisioning state of the container registry at the time the operation was called.
 * @member {module:model/RegistryProperties.ProvisioningStateEnum} provisioningState
 */
RegistryProperties.prototype['provisioningState'] = undefined;

/**
 * @member {module:model/Status} status
 */
RegistryProperties.prototype['status'] = undefined;

/**
 * The value that indicates whether the admin user is enabled.
 * @member {Boolean} adminUserEnabled
 * @default false
 */
RegistryProperties.prototype['adminUserEnabled'] = false;

/**
 * @member {module:model/NetworkRuleSet} networkRuleSet
 */
RegistryProperties.prototype['networkRuleSet'] = undefined;

/**
 * @member {module:model/Policies} policies
 */
RegistryProperties.prototype['policies'] = undefined;

/**
 * @member {module:model/EncryptionProperty} encryption
 */
RegistryProperties.prototype['encryption'] = undefined;

/**
 * Enable a single data endpoint per region for serving data.
 * @member {Boolean} dataEndpointEnabled
 */
RegistryProperties.prototype['dataEndpointEnabled'] = undefined;

/**
 * List of host names that will serve data when dataEndpointEnabled is true.
 * @member {Array.<String>} dataEndpointHostNames
 */
RegistryProperties.prototype['dataEndpointHostNames'] = undefined;

/**
 * List of private endpoint connections for a container registry.
 * @member {Array.<module:model/PrivateEndpointConnection>} privateEndpointConnections
 */
RegistryProperties.prototype['privateEndpointConnections'] = undefined;

/**
 * Whether or not public network access is allowed for the container registry.
 * @member {module:model/RegistryProperties.PublicNetworkAccessEnum} publicNetworkAccess
 * @default 'Enabled'
 */
RegistryProperties.prototype['publicNetworkAccess'] = 'Enabled';

/**
 * Whether to allow trusted Azure services to access a network restricted registry.
 * @member {module:model/RegistryProperties.NetworkRuleBypassOptionsEnum} networkRuleBypassOptions
 * @default 'AzureServices'
 */
RegistryProperties.prototype['networkRuleBypassOptions'] = 'AzureServices';

/**
 * Whether or not zone redundancy is enabled for this container registry
 * @member {module:model/RegistryProperties.ZoneRedundancyEnum} zoneRedundancy
 * @default 'Disabled'
 */
RegistryProperties.prototype['zoneRedundancy'] = 'Disabled';

/**
 * Enables registry-wide pull from unauthenticated clients.
 * @member {Boolean} anonymousPullEnabled
 * @default false
 */
RegistryProperties.prototype['anonymousPullEnabled'] = false;

/**
 * Determines whether registry artifacts are indexed for metadata search.
 * @member {module:model/RegistryProperties.MetadataSearchEnum} metadataSearch
 * @default 'Disabled'
 */
RegistryProperties.prototype['metadataSearch'] = 'Disabled';





/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
RegistryProperties['ProvisioningStateEnum'] = {

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "Updating"
     * @const
     */
    "Updating": "Updating",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed",

    /**
     * value: "Canceled"
     * @const
     */
    "Canceled": "Canceled"
};


/**
 * Allowed values for the <code>publicNetworkAccess</code> property.
 * @enum {String}
 * @readonly
 */
RegistryProperties['PublicNetworkAccessEnum'] = {

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};


/**
 * Allowed values for the <code>networkRuleBypassOptions</code> property.
 * @enum {String}
 * @readonly
 */
RegistryProperties['NetworkRuleBypassOptionsEnum'] = {

    /**
     * value: "AzureServices"
     * @const
     */
    "AzureServices": "AzureServices",

    /**
     * value: "None"
     * @const
     */
    "None": "None"
};


/**
 * Allowed values for the <code>zoneRedundancy</code> property.
 * @enum {String}
 * @readonly
 */
RegistryProperties['ZoneRedundancyEnum'] = {

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};


/**
 * Allowed values for the <code>metadataSearch</code> property.
 * @enum {String}
 * @readonly
 */
RegistryProperties['MetadataSearchEnum'] = {

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};



export default RegistryProperties;

