/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SourceUploadDefinition model module.
 * @module model/SourceUploadDefinition
 * @version 2019-06-01-preview
 */
class SourceUploadDefinition {
    /**
     * Constructs a new <code>SourceUploadDefinition</code>.
     * The properties of a response to source upload request.
     * @alias module:model/SourceUploadDefinition
     */
    constructor() { 
        
        SourceUploadDefinition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SourceUploadDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SourceUploadDefinition} obj Optional instance to populate.
     * @return {module:model/SourceUploadDefinition} The populated <code>SourceUploadDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SourceUploadDefinition();

            if (data.hasOwnProperty('uploadUrl')) {
                obj['uploadUrl'] = ApiClient.convertToType(data['uploadUrl'], 'String');
            }
            if (data.hasOwnProperty('relativePath')) {
                obj['relativePath'] = ApiClient.convertToType(data['relativePath'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SourceUploadDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SourceUploadDefinition</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['uploadUrl'] && !(typeof data['uploadUrl'] === 'string' || data['uploadUrl'] instanceof String)) {
            throw new Error("Expected the field `uploadUrl` to be a primitive type in the JSON string but got " + data['uploadUrl']);
        }
        // ensure the json data is a string
        if (data['relativePath'] && !(typeof data['relativePath'] === 'string' || data['relativePath'] instanceof String)) {
            throw new Error("Expected the field `relativePath` to be a primitive type in the JSON string but got " + data['relativePath']);
        }

        return true;
    }


}



/**
 * The URL where the client can upload the source.
 * @member {String} uploadUrl
 */
SourceUploadDefinition.prototype['uploadUrl'] = undefined;

/**
 * The relative path to the source. This is used to submit the subsequent queue build request.
 * @member {String} relativePath
 */
SourceUploadDefinition.prototype['relativePath'] = undefined;






export default SourceUploadDefinition;

