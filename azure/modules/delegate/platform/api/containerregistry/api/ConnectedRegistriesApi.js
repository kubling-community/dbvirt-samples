/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConnectedRegistry from '../model/ConnectedRegistry';
import ConnectedRegistryListResult from '../model/ConnectedRegistryListResult';
import ConnectedRegistryUpdateParameters from '../model/ConnectedRegistryUpdateParameters';
import ErrorResponse from '../model/ErrorResponse';

/**
* ConnectedRegistries service.
* @module api/ConnectedRegistriesApi
* @version 2019-06-01-preview
*/
export default class ConnectedRegistriesApi {

    /**
    * Constructs a new ConnectedRegistriesApi. 
    * @alias module:api/ConnectedRegistriesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the connectedRegistriesCreate operation.
     * @callback module:api/ConnectedRegistriesApi~connectedRegistriesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConnectedRegistry} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a connected registry for a container registry with the specified parameters.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription. The value must be an UUID.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} registryName The name of the container registry.
     * @param {String} connectedRegistryName The name of the connected registry.
     * @param {module:model/ConnectedRegistry} connectedRegistry The parameters for creating a connectedRegistry.
     * @param {module:api/ConnectedRegistriesApi~connectedRegistriesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConnectedRegistry}
     */
    connectedRegistriesCreate(apiVersion, subscriptionId, resourceGroupName, registryName, connectedRegistryName, connectedRegistry, callback) {
      let postBody = connectedRegistry;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling connectedRegistriesCreate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling connectedRegistriesCreate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling connectedRegistriesCreate");
      }
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling connectedRegistriesCreate");
      }
      // verify the required parameter 'connectedRegistryName' is set
      if (connectedRegistryName === undefined || connectedRegistryName === null) {
        throw new Error("Missing the required parameter 'connectedRegistryName' when calling connectedRegistriesCreate");
      }
      // verify the required parameter 'connectedRegistry' is set
      if (connectedRegistry === undefined || connectedRegistry === null) {
        throw new Error("Missing the required parameter 'connectedRegistry' when calling connectedRegistriesCreate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'registryName': registryName,
        'connectedRegistryName': connectedRegistryName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConnectedRegistry;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/connectedRegistries/{connectedRegistryName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the connectedRegistriesDeactivate operation.
     * @callback module:api/ConnectedRegistriesApi~connectedRegistriesDeactivateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deactivates the connected registry instance.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription. The value must be an UUID.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} registryName The name of the container registry.
     * @param {String} connectedRegistryName The name of the connected registry.
     * @param {module:api/ConnectedRegistriesApi~connectedRegistriesDeactivateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    connectedRegistriesDeactivate(apiVersion, subscriptionId, resourceGroupName, registryName, connectedRegistryName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling connectedRegistriesDeactivate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling connectedRegistriesDeactivate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling connectedRegistriesDeactivate");
      }
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling connectedRegistriesDeactivate");
      }
      // verify the required parameter 'connectedRegistryName' is set
      if (connectedRegistryName === undefined || connectedRegistryName === null) {
        throw new Error("Missing the required parameter 'connectedRegistryName' when calling connectedRegistriesDeactivate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'registryName': registryName,
        'connectedRegistryName': connectedRegistryName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/connectedRegistries/{connectedRegistryName}/deactivate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the connectedRegistriesDelete operation.
     * @callback module:api/ConnectedRegistriesApi~connectedRegistriesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a connected registry from a container registry.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription. The value must be an UUID.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} registryName The name of the container registry.
     * @param {String} connectedRegistryName The name of the connected registry.
     * @param {module:api/ConnectedRegistriesApi~connectedRegistriesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    connectedRegistriesDelete(apiVersion, subscriptionId, resourceGroupName, registryName, connectedRegistryName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling connectedRegistriesDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling connectedRegistriesDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling connectedRegistriesDelete");
      }
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling connectedRegistriesDelete");
      }
      // verify the required parameter 'connectedRegistryName' is set
      if (connectedRegistryName === undefined || connectedRegistryName === null) {
        throw new Error("Missing the required parameter 'connectedRegistryName' when calling connectedRegistriesDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'registryName': registryName,
        'connectedRegistryName': connectedRegistryName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/connectedRegistries/{connectedRegistryName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the connectedRegistriesGet operation.
     * @callback module:api/ConnectedRegistriesApi~connectedRegistriesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConnectedRegistry} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the properties of the connected registry.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription. The value must be an UUID.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} registryName The name of the container registry.
     * @param {String} connectedRegistryName The name of the connected registry.
     * @param {module:api/ConnectedRegistriesApi~connectedRegistriesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConnectedRegistry}
     */
    connectedRegistriesGet(apiVersion, subscriptionId, resourceGroupName, registryName, connectedRegistryName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling connectedRegistriesGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling connectedRegistriesGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling connectedRegistriesGet");
      }
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling connectedRegistriesGet");
      }
      // verify the required parameter 'connectedRegistryName' is set
      if (connectedRegistryName === undefined || connectedRegistryName === null) {
        throw new Error("Missing the required parameter 'connectedRegistryName' when calling connectedRegistriesGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'registryName': registryName,
        'connectedRegistryName': connectedRegistryName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConnectedRegistry;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/connectedRegistries/{connectedRegistryName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the connectedRegistriesList operation.
     * @callback module:api/ConnectedRegistriesApi~connectedRegistriesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConnectedRegistryListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all connected registries for the specified container registry.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription. The value must be an UUID.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} registryName The name of the container registry.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] An OData filter expression that describes a subset of connectedRegistries to return. The parameters that can be filtered are parent.id (the resource id of the connectedRegistry parent), mode, and connectionState. The supported operator is eq.
     * @param {module:api/ConnectedRegistriesApi~connectedRegistriesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConnectedRegistryListResult}
     */
    connectedRegistriesList(apiVersion, subscriptionId, resourceGroupName, registryName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling connectedRegistriesList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling connectedRegistriesList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling connectedRegistriesList");
      }
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling connectedRegistriesList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'registryName': registryName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConnectedRegistryListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/connectedRegistries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the connectedRegistriesUpdate operation.
     * @callback module:api/ConnectedRegistriesApi~connectedRegistriesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConnectedRegistry} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a connected registry with the specified parameters.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription. The value must be an UUID.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} registryName The name of the container registry.
     * @param {String} connectedRegistryName The name of the connected registry.
     * @param {module:model/ConnectedRegistryUpdateParameters} connectedRegistryUpdateParameters The parameters for updating a connectedRegistry.
     * @param {module:api/ConnectedRegistriesApi~connectedRegistriesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConnectedRegistry}
     */
    connectedRegistriesUpdate(apiVersion, subscriptionId, resourceGroupName, registryName, connectedRegistryName, connectedRegistryUpdateParameters, callback) {
      let postBody = connectedRegistryUpdateParameters;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling connectedRegistriesUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling connectedRegistriesUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling connectedRegistriesUpdate");
      }
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling connectedRegistriesUpdate");
      }
      // verify the required parameter 'connectedRegistryName' is set
      if (connectedRegistryName === undefined || connectedRegistryName === null) {
        throw new Error("Missing the required parameter 'connectedRegistryName' when calling connectedRegistriesUpdate");
      }
      // verify the required parameter 'connectedRegistryUpdateParameters' is set
      if (connectedRegistryUpdateParameters === undefined || connectedRegistryUpdateParameters === null) {
        throw new Error("Missing the required parameter 'connectedRegistryUpdateParameters' when calling connectedRegistriesUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'registryName': registryName,
        'connectedRegistryName': connectedRegistryName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConnectedRegistry;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/connectedRegistries/{connectedRegistryName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
