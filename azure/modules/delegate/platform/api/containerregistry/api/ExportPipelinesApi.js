/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import ExportPipeline from '../model/ExportPipeline';
import ExportPipelineListResult from '../model/ExportPipelineListResult';

/**
* ExportPipelines service.
* @module api/ExportPipelinesApi
* @version 2019-06-01-preview
*/
export default class ExportPipelinesApi {

    /**
    * Constructs a new ExportPipelinesApi. 
    * @alias module:api/ExportPipelinesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the exportPipelinesCreate operation.
     * @callback module:api/ExportPipelinesApi~exportPipelinesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExportPipeline} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an export pipeline for a container registry with the specified parameters.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription. The value must be an UUID.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} registryName The name of the container registry.
     * @param {String} exportPipelineName The name of the export pipeline.
     * @param {module:model/ExportPipeline} exportPipeline The parameters for creating an export pipeline.
     * @param {module:api/ExportPipelinesApi~exportPipelinesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExportPipeline}
     */
    exportPipelinesCreate(apiVersion, subscriptionId, resourceGroupName, registryName, exportPipelineName, exportPipeline, callback) {
      let postBody = exportPipeline;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling exportPipelinesCreate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling exportPipelinesCreate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling exportPipelinesCreate");
      }
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling exportPipelinesCreate");
      }
      // verify the required parameter 'exportPipelineName' is set
      if (exportPipelineName === undefined || exportPipelineName === null) {
        throw new Error("Missing the required parameter 'exportPipelineName' when calling exportPipelinesCreate");
      }
      // verify the required parameter 'exportPipeline' is set
      if (exportPipeline === undefined || exportPipeline === null) {
        throw new Error("Missing the required parameter 'exportPipeline' when calling exportPipelinesCreate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'registryName': registryName,
        'exportPipelineName': exportPipelineName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ExportPipeline;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/exportPipelines/{exportPipelineName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportPipelinesDelete operation.
     * @callback module:api/ExportPipelinesApi~exportPipelinesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an export pipeline from a container registry.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription. The value must be an UUID.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} registryName The name of the container registry.
     * @param {String} exportPipelineName The name of the export pipeline.
     * @param {module:api/ExportPipelinesApi~exportPipelinesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    exportPipelinesDelete(apiVersion, subscriptionId, resourceGroupName, registryName, exportPipelineName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling exportPipelinesDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling exportPipelinesDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling exportPipelinesDelete");
      }
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling exportPipelinesDelete");
      }
      // verify the required parameter 'exportPipelineName' is set
      if (exportPipelineName === undefined || exportPipelineName === null) {
        throw new Error("Missing the required parameter 'exportPipelineName' when calling exportPipelinesDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'registryName': registryName,
        'exportPipelineName': exportPipelineName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/exportPipelines/{exportPipelineName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportPipelinesGet operation.
     * @callback module:api/ExportPipelinesApi~exportPipelinesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExportPipeline} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the properties of the export pipeline.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription. The value must be an UUID.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} registryName The name of the container registry.
     * @param {String} exportPipelineName The name of the export pipeline.
     * @param {module:api/ExportPipelinesApi~exportPipelinesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExportPipeline}
     */
    exportPipelinesGet(apiVersion, subscriptionId, resourceGroupName, registryName, exportPipelineName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling exportPipelinesGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling exportPipelinesGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling exportPipelinesGet");
      }
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling exportPipelinesGet");
      }
      // verify the required parameter 'exportPipelineName' is set
      if (exportPipelineName === undefined || exportPipelineName === null) {
        throw new Error("Missing the required parameter 'exportPipelineName' when calling exportPipelinesGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'registryName': registryName,
        'exportPipelineName': exportPipelineName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExportPipeline;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/exportPipelines/{exportPipelineName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportPipelinesList operation.
     * @callback module:api/ExportPipelinesApi~exportPipelinesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExportPipelineListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all export pipelines for the specified container registry.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription. The value must be an UUID.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} registryName The name of the container registry.
     * @param {module:api/ExportPipelinesApi~exportPipelinesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExportPipelineListResult}
     */
    exportPipelinesList(apiVersion, subscriptionId, resourceGroupName, registryName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling exportPipelinesList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling exportPipelinesList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling exportPipelinesList");
      }
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling exportPipelinesList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'registryName': registryName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExportPipelineListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/exportPipelines', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
