/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AgentPool from '../model/AgentPool';
import AgentPoolListResult from '../model/AgentPoolListResult';
import AgentPoolQueueStatus from '../model/AgentPoolQueueStatus';
import AgentPoolUpdateParameters from '../model/AgentPoolUpdateParameters';
import ErrorResponse from '../model/ErrorResponse';

/**
* AgentPools service.
* @module api/AgentPoolsApi
* @version 2019-06-01-preview
*/
export default class AgentPoolsApi {

    /**
    * Constructs a new AgentPoolsApi. 
    * @alias module:api/AgentPoolsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the agentPoolsCreate operation.
     * @callback module:api/AgentPoolsApi~agentPoolsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AgentPool} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an agent pool for a container registry with the specified parameters.
     * @param {String} subscriptionId The ID of the target subscription. The value must be an UUID.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} registryName The name of the container registry.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} agentPoolName The name of the agent pool.
     * @param {module:model/AgentPool} agentPool The parameters of an agent pool that needs to scheduled.
     * @param {module:api/AgentPoolsApi~agentPoolsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AgentPool}
     */
    agentPoolsCreate(subscriptionId, resourceGroupName, registryName, apiVersion, agentPoolName, agentPool, callback) {
      let postBody = agentPool;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling agentPoolsCreate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling agentPoolsCreate");
      }
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling agentPoolsCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling agentPoolsCreate");
      }
      // verify the required parameter 'agentPoolName' is set
      if (agentPoolName === undefined || agentPoolName === null) {
        throw new Error("Missing the required parameter 'agentPoolName' when calling agentPoolsCreate");
      }
      // verify the required parameter 'agentPool' is set
      if (agentPool === undefined || agentPool === null) {
        throw new Error("Missing the required parameter 'agentPool' when calling agentPoolsCreate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'registryName': registryName,
        'agentPoolName': agentPoolName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AgentPool;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/agentPools/{agentPoolName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the agentPoolsDelete operation.
     * @callback module:api/AgentPoolsApi~agentPoolsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a specified agent pool resource.
     * @param {String} subscriptionId The ID of the target subscription. The value must be an UUID.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} registryName The name of the container registry.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} agentPoolName The name of the agent pool.
     * @param {module:api/AgentPoolsApi~agentPoolsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    agentPoolsDelete(subscriptionId, resourceGroupName, registryName, apiVersion, agentPoolName, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling agentPoolsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling agentPoolsDelete");
      }
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling agentPoolsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling agentPoolsDelete");
      }
      // verify the required parameter 'agentPoolName' is set
      if (agentPoolName === undefined || agentPoolName === null) {
        throw new Error("Missing the required parameter 'agentPoolName' when calling agentPoolsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'registryName': registryName,
        'agentPoolName': agentPoolName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/agentPools/{agentPoolName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the agentPoolsGet operation.
     * @callback module:api/AgentPoolsApi~agentPoolsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AgentPool} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the detailed information for a given agent pool.
     * @param {String} subscriptionId The ID of the target subscription. The value must be an UUID.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} registryName The name of the container registry.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} agentPoolName The name of the agent pool.
     * @param {module:api/AgentPoolsApi~agentPoolsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AgentPool}
     */
    agentPoolsGet(subscriptionId, resourceGroupName, registryName, apiVersion, agentPoolName, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling agentPoolsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling agentPoolsGet");
      }
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling agentPoolsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling agentPoolsGet");
      }
      // verify the required parameter 'agentPoolName' is set
      if (agentPoolName === undefined || agentPoolName === null) {
        throw new Error("Missing the required parameter 'agentPoolName' when calling agentPoolsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'registryName': registryName,
        'agentPoolName': agentPoolName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AgentPool;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/agentPools/{agentPoolName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the agentPoolsGetQueueStatus operation.
     * @callback module:api/AgentPoolsApi~agentPoolsGetQueueStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AgentPoolQueueStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the count of queued runs for a given agent pool.
     * @param {String} subscriptionId The ID of the target subscription. The value must be an UUID.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} registryName The name of the container registry.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} agentPoolName The name of the agent pool.
     * @param {module:api/AgentPoolsApi~agentPoolsGetQueueStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AgentPoolQueueStatus}
     */
    agentPoolsGetQueueStatus(subscriptionId, resourceGroupName, registryName, apiVersion, agentPoolName, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling agentPoolsGetQueueStatus");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling agentPoolsGetQueueStatus");
      }
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling agentPoolsGetQueueStatus");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling agentPoolsGetQueueStatus");
      }
      // verify the required parameter 'agentPoolName' is set
      if (agentPoolName === undefined || agentPoolName === null) {
        throw new Error("Missing the required parameter 'agentPoolName' when calling agentPoolsGetQueueStatus");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'registryName': registryName,
        'agentPoolName': agentPoolName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AgentPoolQueueStatus;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/agentPools/{agentPoolName}/listQueueStatus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the agentPoolsList operation.
     * @callback module:api/AgentPoolsApi~agentPoolsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AgentPoolListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the agent pools for a specified container registry.
     * @param {String} subscriptionId The ID of the target subscription. The value must be an UUID.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} registryName The name of the container registry.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {module:api/AgentPoolsApi~agentPoolsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AgentPoolListResult}
     */
    agentPoolsList(subscriptionId, resourceGroupName, registryName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling agentPoolsList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling agentPoolsList");
      }
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling agentPoolsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling agentPoolsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'registryName': registryName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AgentPoolListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/agentPools', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the agentPoolsUpdate operation.
     * @callback module:api/AgentPoolsApi~agentPoolsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AgentPool} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an agent pool with the specified parameters.
     * @param {String} subscriptionId The ID of the target subscription. The value must be an UUID.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} registryName The name of the container registry.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} agentPoolName The name of the agent pool.
     * @param {module:model/AgentPoolUpdateParameters} agentPoolUpdateParameters The parameters for updating an agent pool.
     * @param {module:api/AgentPoolsApi~agentPoolsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AgentPool}
     */
    agentPoolsUpdate(subscriptionId, resourceGroupName, registryName, apiVersion, agentPoolName, agentPoolUpdateParameters, callback) {
      let postBody = agentPoolUpdateParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling agentPoolsUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling agentPoolsUpdate");
      }
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling agentPoolsUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling agentPoolsUpdate");
      }
      // verify the required parameter 'agentPoolName' is set
      if (agentPoolName === undefined || agentPoolName === null) {
        throw new Error("Missing the required parameter 'agentPoolName' when calling agentPoolsUpdate");
      }
      // verify the required parameter 'agentPoolUpdateParameters' is set
      if (agentPoolUpdateParameters === undefined || agentPoolUpdateParameters === null) {
        throw new Error("Missing the required parameter 'agentPoolUpdateParameters' when calling agentPoolsUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'registryName': registryName,
        'agentPoolName': agentPoolName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AgentPool;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/agentPools/{agentPoolName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
