/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Archive from '../model/Archive';
import ArchiveListResult from '../model/ArchiveListResult';
import ArchiveUpdateParameters from '../model/ArchiveUpdateParameters';
import ErrorResponse from '../model/ErrorResponse';

/**
* Archives service.
* @module api/ArchivesApi
* @version 2019-06-01-preview
*/
export default class ArchivesApi {

    /**
    * Constructs a new ArchivesApi. 
    * @alias module:api/ArchivesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the archivesCreate operation.
     * @callback module:api/ArchivesApi~archivesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Archive} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a archive for a container registry with the specified parameters.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription. The value must be an UUID.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} registryName The name of the container registry.
     * @param {String} packageType The type of the package resource.
     * @param {String} archiveName The name of the archive resource.
     * @param {module:model/Archive} archive The parameters for creating a archive.
     * @param {module:api/ArchivesApi~archivesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Archive}
     */
    archivesCreate(apiVersion, subscriptionId, resourceGroupName, registryName, packageType, archiveName, archive, callback) {
      let postBody = archive;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling archivesCreate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling archivesCreate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling archivesCreate");
      }
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling archivesCreate");
      }
      // verify the required parameter 'packageType' is set
      if (packageType === undefined || packageType === null) {
        throw new Error("Missing the required parameter 'packageType' when calling archivesCreate");
      }
      // verify the required parameter 'archiveName' is set
      if (archiveName === undefined || archiveName === null) {
        throw new Error("Missing the required parameter 'archiveName' when calling archivesCreate");
      }
      // verify the required parameter 'archive' is set
      if (archive === undefined || archive === null) {
        throw new Error("Missing the required parameter 'archive' when calling archivesCreate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'registryName': registryName,
        'packageType': packageType,
        'archiveName': archiveName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Archive;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/packages/{packageType}/archives/{archiveName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the archivesDelete operation.
     * @callback module:api/ArchivesApi~archivesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a archive from a container registry.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription. The value must be an UUID.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} registryName The name of the container registry.
     * @param {String} packageType The type of the package resource.
     * @param {String} archiveName The name of the archive resource.
     * @param {module:api/ArchivesApi~archivesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    archivesDelete(apiVersion, subscriptionId, resourceGroupName, registryName, packageType, archiveName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling archivesDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling archivesDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling archivesDelete");
      }
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling archivesDelete");
      }
      // verify the required parameter 'packageType' is set
      if (packageType === undefined || packageType === null) {
        throw new Error("Missing the required parameter 'packageType' when calling archivesDelete");
      }
      // verify the required parameter 'archiveName' is set
      if (archiveName === undefined || archiveName === null) {
        throw new Error("Missing the required parameter 'archiveName' when calling archivesDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'registryName': registryName,
        'packageType': packageType,
        'archiveName': archiveName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/packages/{packageType}/archives/{archiveName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the archivesGet operation.
     * @callback module:api/ArchivesApi~archivesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Archive} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the properties of the archive.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription. The value must be an UUID.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} registryName The name of the container registry.
     * @param {String} packageType The type of the package resource.
     * @param {String} archiveName The name of the archive resource.
     * @param {module:api/ArchivesApi~archivesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Archive}
     */
    archivesGet(apiVersion, subscriptionId, resourceGroupName, registryName, packageType, archiveName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling archivesGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling archivesGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling archivesGet");
      }
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling archivesGet");
      }
      // verify the required parameter 'packageType' is set
      if (packageType === undefined || packageType === null) {
        throw new Error("Missing the required parameter 'packageType' when calling archivesGet");
      }
      // verify the required parameter 'archiveName' is set
      if (archiveName === undefined || archiveName === null) {
        throw new Error("Missing the required parameter 'archiveName' when calling archivesGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'registryName': registryName,
        'packageType': packageType,
        'archiveName': archiveName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Archive;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/packages/{packageType}/archives/{archiveName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the archivesList operation.
     * @callback module:api/ArchivesApi~archivesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArchiveListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all archives for the specified container registry and package type.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription. The value must be an UUID.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} registryName The name of the container registry.
     * @param {String} packageType The type of the package resource.
     * @param {module:api/ArchivesApi~archivesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArchiveListResult}
     */
    archivesList(apiVersion, subscriptionId, resourceGroupName, registryName, packageType, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling archivesList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling archivesList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling archivesList");
      }
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling archivesList");
      }
      // verify the required parameter 'packageType' is set
      if (packageType === undefined || packageType === null) {
        throw new Error("Missing the required parameter 'packageType' when calling archivesList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'registryName': registryName,
        'packageType': packageType
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArchiveListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/packages/{packageType}/archives', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the archivesUpdate operation.
     * @callback module:api/ArchivesApi~archivesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Archive} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a archive for a container registry with the specified parameters.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription. The value must be an UUID.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} registryName The name of the container registry.
     * @param {String} packageType The type of the package resource.
     * @param {String} archiveName The name of the archive resource.
     * @param {module:model/ArchiveUpdateParameters} archiveUpdateParameters The parameters for updating a archive.
     * @param {module:api/ArchivesApi~archivesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Archive}
     */
    archivesUpdate(apiVersion, subscriptionId, resourceGroupName, registryName, packageType, archiveName, archiveUpdateParameters, callback) {
      let postBody = archiveUpdateParameters;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling archivesUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling archivesUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling archivesUpdate");
      }
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling archivesUpdate");
      }
      // verify the required parameter 'packageType' is set
      if (packageType === undefined || packageType === null) {
        throw new Error("Missing the required parameter 'packageType' when calling archivesUpdate");
      }
      // verify the required parameter 'archiveName' is set
      if (archiveName === undefined || archiveName === null) {
        throw new Error("Missing the required parameter 'archiveName' when calling archivesUpdate");
      }
      // verify the required parameter 'archiveUpdateParameters' is set
      if (archiveUpdateParameters === undefined || archiveUpdateParameters === null) {
        throw new Error("Missing the required parameter 'archiveUpdateParameters' when calling archivesUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'registryName': registryName,
        'packageType': packageType,
        'archiveName': archiveName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Archive;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/packages/{packageType}/archives/{archiveName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
