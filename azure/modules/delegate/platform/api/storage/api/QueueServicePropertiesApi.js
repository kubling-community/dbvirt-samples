/**
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2023-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../../BaseApiClient";
import CloudError from '../model/CloudError';
import ListQueueServices from '../model/ListQueueServices';
import QueueServiceProperties from '../model/QueueServiceProperties';

/**
* QueueServiceProperties service.
* @module api/QueueServicePropertiesApi
* @version 2023-01-01
*/
export default class QueueServicePropertiesApi {

    /**
    * Constructs a new QueueServicePropertiesApi. 
    * @alias module:api/QueueServicePropertiesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the queueServicesGetServiceProperties operation.
     * @callback module:api/QueueServicePropertiesApi~queueServicesGetServicePropertiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QueueServiceProperties} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the properties of a storage account’s Queue service, including properties for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {String} accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:model/String} queueServiceName The name of the Queue Service within the specified storage account. Queue Service Name must be 'default'
     * @param {module:api/QueueServicePropertiesApi~queueServicesGetServicePropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QueueServiceProperties}
     */
    queueServicesGetServiceProperties(resourceGroupName, accountName, apiVersion, subscriptionId, queueServiceName, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling queueServicesGetServiceProperties");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling queueServicesGetServiceProperties");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling queueServicesGetServiceProperties");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling queueServicesGetServiceProperties");
      }
      // verify the required parameter 'queueServiceName' is set
      if (queueServiceName === undefined || queueServiceName === null) {
        throw new Error("Missing the required parameter 'queueServiceName' when calling queueServicesGetServiceProperties");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'subscriptionId': subscriptionId,
        'queueServiceName': queueServiceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = QueueServiceProperties;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/queueServices/{queueServiceName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queueServicesList operation.
     * @callback module:api/QueueServicePropertiesApi~queueServicesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListQueueServices} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all queue services for the storage account
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {String} accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/QueueServicePropertiesApi~queueServicesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListQueueServices}
     */
    queueServicesList(resourceGroupName, accountName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling queueServicesList");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling queueServicesList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling queueServicesList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling queueServicesList");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListQueueServices;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/queueServices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queueServicesSetServiceProperties operation.
     * @callback module:api/QueueServicePropertiesApi~queueServicesSetServicePropertiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QueueServiceProperties} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the properties of a storage account’s Queue service, including properties for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules. 
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {String} accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:model/String} queueServiceName The name of the Queue Service within the specified storage account. Queue Service Name must be 'default'
     * @param {module:model/QueueServiceProperties} queueServiceProperties The properties of a storage account’s Queue service, only properties for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules can be specified.
     * @param {module:api/QueueServicePropertiesApi~queueServicesSetServicePropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QueueServiceProperties}
     */
    queueServicesSetServiceProperties(resourceGroupName, accountName, apiVersion, subscriptionId, queueServiceName, queueServiceProperties, callback) {
      let postBody = queueServiceProperties;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling queueServicesSetServiceProperties");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling queueServicesSetServiceProperties");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling queueServicesSetServiceProperties");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling queueServicesSetServiceProperties");
      }
      // verify the required parameter 'queueServiceName' is set
      if (queueServiceName === undefined || queueServiceName === null) {
        throw new Error("Missing the required parameter 'queueServiceName' when calling queueServicesSetServiceProperties");
      }
      // verify the required parameter 'queueServiceProperties' is set
      if (queueServiceProperties === undefined || queueServiceProperties === null) {
        throw new Error("Missing the required parameter 'queueServiceProperties' when calling queueServicesSetServiceProperties");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'subscriptionId': subscriptionId,
        'queueServiceName': queueServiceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = QueueServiceProperties;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/queueServices/{queueServiceName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
