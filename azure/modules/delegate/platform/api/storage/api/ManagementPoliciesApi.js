/**
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2023-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../../BaseApiClient";
import ManagementPolicy from '../model/ManagementPolicy';

/**
* ManagementPolicies service.
* @module api/ManagementPoliciesApi
* @version 2023-01-01
*/
export default class ManagementPoliciesApi {

    /**
    * Constructs a new ManagementPoliciesApi. 
    * @alias module:api/ManagementPoliciesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the managementPoliciesCreateOrUpdate operation.
     * @callback module:api/ManagementPoliciesApi~managementPoliciesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the managementpolicy to the specified storage account.
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {String} accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:model/String} managementPolicyName The name of the Storage Account Management Policy. It should always be 'default'
     * @param {module:model/ManagementPolicy} managementPolicy The ManagementPolicy set to a storage account.
     * @param {module:api/ManagementPoliciesApi~managementPoliciesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementPolicy}
     */
    managementPoliciesCreateOrUpdate(resourceGroupName, accountName, apiVersion, subscriptionId, managementPolicyName, managementPolicy, callback) {
      let postBody = managementPolicy;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managementPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling managementPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managementPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managementPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'managementPolicyName' is set
      if (managementPolicyName === undefined || managementPolicyName === null) {
        throw new Error("Missing the required parameter 'managementPolicyName' when calling managementPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'managementPolicy' is set
      if (managementPolicy === undefined || managementPolicy === null) {
        throw new Error("Missing the required parameter 'managementPolicy' when calling managementPoliciesCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'subscriptionId': subscriptionId,
        'managementPolicyName': managementPolicyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ManagementPolicy;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/managementPolicies/{managementPolicyName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managementPoliciesDelete operation.
     * @callback module:api/ManagementPoliciesApi~managementPoliciesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the managementpolicy associated with the specified storage account.
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {String} accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:model/String} managementPolicyName The name of the Storage Account Management Policy. It should always be 'default'
     * @param {module:api/ManagementPoliciesApi~managementPoliciesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    managementPoliciesDelete(resourceGroupName, accountName, apiVersion, subscriptionId, managementPolicyName, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managementPoliciesDelete");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling managementPoliciesDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managementPoliciesDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managementPoliciesDelete");
      }
      // verify the required parameter 'managementPolicyName' is set
      if (managementPolicyName === undefined || managementPolicyName === null) {
        throw new Error("Missing the required parameter 'managementPolicyName' when calling managementPoliciesDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'subscriptionId': subscriptionId,
        'managementPolicyName': managementPolicyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/managementPolicies/{managementPolicyName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managementPoliciesGet operation.
     * @callback module:api/ManagementPoliciesApi~managementPoliciesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the managementpolicy associated with the specified storage account.
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {String} accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:model/String} managementPolicyName The name of the Storage Account Management Policy. It should always be 'default'
     * @param {module:api/ManagementPoliciesApi~managementPoliciesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementPolicy}
     */
    managementPoliciesGet(resourceGroupName, accountName, apiVersion, subscriptionId, managementPolicyName, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managementPoliciesGet");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling managementPoliciesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managementPoliciesGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managementPoliciesGet");
      }
      // verify the required parameter 'managementPolicyName' is set
      if (managementPolicyName === undefined || managementPolicyName === null) {
        throw new Error("Missing the required parameter 'managementPolicyName' when calling managementPoliciesGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'subscriptionId': subscriptionId,
        'managementPolicyName': managementPolicyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagementPolicy;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/managementPolicies/{managementPolicyName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
