/**
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2023-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../../BaseApiClient";
import BlobInventoryPolicy from '../model/BlobInventoryPolicy';
import CloudError from '../model/CloudError';
import ErrorResponse from '../model/ErrorResponse';
import ListBlobInventoryPolicy from '../model/ListBlobInventoryPolicy';

/**
* BlobInventoryPolicies service.
* @module api/BlobInventoryPoliciesApi
* @version 2023-01-01
*/
export default class BlobInventoryPoliciesApi {

    /**
    * Constructs a new BlobInventoryPoliciesApi. 
    * @alias module:api/BlobInventoryPoliciesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the blobInventoryPoliciesCreateOrUpdate operation.
     * @callback module:api/BlobInventoryPoliciesApi~blobInventoryPoliciesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BlobInventoryPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the blob inventory policy to the specified storage account.
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {String} accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:model/String} blobInventoryPolicyName The name of the storage account blob inventory policy. It should always be 'default'
     * @param {module:model/BlobInventoryPolicy} blobInventoryPolicy The blob inventory policy set to a storage account.
     * @param {module:api/BlobInventoryPoliciesApi~blobInventoryPoliciesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BlobInventoryPolicy}
     */
    blobInventoryPoliciesCreateOrUpdate(resourceGroupName, accountName, apiVersion, subscriptionId, blobInventoryPolicyName, blobInventoryPolicy, callback) {
      let postBody = blobInventoryPolicy;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling blobInventoryPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling blobInventoryPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling blobInventoryPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling blobInventoryPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'blobInventoryPolicyName' is set
      if (blobInventoryPolicyName === undefined || blobInventoryPolicyName === null) {
        throw new Error("Missing the required parameter 'blobInventoryPolicyName' when calling blobInventoryPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'blobInventoryPolicy' is set
      if (blobInventoryPolicy === undefined || blobInventoryPolicy === null) {
        throw new Error("Missing the required parameter 'blobInventoryPolicy' when calling blobInventoryPoliciesCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'subscriptionId': subscriptionId,
        'blobInventoryPolicyName': blobInventoryPolicyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BlobInventoryPolicy;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/inventoryPolicies/{blobInventoryPolicyName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the blobInventoryPoliciesDelete operation.
     * @callback module:api/BlobInventoryPoliciesApi~blobInventoryPoliciesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the blob inventory policy associated with the specified storage account.
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {String} accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:model/String} blobInventoryPolicyName The name of the storage account blob inventory policy. It should always be 'default'
     * @param {module:api/BlobInventoryPoliciesApi~blobInventoryPoliciesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    blobInventoryPoliciesDelete(resourceGroupName, accountName, apiVersion, subscriptionId, blobInventoryPolicyName, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling blobInventoryPoliciesDelete");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling blobInventoryPoliciesDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling blobInventoryPoliciesDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling blobInventoryPoliciesDelete");
      }
      // verify the required parameter 'blobInventoryPolicyName' is set
      if (blobInventoryPolicyName === undefined || blobInventoryPolicyName === null) {
        throw new Error("Missing the required parameter 'blobInventoryPolicyName' when calling blobInventoryPoliciesDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'subscriptionId': subscriptionId,
        'blobInventoryPolicyName': blobInventoryPolicyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/inventoryPolicies/{blobInventoryPolicyName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the blobInventoryPoliciesGet operation.
     * @callback module:api/BlobInventoryPoliciesApi~blobInventoryPoliciesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BlobInventoryPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the blob inventory policy associated with the specified storage account.
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {String} accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:model/String} blobInventoryPolicyName The name of the storage account blob inventory policy. It should always be 'default'
     * @param {module:api/BlobInventoryPoliciesApi~blobInventoryPoliciesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BlobInventoryPolicy}
     */
    blobInventoryPoliciesGet(resourceGroupName, accountName, apiVersion, subscriptionId, blobInventoryPolicyName, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling blobInventoryPoliciesGet");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling blobInventoryPoliciesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling blobInventoryPoliciesGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling blobInventoryPoliciesGet");
      }
      // verify the required parameter 'blobInventoryPolicyName' is set
      if (blobInventoryPolicyName === undefined || blobInventoryPolicyName === null) {
        throw new Error("Missing the required parameter 'blobInventoryPolicyName' when calling blobInventoryPoliciesGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'subscriptionId': subscriptionId,
        'blobInventoryPolicyName': blobInventoryPolicyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BlobInventoryPolicy;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/inventoryPolicies/{blobInventoryPolicyName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the blobInventoryPoliciesList operation.
     * @callback module:api/BlobInventoryPoliciesApi~blobInventoryPoliciesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListBlobInventoryPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the blob inventory policy associated with the specified storage account.
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {String} accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/BlobInventoryPoliciesApi~blobInventoryPoliciesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListBlobInventoryPolicy}
     */
    blobInventoryPoliciesList(resourceGroupName, accountName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling blobInventoryPoliciesList");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling blobInventoryPoliciesList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling blobInventoryPoliciesList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling blobInventoryPoliciesList");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListBlobInventoryPolicy;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/inventoryPolicies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
