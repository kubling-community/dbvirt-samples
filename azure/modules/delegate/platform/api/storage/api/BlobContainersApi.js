/**
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2023-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../../BaseApiClient";
import BlobContainer from '../model/BlobContainer';
import CloudError from '../model/CloudError';
import ImmutabilityPolicy from '../model/ImmutabilityPolicy';
import LeaseContainerRequest from '../model/LeaseContainerRequest';
import LeaseContainerResponse from '../model/LeaseContainerResponse';
import LegalHold from '../model/LegalHold';
import ListContainerItems from '../model/ListContainerItems';

/**
* BlobContainers service.
* @module api/BlobContainersApi
* @version 2023-01-01
*/
export default class BlobContainersApi {

    /**
    * Constructs a new BlobContainersApi. 
    * @alias module:api/BlobContainersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the blobContainersClearLegalHold operation.
     * @callback module:api/BlobContainersApi~blobContainersClearLegalHoldCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LegalHold} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clears legal hold tags. Clearing the same or non-existent tag results in an idempotent operation. ClearLegalHold clears out only the specified tags in the request.
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {String} accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
     * @param {String} containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:model/LegalHold} legalHold The LegalHold property that will be clear from a blob container.
     * @param {module:api/BlobContainersApi~blobContainersClearLegalHoldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LegalHold}
     */
    blobContainersClearLegalHold(resourceGroupName, accountName, containerName, apiVersion, subscriptionId, legalHold, callback) {
      let postBody = legalHold;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling blobContainersClearLegalHold");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling blobContainersClearLegalHold");
      }
      // verify the required parameter 'containerName' is set
      if (containerName === undefined || containerName === null) {
        throw new Error("Missing the required parameter 'containerName' when calling blobContainersClearLegalHold");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling blobContainersClearLegalHold");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling blobContainersClearLegalHold");
      }
      // verify the required parameter 'legalHold' is set
      if (legalHold === undefined || legalHold === null) {
        throw new Error("Missing the required parameter 'legalHold' when calling blobContainersClearLegalHold");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'containerName': containerName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LegalHold;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/clearLegalHold', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the blobContainersCreate operation.
     * @callback module:api/BlobContainersApi~blobContainersCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BlobContainer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new container under the specified account as described by request body. The container resource includes metadata and properties for that container. It does not include a list of the blobs contained by the container. 
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {String} accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
     * @param {String} containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:model/BlobContainer} blobContainer Properties of the blob container to create.
     * @param {module:api/BlobContainersApi~blobContainersCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BlobContainer}
     */
    blobContainersCreate(resourceGroupName, accountName, containerName, apiVersion, subscriptionId, blobContainer, callback) {
      let postBody = blobContainer;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling blobContainersCreate");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling blobContainersCreate");
      }
      // verify the required parameter 'containerName' is set
      if (containerName === undefined || containerName === null) {
        throw new Error("Missing the required parameter 'containerName' when calling blobContainersCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling blobContainersCreate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling blobContainersCreate");
      }
      // verify the required parameter 'blobContainer' is set
      if (blobContainer === undefined || blobContainer === null) {
        throw new Error("Missing the required parameter 'blobContainer' when calling blobContainersCreate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'containerName': containerName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BlobContainer;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the blobContainersCreateOrUpdateImmutabilityPolicy operation.
     * @callback module:api/BlobContainersApi~blobContainersCreateOrUpdateImmutabilityPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImmutabilityPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates an unlocked immutability policy. ETag in If-Match is honored if given but not required for this operation.
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {String} accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
     * @param {String} containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.
     * @param {module:model/String} immutabilityPolicyName The name of the blob container immutabilityPolicy within the specified storage account. ImmutabilityPolicy Name must be 'default'
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {Object} opts Optional parameters
     * @param {String} [ifMatch] The entity state (ETag) version of the immutability policy to update. A value of \"*\" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied.
     * @param {module:model/ImmutabilityPolicy} [immutabilityPolicy] The ImmutabilityPolicy Properties that will be created or updated to a blob container.
     * @param {module:api/BlobContainersApi~blobContainersCreateOrUpdateImmutabilityPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImmutabilityPolicy}
     */
    blobContainersCreateOrUpdateImmutabilityPolicy(resourceGroupName, accountName, containerName, immutabilityPolicyName, apiVersion, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = opts['immutabilityPolicy'];
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling blobContainersCreateOrUpdateImmutabilityPolicy");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling blobContainersCreateOrUpdateImmutabilityPolicy");
      }
      // verify the required parameter 'containerName' is set
      if (containerName === undefined || containerName === null) {
        throw new Error("Missing the required parameter 'containerName' when calling blobContainersCreateOrUpdateImmutabilityPolicy");
      }
      // verify the required parameter 'immutabilityPolicyName' is set
      if (immutabilityPolicyName === undefined || immutabilityPolicyName === null) {
        throw new Error("Missing the required parameter 'immutabilityPolicyName' when calling blobContainersCreateOrUpdateImmutabilityPolicy");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling blobContainersCreateOrUpdateImmutabilityPolicy");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling blobContainersCreateOrUpdateImmutabilityPolicy");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'containerName': containerName,
        'immutabilityPolicyName': immutabilityPolicyName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ImmutabilityPolicy;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/{immutabilityPolicyName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the blobContainersDelete operation.
     * @callback module:api/BlobContainersApi~blobContainersDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes specified container under its account.
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {String} accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
     * @param {String} containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/BlobContainersApi~blobContainersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    blobContainersDelete(resourceGroupName, accountName, containerName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling blobContainersDelete");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling blobContainersDelete");
      }
      // verify the required parameter 'containerName' is set
      if (containerName === undefined || containerName === null) {
        throw new Error("Missing the required parameter 'containerName' when calling blobContainersDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling blobContainersDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling blobContainersDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'containerName': containerName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the blobContainersDeleteImmutabilityPolicy operation.
     * @callback module:api/BlobContainersApi~blobContainersDeleteImmutabilityPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImmutabilityPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Aborts an unlocked immutability policy. The response of delete has immutabilityPeriodSinceCreationInDays set to 0. ETag in If-Match is required for this operation. Deleting a locked immutability policy is not allowed, the only way is to delete the container after deleting all expired blobs inside the policy locked container.
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {String} accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
     * @param {String} containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.
     * @param {module:model/String} immutabilityPolicyName The name of the blob container immutabilityPolicy within the specified storage account. ImmutabilityPolicy Name must be 'default'
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} ifMatch The entity state (ETag) version of the immutability policy to update. A value of \"*\" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied.
     * @param {module:api/BlobContainersApi~blobContainersDeleteImmutabilityPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImmutabilityPolicy}
     */
    blobContainersDeleteImmutabilityPolicy(resourceGroupName, accountName, containerName, immutabilityPolicyName, apiVersion, subscriptionId, ifMatch, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling blobContainersDeleteImmutabilityPolicy");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling blobContainersDeleteImmutabilityPolicy");
      }
      // verify the required parameter 'containerName' is set
      if (containerName === undefined || containerName === null) {
        throw new Error("Missing the required parameter 'containerName' when calling blobContainersDeleteImmutabilityPolicy");
      }
      // verify the required parameter 'immutabilityPolicyName' is set
      if (immutabilityPolicyName === undefined || immutabilityPolicyName === null) {
        throw new Error("Missing the required parameter 'immutabilityPolicyName' when calling blobContainersDeleteImmutabilityPolicy");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling blobContainersDeleteImmutabilityPolicy");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling blobContainersDeleteImmutabilityPolicy");
      }
      // verify the required parameter 'ifMatch' is set
      if (ifMatch === undefined || ifMatch === null) {
        throw new Error("Missing the required parameter 'ifMatch' when calling blobContainersDeleteImmutabilityPolicy");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'containerName': containerName,
        'immutabilityPolicyName': immutabilityPolicyName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'If-Match': ifMatch
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ImmutabilityPolicy;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/{immutabilityPolicyName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the blobContainersExtendImmutabilityPolicy operation.
     * @callback module:api/BlobContainersApi~blobContainersExtendImmutabilityPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImmutabilityPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Extends the immutabilityPeriodSinceCreationInDays of a locked immutabilityPolicy. The only action allowed on a Locked policy will be this action. ETag in If-Match is required for this operation.
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {String} accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
     * @param {String} containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} ifMatch The entity state (ETag) version of the immutability policy to update. A value of \"*\" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied.
     * @param {Object} opts Optional parameters
     * @param {module:model/ImmutabilityPolicy} [immutabilityPolicy] The ImmutabilityPolicy Properties that will be extended for a blob container.
     * @param {module:api/BlobContainersApi~blobContainersExtendImmutabilityPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImmutabilityPolicy}
     */
    blobContainersExtendImmutabilityPolicy(resourceGroupName, accountName, containerName, apiVersion, subscriptionId, ifMatch, opts, callback) {
      opts = opts || {};
      let postBody = opts['immutabilityPolicy'];
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling blobContainersExtendImmutabilityPolicy");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling blobContainersExtendImmutabilityPolicy");
      }
      // verify the required parameter 'containerName' is set
      if (containerName === undefined || containerName === null) {
        throw new Error("Missing the required parameter 'containerName' when calling blobContainersExtendImmutabilityPolicy");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling blobContainersExtendImmutabilityPolicy");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling blobContainersExtendImmutabilityPolicy");
      }
      // verify the required parameter 'ifMatch' is set
      if (ifMatch === undefined || ifMatch === null) {
        throw new Error("Missing the required parameter 'ifMatch' when calling blobContainersExtendImmutabilityPolicy");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'containerName': containerName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'If-Match': ifMatch
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ImmutabilityPolicy;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/default/extend', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the blobContainersGet operation.
     * @callback module:api/BlobContainersApi~blobContainersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BlobContainer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets properties of a specified container. 
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {String} accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
     * @param {String} containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/BlobContainersApi~blobContainersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BlobContainer}
     */
    blobContainersGet(resourceGroupName, accountName, containerName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling blobContainersGet");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling blobContainersGet");
      }
      // verify the required parameter 'containerName' is set
      if (containerName === undefined || containerName === null) {
        throw new Error("Missing the required parameter 'containerName' when calling blobContainersGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling blobContainersGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling blobContainersGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'containerName': containerName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BlobContainer;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the blobContainersGetImmutabilityPolicy operation.
     * @callback module:api/BlobContainersApi~blobContainersGetImmutabilityPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImmutabilityPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the existing immutability policy along with the corresponding ETag in response headers and body.
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {String} accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
     * @param {String} containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.
     * @param {module:model/String} immutabilityPolicyName The name of the blob container immutabilityPolicy within the specified storage account. ImmutabilityPolicy Name must be 'default'
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {Object} opts Optional parameters
     * @param {String} [ifMatch] The entity state (ETag) version of the immutability policy to update. A value of \"*\" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied.
     * @param {module:api/BlobContainersApi~blobContainersGetImmutabilityPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImmutabilityPolicy}
     */
    blobContainersGetImmutabilityPolicy(resourceGroupName, accountName, containerName, immutabilityPolicyName, apiVersion, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling blobContainersGetImmutabilityPolicy");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling blobContainersGetImmutabilityPolicy");
      }
      // verify the required parameter 'containerName' is set
      if (containerName === undefined || containerName === null) {
        throw new Error("Missing the required parameter 'containerName' when calling blobContainersGetImmutabilityPolicy");
      }
      // verify the required parameter 'immutabilityPolicyName' is set
      if (immutabilityPolicyName === undefined || immutabilityPolicyName === null) {
        throw new Error("Missing the required parameter 'immutabilityPolicyName' when calling blobContainersGetImmutabilityPolicy");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling blobContainersGetImmutabilityPolicy");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling blobContainersGetImmutabilityPolicy");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'containerName': containerName,
        'immutabilityPolicyName': immutabilityPolicyName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ImmutabilityPolicy;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/{immutabilityPolicyName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the blobContainersLease operation.
     * @callback module:api/BlobContainersApi~blobContainersLeaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LeaseContainerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The Lease Container operation establishes and manages a lock on a container for delete operations. The lock duration can be 15 to 60 seconds, or can be infinite.
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {String} accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
     * @param {String} containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {Object} opts Optional parameters
     * @param {module:model/LeaseContainerRequest} [leaseContainerRequest] Lease Container request body.
     * @param {module:api/BlobContainersApi~blobContainersLeaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LeaseContainerResponse}
     */
    blobContainersLease(resourceGroupName, accountName, containerName, apiVersion, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = opts['leaseContainerRequest'];
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling blobContainersLease");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling blobContainersLease");
      }
      // verify the required parameter 'containerName' is set
      if (containerName === undefined || containerName === null) {
        throw new Error("Missing the required parameter 'containerName' when calling blobContainersLease");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling blobContainersLease");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling blobContainersLease");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'containerName': containerName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LeaseContainerResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/lease', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the blobContainersList operation.
     * @callback module:api/BlobContainersApi~blobContainersListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListContainerItems} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all containers and does not support a prefix like data plane. Also SRP today does not return continuation token.
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {String} accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {Object} opts Optional parameters
     * @param {String} [maxpagesize] Optional. Specified maximum number of containers that can be included in the list.
     * @param {String} [filter] Optional. When specified, only container names starting with the filter will be listed.
     * @param {module:model/String} [include] Optional, used to include the properties for soft deleted blob containers.
     * @param {module:api/BlobContainersApi~blobContainersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListContainerItems}
     */
    blobContainersList(resourceGroupName, accountName, apiVersion, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling blobContainersList");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling blobContainersList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling blobContainersList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling blobContainersList");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion,
        '$maxpagesize': opts['maxpagesize'],
        '$filter': opts['filter'],
        '$include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListContainerItems;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the blobContainersLockImmutabilityPolicy operation.
     * @callback module:api/BlobContainersApi~blobContainersLockImmutabilityPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImmutabilityPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the ImmutabilityPolicy to Locked state. The only action allowed on a Locked policy is ExtendImmutabilityPolicy action. ETag in If-Match is required for this operation.
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {String} accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
     * @param {String} containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} ifMatch The entity state (ETag) version of the immutability policy to update. A value of \"*\" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied.
     * @param {module:api/BlobContainersApi~blobContainersLockImmutabilityPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImmutabilityPolicy}
     */
    blobContainersLockImmutabilityPolicy(resourceGroupName, accountName, containerName, apiVersion, subscriptionId, ifMatch, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling blobContainersLockImmutabilityPolicy");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling blobContainersLockImmutabilityPolicy");
      }
      // verify the required parameter 'containerName' is set
      if (containerName === undefined || containerName === null) {
        throw new Error("Missing the required parameter 'containerName' when calling blobContainersLockImmutabilityPolicy");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling blobContainersLockImmutabilityPolicy");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling blobContainersLockImmutabilityPolicy");
      }
      // verify the required parameter 'ifMatch' is set
      if (ifMatch === undefined || ifMatch === null) {
        throw new Error("Missing the required parameter 'ifMatch' when calling blobContainersLockImmutabilityPolicy");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'containerName': containerName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'If-Match': ifMatch
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ImmutabilityPolicy;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/default/lock', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the blobContainersObjectLevelWorm operation.
     * @callback module:api/BlobContainersApi~blobContainersObjectLevelWormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation migrates a blob container from container level WORM to object level immutability enabled container. Prerequisites require a container level immutability policy either in locked or unlocked state, Account level versioning must be enabled and there should be no Legal hold on the container.
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {String} accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
     * @param {String} containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/BlobContainersApi~blobContainersObjectLevelWormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    blobContainersObjectLevelWorm(resourceGroupName, accountName, containerName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling blobContainersObjectLevelWorm");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling blobContainersObjectLevelWorm");
      }
      // verify the required parameter 'containerName' is set
      if (containerName === undefined || containerName === null) {
        throw new Error("Missing the required parameter 'containerName' when calling blobContainersObjectLevelWorm");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling blobContainersObjectLevelWorm");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling blobContainersObjectLevelWorm");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'containerName': containerName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/migrate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the blobContainersSetLegalHold operation.
     * @callback module:api/BlobContainersApi~blobContainersSetLegalHoldCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LegalHold} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets legal hold tags. Setting the same tag results in an idempotent operation. SetLegalHold follows an append pattern and does not clear out the existing tags that are not specified in the request.
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {String} accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
     * @param {String} containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:model/LegalHold} legalHold The LegalHold property that will be set to a blob container.
     * @param {module:api/BlobContainersApi~blobContainersSetLegalHoldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LegalHold}
     */
    blobContainersSetLegalHold(resourceGroupName, accountName, containerName, apiVersion, subscriptionId, legalHold, callback) {
      let postBody = legalHold;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling blobContainersSetLegalHold");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling blobContainersSetLegalHold");
      }
      // verify the required parameter 'containerName' is set
      if (containerName === undefined || containerName === null) {
        throw new Error("Missing the required parameter 'containerName' when calling blobContainersSetLegalHold");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling blobContainersSetLegalHold");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling blobContainersSetLegalHold");
      }
      // verify the required parameter 'legalHold' is set
      if (legalHold === undefined || legalHold === null) {
        throw new Error("Missing the required parameter 'legalHold' when calling blobContainersSetLegalHold");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'containerName': containerName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LegalHold;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/setLegalHold', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the blobContainersUpdate operation.
     * @callback module:api/BlobContainersApi~blobContainersUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BlobContainer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates container properties as specified in request body. Properties not mentioned in the request will be unchanged. Update fails if the specified container doesn't already exist. 
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {String} accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
     * @param {String} containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:model/BlobContainer} blobContainer Properties to update for the blob container.
     * @param {module:api/BlobContainersApi~blobContainersUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BlobContainer}
     */
    blobContainersUpdate(resourceGroupName, accountName, containerName, apiVersion, subscriptionId, blobContainer, callback) {
      let postBody = blobContainer;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling blobContainersUpdate");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling blobContainersUpdate");
      }
      // verify the required parameter 'containerName' is set
      if (containerName === undefined || containerName === null) {
        throw new Error("Missing the required parameter 'containerName' when calling blobContainersUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling blobContainersUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling blobContainersUpdate");
      }
      // verify the required parameter 'blobContainer' is set
      if (blobContainer === undefined || blobContainer === null) {
        throw new Error("Missing the required parameter 'blobContainer' when calling blobContainersUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'containerName': containerName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BlobContainer;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
