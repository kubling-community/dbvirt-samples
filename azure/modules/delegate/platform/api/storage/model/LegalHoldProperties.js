/**
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2023-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../../BaseApiClient";
import ProtectedAppendWritesHistory from './ProtectedAppendWritesHistory';
import TagProperty from './TagProperty';

/**
 * The LegalHoldProperties model module.
 * @module model/LegalHoldProperties
 * @version 2023-01-01
 */
class LegalHoldProperties {
    /**
     * Constructs a new <code>LegalHoldProperties</code>.
     * The LegalHold property of a blob container.
     * @alias module:model/LegalHoldProperties
     */
    constructor() { 
        
        LegalHoldProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LegalHoldProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LegalHoldProperties} obj Optional instance to populate.
     * @return {module:model/LegalHoldProperties} The populated <code>LegalHoldProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LegalHoldProperties();

            if (data.hasOwnProperty('hasLegalHold')) {
                obj['hasLegalHold'] = ApiClient.convertToType(data['hasLegalHold'], 'Boolean');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [TagProperty]);
            }
            if (data.hasOwnProperty('protectedAppendWritesHistory')) {
                obj['protectedAppendWritesHistory'] = ProtectedAppendWritesHistory.constructFromObject(data['protectedAppendWritesHistory']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LegalHoldProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LegalHoldProperties</code>.
     */
    static validateJSON(data) {
        if (data['tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tags'])) {
                throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
            }
            // validate the optional field `tags` (array)
            for (const item of data['tags']) {
                TagProperty.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers with hasLegalHold=true for a given account.
 * @member {Boolean} hasLegalHold
 */
LegalHoldProperties.prototype['hasLegalHold'] = undefined;

/**
 * The list of LegalHold tags of a blob container.
 * @member {Array.<module:model/TagProperty>} tags
 */
LegalHoldProperties.prototype['tags'] = undefined;

/**
 * @member {module:model/ProtectedAppendWritesHistory} protectedAppendWritesHistory
 */
LegalHoldProperties.prototype['protectedAppendWritesHistory'] = undefined;






export default LegalHoldProperties;

