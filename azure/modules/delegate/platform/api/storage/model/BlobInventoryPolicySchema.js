/**
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2023-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../../BaseApiClient";
import BlobInventoryPolicyRule from './BlobInventoryPolicyRule';

/**
 * The BlobInventoryPolicySchema model module.
 * @module model/BlobInventoryPolicySchema
 * @version 2023-01-01
 */
class BlobInventoryPolicySchema {
    /**
     * Constructs a new <code>BlobInventoryPolicySchema</code>.
     * The storage account blob inventory policy rules.
     * @alias module:model/BlobInventoryPolicySchema
     * @param enabled {Boolean} Policy is enabled if set to true.
     * @param type {module:model/BlobInventoryPolicySchema.TypeEnum} The valid value is Inventory
     * @param rules {Array.<module:model/BlobInventoryPolicyRule>} The storage account blob inventory policy rules. The rule is applied when it is enabled.
     */
    constructor(enabled, type, rules) { 
        
        BlobInventoryPolicySchema.initialize(this, enabled, type, rules);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, enabled, type, rules) { 
        obj['enabled'] = enabled;
        obj['type'] = type;
        obj['rules'] = rules;
    }

    /**
     * Constructs a <code>BlobInventoryPolicySchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BlobInventoryPolicySchema} obj Optional instance to populate.
     * @return {module:model/BlobInventoryPolicySchema} The populated <code>BlobInventoryPolicySchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BlobInventoryPolicySchema();

            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('destination')) {
                obj['destination'] = ApiClient.convertToType(data['destination'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('rules')) {
                obj['rules'] = ApiClient.convertToType(data['rules'], [BlobInventoryPolicyRule]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BlobInventoryPolicySchema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BlobInventoryPolicySchema</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BlobInventoryPolicySchema.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['destination'] && !(typeof data['destination'] === 'string' || data['destination'] instanceof String)) {
            throw new Error("Expected the field `destination` to be a primitive type in the JSON string but got " + data['destination']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        if (data['rules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['rules'])) {
                throw new Error("Expected the field `rules` to be an array in the JSON data but got " + data['rules']);
            }
            // validate the optional field `rules` (array)
            for (const item of data['rules']) {
                BlobInventoryPolicyRule.validateJSON(item);
            };
        }

        return true;
    }


}

BlobInventoryPolicySchema.RequiredProperties = ["enabled", "type", "rules"];

/**
 * Policy is enabled if set to true.
 * @member {Boolean} enabled
 */
BlobInventoryPolicySchema.prototype['enabled'] = undefined;

/**
 * Deprecated Property from API version 2021-04-01 onwards, the required destination container name must be specified at the rule level 'policy.rule.destination'
 * @member {String} destination
 */
BlobInventoryPolicySchema.prototype['destination'] = undefined;

/**
 * The valid value is Inventory
 * @member {module:model/BlobInventoryPolicySchema.TypeEnum} type
 */
BlobInventoryPolicySchema.prototype['type'] = undefined;

/**
 * The storage account blob inventory policy rules. The rule is applied when it is enabled.
 * @member {Array.<module:model/BlobInventoryPolicyRule>} rules
 */
BlobInventoryPolicySchema.prototype['rules'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
BlobInventoryPolicySchema['TypeEnum'] = {

    /**
     * value: "Inventory"
     * @const
     */
    "Inventory": "Inventory"
};



export default BlobInventoryPolicySchema;

