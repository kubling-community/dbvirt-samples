/**
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2023-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../../BaseApiClient";

/**
 * The ActiveDirectoryProperties model module.
 * @module model/ActiveDirectoryProperties
 * @version 2023-01-01
 */
class ActiveDirectoryProperties {
    /**
     * Constructs a new <code>ActiveDirectoryProperties</code>.
     * Settings properties for Active Directory (AD).
     * @alias module:model/ActiveDirectoryProperties
     * @param domainName {String} Specifies the primary domain that the AD DNS server is authoritative for.
     * @param domainGuid {String} Specifies the domain GUID.
     */
    constructor(domainName, domainGuid) { 
        
        ActiveDirectoryProperties.initialize(this, domainName, domainGuid);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, domainName, domainGuid) { 
        obj['domainName'] = domainName;
        obj['domainGuid'] = domainGuid;
    }

    /**
     * Constructs a <code>ActiveDirectoryProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ActiveDirectoryProperties} obj Optional instance to populate.
     * @return {module:model/ActiveDirectoryProperties} The populated <code>ActiveDirectoryProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ActiveDirectoryProperties();

            if (data.hasOwnProperty('domainName')) {
                obj['domainName'] = ApiClient.convertToType(data['domainName'], 'String');
            }
            if (data.hasOwnProperty('netBiosDomainName')) {
                obj['netBiosDomainName'] = ApiClient.convertToType(data['netBiosDomainName'], 'String');
            }
            if (data.hasOwnProperty('forestName')) {
                obj['forestName'] = ApiClient.convertToType(data['forestName'], 'String');
            }
            if (data.hasOwnProperty('domainGuid')) {
                obj['domainGuid'] = ApiClient.convertToType(data['domainGuid'], 'String');
            }
            if (data.hasOwnProperty('domainSid')) {
                obj['domainSid'] = ApiClient.convertToType(data['domainSid'], 'String');
            }
            if (data.hasOwnProperty('azureStorageSid')) {
                obj['azureStorageSid'] = ApiClient.convertToType(data['azureStorageSid'], 'String');
            }
            if (data.hasOwnProperty('samAccountName')) {
                obj['samAccountName'] = ApiClient.convertToType(data['samAccountName'], 'String');
            }
            if (data.hasOwnProperty('accountType')) {
                obj['accountType'] = ApiClient.convertToType(data['accountType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ActiveDirectoryProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ActiveDirectoryProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ActiveDirectoryProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['domainName'] && !(typeof data['domainName'] === 'string' || data['domainName'] instanceof String)) {
            throw new Error("Expected the field `domainName` to be a primitive type in the JSON string but got " + data['domainName']);
        }
        // ensure the json data is a string
        if (data['netBiosDomainName'] && !(typeof data['netBiosDomainName'] === 'string' || data['netBiosDomainName'] instanceof String)) {
            throw new Error("Expected the field `netBiosDomainName` to be a primitive type in the JSON string but got " + data['netBiosDomainName']);
        }
        // ensure the json data is a string
        if (data['forestName'] && !(typeof data['forestName'] === 'string' || data['forestName'] instanceof String)) {
            throw new Error("Expected the field `forestName` to be a primitive type in the JSON string but got " + data['forestName']);
        }
        // ensure the json data is a string
        if (data['domainGuid'] && !(typeof data['domainGuid'] === 'string' || data['domainGuid'] instanceof String)) {
            throw new Error("Expected the field `domainGuid` to be a primitive type in the JSON string but got " + data['domainGuid']);
        }
        // ensure the json data is a string
        if (data['domainSid'] && !(typeof data['domainSid'] === 'string' || data['domainSid'] instanceof String)) {
            throw new Error("Expected the field `domainSid` to be a primitive type in the JSON string but got " + data['domainSid']);
        }
        // ensure the json data is a string
        if (data['azureStorageSid'] && !(typeof data['azureStorageSid'] === 'string' || data['azureStorageSid'] instanceof String)) {
            throw new Error("Expected the field `azureStorageSid` to be a primitive type in the JSON string but got " + data['azureStorageSid']);
        }
        // ensure the json data is a string
        if (data['samAccountName'] && !(typeof data['samAccountName'] === 'string' || data['samAccountName'] instanceof String)) {
            throw new Error("Expected the field `samAccountName` to be a primitive type in the JSON string but got " + data['samAccountName']);
        }
        // ensure the json data is a string
        if (data['accountType'] && !(typeof data['accountType'] === 'string' || data['accountType'] instanceof String)) {
            throw new Error("Expected the field `accountType` to be a primitive type in the JSON string but got " + data['accountType']);
        }

        return true;
    }


}

ActiveDirectoryProperties.RequiredProperties = ["domainName", "domainGuid"];

/**
 * Specifies the primary domain that the AD DNS server is authoritative for.
 * @member {String} domainName
 */
ActiveDirectoryProperties.prototype['domainName'] = undefined;

/**
 * Specifies the NetBIOS domain name.
 * @member {String} netBiosDomainName
 */
ActiveDirectoryProperties.prototype['netBiosDomainName'] = undefined;

/**
 * Specifies the Active Directory forest to get.
 * @member {String} forestName
 */
ActiveDirectoryProperties.prototype['forestName'] = undefined;

/**
 * Specifies the domain GUID.
 * @member {String} domainGuid
 */
ActiveDirectoryProperties.prototype['domainGuid'] = undefined;

/**
 * Specifies the security identifier (SID).
 * @member {String} domainSid
 */
ActiveDirectoryProperties.prototype['domainSid'] = undefined;

/**
 * Specifies the security identifier (SID) for Azure Storage.
 * @member {String} azureStorageSid
 */
ActiveDirectoryProperties.prototype['azureStorageSid'] = undefined;

/**
 * Specifies the Active Directory SAMAccountName for Azure Storage.
 * @member {String} samAccountName
 */
ActiveDirectoryProperties.prototype['samAccountName'] = undefined;

/**
 * Specifies the Active Directory account type for Azure Storage.
 * @member {module:model/ActiveDirectoryProperties.AccountTypeEnum} accountType
 */
ActiveDirectoryProperties.prototype['accountType'] = undefined;





/**
 * Allowed values for the <code>accountType</code> property.
 * @enum {String}
 * @readonly
 */
ActiveDirectoryProperties['AccountTypeEnum'] = {

    /**
     * value: "User"
     * @const
     */
    "User": "User",

    /**
     * value: "Computer"
     * @const
     */
    "Computer": "Computer"
};



export default ActiveDirectoryProperties;

