/**
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2023-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../../BaseApiClient";
import ImmutabilityPolicyProperties from './ImmutabilityPolicyProperties';
import ImmutableStorageWithVersioning from './ImmutableStorageWithVersioning';
import LegalHoldProperties from './LegalHoldProperties';

/**
 * The ContainerProperties model module.
 * @module model/ContainerProperties
 * @version 2023-01-01
 */
class ContainerProperties {
    /**
     * Constructs a new <code>ContainerProperties</code>.
     * The properties of a container.
     * @alias module:model/ContainerProperties
     */
    constructor() { 
        
        ContainerProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ContainerProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContainerProperties} obj Optional instance to populate.
     * @return {module:model/ContainerProperties} The populated <code>ContainerProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContainerProperties();

            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
            if (data.hasOwnProperty('deleted')) {
                obj['deleted'] = ApiClient.convertToType(data['deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('deletedTime')) {
                obj['deletedTime'] = ApiClient.convertToType(data['deletedTime'], 'Date');
            }
            if (data.hasOwnProperty('remainingRetentionDays')) {
                obj['remainingRetentionDays'] = ApiClient.convertToType(data['remainingRetentionDays'], 'Number');
            }
            if (data.hasOwnProperty('defaultEncryptionScope')) {
                obj['defaultEncryptionScope'] = ApiClient.convertToType(data['defaultEncryptionScope'], 'String');
            }
            if (data.hasOwnProperty('denyEncryptionScopeOverride')) {
                obj['denyEncryptionScopeOverride'] = ApiClient.convertToType(data['denyEncryptionScopeOverride'], 'Boolean');
            }
            if (data.hasOwnProperty('publicAccess')) {
                obj['publicAccess'] = ApiClient.convertToType(data['publicAccess'], 'String');
            }
            if (data.hasOwnProperty('lastModifiedTime')) {
                obj['lastModifiedTime'] = ApiClient.convertToType(data['lastModifiedTime'], 'Date');
            }
            if (data.hasOwnProperty('leaseStatus')) {
                obj['leaseStatus'] = ApiClient.convertToType(data['leaseStatus'], 'String');
            }
            if (data.hasOwnProperty('leaseState')) {
                obj['leaseState'] = ApiClient.convertToType(data['leaseState'], 'String');
            }
            if (data.hasOwnProperty('leaseDuration')) {
                obj['leaseDuration'] = ApiClient.convertToType(data['leaseDuration'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': 'String'});
            }
            if (data.hasOwnProperty('immutabilityPolicy')) {
                obj['immutabilityPolicy'] = ImmutabilityPolicyProperties.constructFromObject(data['immutabilityPolicy']);
            }
            if (data.hasOwnProperty('legalHold')) {
                obj['legalHold'] = LegalHoldProperties.constructFromObject(data['legalHold']);
            }
            if (data.hasOwnProperty('hasLegalHold')) {
                obj['hasLegalHold'] = ApiClient.convertToType(data['hasLegalHold'], 'Boolean');
            }
            if (data.hasOwnProperty('hasImmutabilityPolicy')) {
                obj['hasImmutabilityPolicy'] = ApiClient.convertToType(data['hasImmutabilityPolicy'], 'Boolean');
            }
            if (data.hasOwnProperty('immutableStorageWithVersioning')) {
                obj['immutableStorageWithVersioning'] = ImmutableStorageWithVersioning.constructFromObject(data['immutableStorageWithVersioning']);
            }
            if (data.hasOwnProperty('enableNfsV3RootSquash')) {
                obj['enableNfsV3RootSquash'] = ApiClient.convertToType(data['enableNfsV3RootSquash'], 'Boolean');
            }
            if (data.hasOwnProperty('enableNfsV3AllSquash')) {
                obj['enableNfsV3AllSquash'] = ApiClient.convertToType(data['enableNfsV3AllSquash'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContainerProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContainerProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }
        // ensure the json data is a string
        if (data['defaultEncryptionScope'] && !(typeof data['defaultEncryptionScope'] === 'string' || data['defaultEncryptionScope'] instanceof String)) {
            throw new Error("Expected the field `defaultEncryptionScope` to be a primitive type in the JSON string but got " + data['defaultEncryptionScope']);
        }
        // ensure the json data is a string
        if (data['publicAccess'] && !(typeof data['publicAccess'] === 'string' || data['publicAccess'] instanceof String)) {
            throw new Error("Expected the field `publicAccess` to be a primitive type in the JSON string but got " + data['publicAccess']);
        }
        // ensure the json data is a string
        if (data['leaseStatus'] && !(typeof data['leaseStatus'] === 'string' || data['leaseStatus'] instanceof String)) {
            throw new Error("Expected the field `leaseStatus` to be a primitive type in the JSON string but got " + data['leaseStatus']);
        }
        // ensure the json data is a string
        if (data['leaseState'] && !(typeof data['leaseState'] === 'string' || data['leaseState'] instanceof String)) {
            throw new Error("Expected the field `leaseState` to be a primitive type in the JSON string but got " + data['leaseState']);
        }
        // ensure the json data is a string
        if (data['leaseDuration'] && !(typeof data['leaseDuration'] === 'string' || data['leaseDuration'] instanceof String)) {
            throw new Error("Expected the field `leaseDuration` to be a primitive type in the JSON string but got " + data['leaseDuration']);
        }
        // validate the optional field `immutabilityPolicy`
        if (data['immutabilityPolicy']) { // data not null
          ImmutabilityPolicyProperties.validateJSON(data['immutabilityPolicy']);
        }
        // validate the optional field `legalHold`
        if (data['legalHold']) { // data not null
          LegalHoldProperties.validateJSON(data['legalHold']);
        }
        // validate the optional field `immutableStorageWithVersioning`
        if (data['immutableStorageWithVersioning']) { // data not null
          ImmutableStorageWithVersioning.validateJSON(data['immutableStorageWithVersioning']);
        }

        return true;
    }


}



/**
 * The version of the deleted blob container.
 * @member {String} version
 */
ContainerProperties.prototype['version'] = undefined;

/**
 * Indicates whether the blob container was deleted.
 * @member {Boolean} deleted
 */
ContainerProperties.prototype['deleted'] = undefined;

/**
 * Blob container deletion time.
 * @member {Date} deletedTime
 */
ContainerProperties.prototype['deletedTime'] = undefined;

/**
 * Remaining retention days for soft deleted blob container.
 * @member {Number} remainingRetentionDays
 */
ContainerProperties.prototype['remainingRetentionDays'] = undefined;

/**
 * Default the container to use specified encryption scope for all writes.
 * @member {String} defaultEncryptionScope
 */
ContainerProperties.prototype['defaultEncryptionScope'] = undefined;

/**
 * Block override of encryption scope from the container default.
 * @member {Boolean} denyEncryptionScopeOverride
 */
ContainerProperties.prototype['denyEncryptionScopeOverride'] = undefined;

/**
 * Specifies whether data in the container may be accessed publicly and the level of access.
 * @member {module:model/ContainerProperties.PublicAccessEnum} publicAccess
 */
ContainerProperties.prototype['publicAccess'] = undefined;

/**
 * Returns the date and time the container was last modified.
 * @member {Date} lastModifiedTime
 */
ContainerProperties.prototype['lastModifiedTime'] = undefined;

/**
 * The lease status of the container.
 * @member {module:model/ContainerProperties.LeaseStatusEnum} leaseStatus
 */
ContainerProperties.prototype['leaseStatus'] = undefined;

/**
 * Lease state of the container.
 * @member {module:model/ContainerProperties.LeaseStateEnum} leaseState
 */
ContainerProperties.prototype['leaseState'] = undefined;

/**
 * Specifies whether the lease on a container is of infinite or fixed duration, only when the container is leased.
 * @member {module:model/ContainerProperties.LeaseDurationEnum} leaseDuration
 */
ContainerProperties.prototype['leaseDuration'] = undefined;

/**
 * A name-value pair to associate with the container as metadata.
 * @member {Object.<String, String>} metadata
 */
ContainerProperties.prototype['metadata'] = undefined;

/**
 * @member {module:model/ImmutabilityPolicyProperties} immutabilityPolicy
 */
ContainerProperties.prototype['immutabilityPolicy'] = undefined;

/**
 * @member {module:model/LegalHoldProperties} legalHold
 */
ContainerProperties.prototype['legalHold'] = undefined;

/**
 * The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers with hasLegalHold=true for a given account.
 * @member {Boolean} hasLegalHold
 */
ContainerProperties.prototype['hasLegalHold'] = undefined;

/**
 * The hasImmutabilityPolicy public property is set to true by SRP if ImmutabilityPolicy has been created for this container. The hasImmutabilityPolicy public property is set to false by SRP if ImmutabilityPolicy has not been created for this container.
 * @member {Boolean} hasImmutabilityPolicy
 */
ContainerProperties.prototype['hasImmutabilityPolicy'] = undefined;

/**
 * @member {module:model/ImmutableStorageWithVersioning} immutableStorageWithVersioning
 */
ContainerProperties.prototype['immutableStorageWithVersioning'] = undefined;

/**
 * Enable NFSv3 root squash on blob container.
 * @member {Boolean} enableNfsV3RootSquash
 */
ContainerProperties.prototype['enableNfsV3RootSquash'] = undefined;

/**
 * Enable NFSv3 all squash on blob container.
 * @member {Boolean} enableNfsV3AllSquash
 */
ContainerProperties.prototype['enableNfsV3AllSquash'] = undefined;





/**
 * Allowed values for the <code>publicAccess</code> property.
 * @enum {String}
 * @readonly
 */
ContainerProperties['PublicAccessEnum'] = {

    /**
     * value: "Container"
     * @const
     */
    "Container": "Container",

    /**
     * value: "Blob"
     * @const
     */
    "Blob": "Blob",

    /**
     * value: "None"
     * @const
     */
    "None": "None"
};


/**
 * Allowed values for the <code>leaseStatus</code> property.
 * @enum {String}
 * @readonly
 */
ContainerProperties['LeaseStatusEnum'] = {

    /**
     * value: "Locked"
     * @const
     */
    "Locked": "Locked",

    /**
     * value: "Unlocked"
     * @const
     */
    "Unlocked": "Unlocked"
};


/**
 * Allowed values for the <code>leaseState</code> property.
 * @enum {String}
 * @readonly
 */
ContainerProperties['LeaseStateEnum'] = {

    /**
     * value: "Available"
     * @const
     */
    "Available": "Available",

    /**
     * value: "Leased"
     * @const
     */
    "Leased": "Leased",

    /**
     * value: "Expired"
     * @const
     */
    "Expired": "Expired",

    /**
     * value: "Breaking"
     * @const
     */
    "Breaking": "Breaking",

    /**
     * value: "Broken"
     * @const
     */
    "Broken": "Broken"
};


/**
 * Allowed values for the <code>leaseDuration</code> property.
 * @enum {String}
 * @readonly
 */
ContainerProperties['LeaseDurationEnum'] = {

    /**
     * value: "Infinite"
     * @const
     */
    "Infinite": "Infinite",

    /**
     * value: "Fixed"
     * @const
     */
    "Fixed": "Fixed"
};



export default ContainerProperties;

