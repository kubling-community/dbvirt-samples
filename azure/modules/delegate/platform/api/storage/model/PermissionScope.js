/**
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2023-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../../BaseApiClient";

/**
 * The PermissionScope model module.
 * @module model/PermissionScope
 * @version 2023-01-01
 */
class PermissionScope {
    /**
     * Constructs a new <code>PermissionScope</code>.
     * @alias module:model/PermissionScope
     * @param permissions {String} The permissions for the local user. Possible values include: Read (r), Write (w), Delete (d), List (l), and Create (c).
     * @param service {String} The service used by the local user, e.g. blob, file.
     * @param resourceName {String} The name of resource, normally the container name or the file share name, used by the local user.
     */
    constructor(permissions, service, resourceName) { 
        
        PermissionScope.initialize(this, permissions, service, resourceName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, permissions, service, resourceName) { 
        obj['permissions'] = permissions;
        obj['service'] = service;
        obj['resourceName'] = resourceName;
    }

    /**
     * Constructs a <code>PermissionScope</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PermissionScope} obj Optional instance to populate.
     * @return {module:model/PermissionScope} The populated <code>PermissionScope</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PermissionScope();

            if (data.hasOwnProperty('permissions')) {
                obj['permissions'] = ApiClient.convertToType(data['permissions'], 'String');
            }
            if (data.hasOwnProperty('service')) {
                obj['service'] = ApiClient.convertToType(data['service'], 'String');
            }
            if (data.hasOwnProperty('resourceName')) {
                obj['resourceName'] = ApiClient.convertToType(data['resourceName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PermissionScope</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PermissionScope</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PermissionScope.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['permissions'] && !(typeof data['permissions'] === 'string' || data['permissions'] instanceof String)) {
            throw new Error("Expected the field `permissions` to be a primitive type in the JSON string but got " + data['permissions']);
        }
        // ensure the json data is a string
        if (data['service'] && !(typeof data['service'] === 'string' || data['service'] instanceof String)) {
            throw new Error("Expected the field `service` to be a primitive type in the JSON string but got " + data['service']);
        }
        // ensure the json data is a string
        if (data['resourceName'] && !(typeof data['resourceName'] === 'string' || data['resourceName'] instanceof String)) {
            throw new Error("Expected the field `resourceName` to be a primitive type in the JSON string but got " + data['resourceName']);
        }

        return true;
    }


}

PermissionScope.RequiredProperties = ["permissions", "service", "resourceName"];

/**
 * The permissions for the local user. Possible values include: Read (r), Write (w), Delete (d), List (l), and Create (c).
 * @member {String} permissions
 */
PermissionScope.prototype['permissions'] = undefined;

/**
 * The service used by the local user, e.g. blob, file.
 * @member {String} service
 */
PermissionScope.prototype['service'] = undefined;

/**
 * The name of resource, normally the container name or the file share name, used by the local user.
 * @member {String} resourceName
 */
PermissionScope.prototype['resourceName'] = undefined;






export default PermissionScope;

