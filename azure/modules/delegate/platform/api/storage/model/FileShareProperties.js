/**
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2023-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../../BaseApiClient";
import SignedIdentifier from './SignedIdentifier';

/**
 * The FileShareProperties model module.
 * @module model/FileShareProperties
 * @version 2023-01-01
 */
class FileShareProperties {
    /**
     * Constructs a new <code>FileShareProperties</code>.
     * The properties of the file share.
     * @alias module:model/FileShareProperties
     */
    constructor() { 
        
        FileShareProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FileShareProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FileShareProperties} obj Optional instance to populate.
     * @return {module:model/FileShareProperties} The populated <code>FileShareProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FileShareProperties();

            if (data.hasOwnProperty('lastModifiedTime')) {
                obj['lastModifiedTime'] = ApiClient.convertToType(data['lastModifiedTime'], 'Date');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': 'String'});
            }
            if (data.hasOwnProperty('shareQuota')) {
                obj['shareQuota'] = ApiClient.convertToType(data['shareQuota'], 'Number');
            }
            if (data.hasOwnProperty('enabledProtocols')) {
                obj['enabledProtocols'] = ApiClient.convertToType(data['enabledProtocols'], 'String');
            }
            if (data.hasOwnProperty('rootSquash')) {
                obj['rootSquash'] = ApiClient.convertToType(data['rootSquash'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
            if (data.hasOwnProperty('deleted')) {
                obj['deleted'] = ApiClient.convertToType(data['deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('deletedTime')) {
                obj['deletedTime'] = ApiClient.convertToType(data['deletedTime'], 'Date');
            }
            if (data.hasOwnProperty('remainingRetentionDays')) {
                obj['remainingRetentionDays'] = ApiClient.convertToType(data['remainingRetentionDays'], 'Number');
            }
            if (data.hasOwnProperty('accessTier')) {
                obj['accessTier'] = ApiClient.convertToType(data['accessTier'], 'String');
            }
            if (data.hasOwnProperty('accessTierChangeTime')) {
                obj['accessTierChangeTime'] = ApiClient.convertToType(data['accessTierChangeTime'], 'Date');
            }
            if (data.hasOwnProperty('accessTierStatus')) {
                obj['accessTierStatus'] = ApiClient.convertToType(data['accessTierStatus'], 'String');
            }
            if (data.hasOwnProperty('shareUsageBytes')) {
                obj['shareUsageBytes'] = ApiClient.convertToType(data['shareUsageBytes'], 'Number');
            }
            if (data.hasOwnProperty('leaseStatus')) {
                obj['leaseStatus'] = ApiClient.convertToType(data['leaseStatus'], 'String');
            }
            if (data.hasOwnProperty('leaseState')) {
                obj['leaseState'] = ApiClient.convertToType(data['leaseState'], 'String');
            }
            if (data.hasOwnProperty('leaseDuration')) {
                obj['leaseDuration'] = ApiClient.convertToType(data['leaseDuration'], 'String');
            }
            if (data.hasOwnProperty('signedIdentifiers')) {
                obj['signedIdentifiers'] = ApiClient.convertToType(data['signedIdentifiers'], [SignedIdentifier]);
            }
            if (data.hasOwnProperty('snapshotTime')) {
                obj['snapshotTime'] = ApiClient.convertToType(data['snapshotTime'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FileShareProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FileShareProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['enabledProtocols'] && !(typeof data['enabledProtocols'] === 'string' || data['enabledProtocols'] instanceof String)) {
            throw new Error("Expected the field `enabledProtocols` to be a primitive type in the JSON string but got " + data['enabledProtocols']);
        }
        // ensure the json data is a string
        if (data['rootSquash'] && !(typeof data['rootSquash'] === 'string' || data['rootSquash'] instanceof String)) {
            throw new Error("Expected the field `rootSquash` to be a primitive type in the JSON string but got " + data['rootSquash']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }
        // ensure the json data is a string
        if (data['accessTier'] && !(typeof data['accessTier'] === 'string' || data['accessTier'] instanceof String)) {
            throw new Error("Expected the field `accessTier` to be a primitive type in the JSON string but got " + data['accessTier']);
        }
        // ensure the json data is a string
        if (data['accessTierStatus'] && !(typeof data['accessTierStatus'] === 'string' || data['accessTierStatus'] instanceof String)) {
            throw new Error("Expected the field `accessTierStatus` to be a primitive type in the JSON string but got " + data['accessTierStatus']);
        }
        // ensure the json data is a string
        if (data['leaseStatus'] && !(typeof data['leaseStatus'] === 'string' || data['leaseStatus'] instanceof String)) {
            throw new Error("Expected the field `leaseStatus` to be a primitive type in the JSON string but got " + data['leaseStatus']);
        }
        // ensure the json data is a string
        if (data['leaseState'] && !(typeof data['leaseState'] === 'string' || data['leaseState'] instanceof String)) {
            throw new Error("Expected the field `leaseState` to be a primitive type in the JSON string but got " + data['leaseState']);
        }
        // ensure the json data is a string
        if (data['leaseDuration'] && !(typeof data['leaseDuration'] === 'string' || data['leaseDuration'] instanceof String)) {
            throw new Error("Expected the field `leaseDuration` to be a primitive type in the JSON string but got " + data['leaseDuration']);
        }
        if (data['signedIdentifiers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['signedIdentifiers'])) {
                throw new Error("Expected the field `signedIdentifiers` to be an array in the JSON data but got " + data['signedIdentifiers']);
            }
            // validate the optional field `signedIdentifiers` (array)
            for (const item of data['signedIdentifiers']) {
                SignedIdentifier.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Returns the date and time the share was last modified.
 * @member {Date} lastModifiedTime
 */
FileShareProperties.prototype['lastModifiedTime'] = undefined;

/**
 * A name-value pair to associate with the share as metadata.
 * @member {Object.<String, String>} metadata
 */
FileShareProperties.prototype['metadata'] = undefined;

/**
 * The maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5TB (5120). For Large File Shares, the maximum size is 102400.
 * @member {Number} shareQuota
 */
FileShareProperties.prototype['shareQuota'] = undefined;

/**
 * The authentication protocol that is used for the file share. Can only be specified when creating a share.
 * @member {module:model/FileShareProperties.EnabledProtocolsEnum} enabledProtocols
 */
FileShareProperties.prototype['enabledProtocols'] = undefined;

/**
 * The property is for NFS share only. The default is NoRootSquash.
 * @member {module:model/FileShareProperties.RootSquashEnum} rootSquash
 */
FileShareProperties.prototype['rootSquash'] = undefined;

/**
 * The version of the share.
 * @member {String} version
 */
FileShareProperties.prototype['version'] = undefined;

/**
 * Indicates whether the share was deleted.
 * @member {Boolean} deleted
 */
FileShareProperties.prototype['deleted'] = undefined;

/**
 * The deleted time if the share was deleted.
 * @member {Date} deletedTime
 */
FileShareProperties.prototype['deletedTime'] = undefined;

/**
 * Remaining retention days for share that was soft deleted.
 * @member {Number} remainingRetentionDays
 */
FileShareProperties.prototype['remainingRetentionDays'] = undefined;

/**
 * Access tier for specific share. GpV2 account can choose between TransactionOptimized (default), Hot, and Cool. FileStorage account can choose Premium.
 * @member {module:model/FileShareProperties.AccessTierEnum} accessTier
 */
FileShareProperties.prototype['accessTier'] = undefined;

/**
 * Indicates the last modification time for share access tier.
 * @member {Date} accessTierChangeTime
 */
FileShareProperties.prototype['accessTierChangeTime'] = undefined;

/**
 * Indicates if there is a pending transition for access tier.
 * @member {String} accessTierStatus
 */
FileShareProperties.prototype['accessTierStatus'] = undefined;

/**
 * The approximate size of the data stored on the share. Note that this value may not include all recently created or recently resized files.
 * @member {Number} shareUsageBytes
 */
FileShareProperties.prototype['shareUsageBytes'] = undefined;

/**
 * The lease status of the share.
 * @member {module:model/FileShareProperties.LeaseStatusEnum} leaseStatus
 */
FileShareProperties.prototype['leaseStatus'] = undefined;

/**
 * Lease state of the share.
 * @member {module:model/FileShareProperties.LeaseStateEnum} leaseState
 */
FileShareProperties.prototype['leaseState'] = undefined;

/**
 * Specifies whether the lease on a share is of infinite or fixed duration, only when the share is leased.
 * @member {module:model/FileShareProperties.LeaseDurationEnum} leaseDuration
 */
FileShareProperties.prototype['leaseDuration'] = undefined;

/**
 * List of stored access policies specified on the share.
 * @member {Array.<module:model/SignedIdentifier>} signedIdentifiers
 */
FileShareProperties.prototype['signedIdentifiers'] = undefined;

/**
 * Creation time of share snapshot returned in the response of list shares with expand param \"snapshots\".
 * @member {Date} snapshotTime
 */
FileShareProperties.prototype['snapshotTime'] = undefined;





/**
 * Allowed values for the <code>enabledProtocols</code> property.
 * @enum {String}
 * @readonly
 */
FileShareProperties['EnabledProtocolsEnum'] = {

    /**
     * value: "SMB"
     * @const
     */
    "SMB": "SMB",

    /**
     * value: "NFS"
     * @const
     */
    "NFS": "NFS"
};


/**
 * Allowed values for the <code>rootSquash</code> property.
 * @enum {String}
 * @readonly
 */
FileShareProperties['RootSquashEnum'] = {

    /**
     * value: "NoRootSquash"
     * @const
     */
    "NoRootSquash": "NoRootSquash",

    /**
     * value: "RootSquash"
     * @const
     */
    "RootSquash": "RootSquash",

    /**
     * value: "AllSquash"
     * @const
     */
    "AllSquash": "AllSquash"
};


/**
 * Allowed values for the <code>accessTier</code> property.
 * @enum {String}
 * @readonly
 */
FileShareProperties['AccessTierEnum'] = {

    /**
     * value: "TransactionOptimized"
     * @const
     */
    "TransactionOptimized": "TransactionOptimized",

    /**
     * value: "Hot"
     * @const
     */
    "Hot": "Hot",

    /**
     * value: "Cool"
     * @const
     */
    "Cool": "Cool",

    /**
     * value: "Premium"
     * @const
     */
    "Premium": "Premium"
};


/**
 * Allowed values for the <code>leaseStatus</code> property.
 * @enum {String}
 * @readonly
 */
FileShareProperties['LeaseStatusEnum'] = {

    /**
     * value: "Locked"
     * @const
     */
    "Locked": "Locked",

    /**
     * value: "Unlocked"
     * @const
     */
    "Unlocked": "Unlocked"
};


/**
 * Allowed values for the <code>leaseState</code> property.
 * @enum {String}
 * @readonly
 */
FileShareProperties['LeaseStateEnum'] = {

    /**
     * value: "Available"
     * @const
     */
    "Available": "Available",

    /**
     * value: "Leased"
     * @const
     */
    "Leased": "Leased",

    /**
     * value: "Expired"
     * @const
     */
    "Expired": "Expired",

    /**
     * value: "Breaking"
     * @const
     */
    "Breaking": "Breaking",

    /**
     * value: "Broken"
     * @const
     */
    "Broken": "Broken"
};


/**
 * Allowed values for the <code>leaseDuration</code> property.
 * @enum {String}
 * @readonly
 */
FileShareProperties['LeaseDurationEnum'] = {

    /**
     * value: "Infinite"
     * @const
     */
    "Infinite": "Infinite",

    /**
     * value: "Fixed"
     * @const
     */
    "Fixed": "Fixed"
};



export default FileShareProperties;

