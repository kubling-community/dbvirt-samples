/**
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2023-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../../BaseApiClient";

/**
 * The LegalHold model module.
 * @module model/LegalHold
 * @version 2023-01-01
 */
class LegalHold {
    /**
     * Constructs a new <code>LegalHold</code>.
     * The LegalHold property of a blob container.
     * @alias module:model/LegalHold
     * @param tags {Array.<String>} Each tag should be 3 to 23 alphanumeric characters and is normalized to lower case at SRP.
     */
    constructor(tags) { 
        
        LegalHold.initialize(this, tags);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, tags) { 
        obj['tags'] = tags;
    }

    /**
     * Constructs a <code>LegalHold</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LegalHold} obj Optional instance to populate.
     * @return {module:model/LegalHold} The populated <code>LegalHold</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LegalHold();

            if (data.hasOwnProperty('hasLegalHold')) {
                obj['hasLegalHold'] = ApiClient.convertToType(data['hasLegalHold'], 'Boolean');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('allowProtectedAppendWritesAll')) {
                obj['allowProtectedAppendWritesAll'] = ApiClient.convertToType(data['allowProtectedAppendWritesAll'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LegalHold</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LegalHold</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LegalHold.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }

        return true;
    }


}

LegalHold.RequiredProperties = ["tags"];

/**
 * The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers with hasLegalHold=true for a given account.
 * @member {Boolean} hasLegalHold
 */
LegalHold.prototype['hasLegalHold'] = undefined;

/**
 * Each tag should be 3 to 23 alphanumeric characters and is normalized to lower case at SRP.
 * @member {Array.<String>} tags
 */
LegalHold.prototype['tags'] = undefined;

/**
 * When enabled, new blocks can be written to both 'Append and Bock Blobs' while maintaining legal hold protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted.
 * @member {Boolean} allowProtectedAppendWritesAll
 */
LegalHold.prototype['allowProtectedAppendWritesAll'] = undefined;






export default LegalHold;

