/**
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2023-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../../BaseApiClient";
import ImmutabilityPolicyProperty from './ImmutabilityPolicyProperty';
import UpdateHistoryProperty from './UpdateHistoryProperty';

/**
 * The ImmutabilityPolicyProperties model module.
 * @module model/ImmutabilityPolicyProperties
 * @version 2023-01-01
 */
class ImmutabilityPolicyProperties {
    /**
     * Constructs a new <code>ImmutabilityPolicyProperties</code>.
     * The properties of an ImmutabilityPolicy of a blob container.
     * @alias module:model/ImmutabilityPolicyProperties
     */
    constructor() { 
        
        ImmutabilityPolicyProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ImmutabilityPolicyProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImmutabilityPolicyProperties} obj Optional instance to populate.
     * @return {module:model/ImmutabilityPolicyProperties} The populated <code>ImmutabilityPolicyProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImmutabilityPolicyProperties();

            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ImmutabilityPolicyProperty.constructFromObject(data['properties']);
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('updateHistory')) {
                obj['updateHistory'] = ApiClient.convertToType(data['updateHistory'], [UpdateHistoryProperty]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImmutabilityPolicyProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImmutabilityPolicyProperties</code>.
     */
    static validateJSON(data) {
        // validate the optional field `properties`
        if (data['properties']) { // data not null
          ImmutabilityPolicyProperty.validateJSON(data['properties']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        if (data['updateHistory']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['updateHistory'])) {
                throw new Error("Expected the field `updateHistory` to be an array in the JSON data but got " + data['updateHistory']);
            }
            // validate the optional field `updateHistory` (array)
            for (const item of data['updateHistory']) {
                UpdateHistoryProperty.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/ImmutabilityPolicyProperty} properties
 */
ImmutabilityPolicyProperties.prototype['properties'] = undefined;

/**
 * ImmutabilityPolicy Etag.
 * @member {String} etag
 */
ImmutabilityPolicyProperties.prototype['etag'] = undefined;

/**
 * The ImmutabilityPolicy update history of the blob container.
 * @member {Array.<module:model/UpdateHistoryProperty>} updateHistory
 */
ImmutabilityPolicyProperties.prototype['updateHistory'] = undefined;






export default ImmutabilityPolicyProperties;

