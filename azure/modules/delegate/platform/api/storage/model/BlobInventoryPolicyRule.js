/**
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2023-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../../BaseApiClient";
import BlobInventoryPolicyDefinition from './BlobInventoryPolicyDefinition';

/**
 * The BlobInventoryPolicyRule model module.
 * @module model/BlobInventoryPolicyRule
 * @version 2023-01-01
 */
class BlobInventoryPolicyRule {
    /**
     * Constructs a new <code>BlobInventoryPolicyRule</code>.
     * An object that wraps the blob inventory rule. Each rule is uniquely defined by name.
     * @alias module:model/BlobInventoryPolicyRule
     * @param enabled {Boolean} Rule is enabled when set to true.
     * @param name {String} A rule name can contain any combination of alpha numeric characters. Rule name is case-sensitive. It must be unique within a policy.
     * @param destination {String} Container name where blob inventory files are stored. Must be pre-created.
     * @param definition {module:model/BlobInventoryPolicyDefinition} 
     */
    constructor(enabled, name, destination, definition) { 
        
        BlobInventoryPolicyRule.initialize(this, enabled, name, destination, definition);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, enabled, name, destination, definition) { 
        obj['enabled'] = enabled;
        obj['name'] = name;
        obj['destination'] = destination;
        obj['definition'] = definition;
    }

    /**
     * Constructs a <code>BlobInventoryPolicyRule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BlobInventoryPolicyRule} obj Optional instance to populate.
     * @return {module:model/BlobInventoryPolicyRule} The populated <code>BlobInventoryPolicyRule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BlobInventoryPolicyRule();

            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('destination')) {
                obj['destination'] = ApiClient.convertToType(data['destination'], 'String');
            }
            if (data.hasOwnProperty('definition')) {
                obj['definition'] = BlobInventoryPolicyDefinition.constructFromObject(data['definition']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BlobInventoryPolicyRule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BlobInventoryPolicyRule</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BlobInventoryPolicyRule.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['destination'] && !(typeof data['destination'] === 'string' || data['destination'] instanceof String)) {
            throw new Error("Expected the field `destination` to be a primitive type in the JSON string but got " + data['destination']);
        }
        // validate the optional field `definition`
        if (data['definition']) { // data not null
          BlobInventoryPolicyDefinition.validateJSON(data['definition']);
        }

        return true;
    }


}

BlobInventoryPolicyRule.RequiredProperties = ["enabled", "name", "destination", "definition"];

/**
 * Rule is enabled when set to true.
 * @member {Boolean} enabled
 */
BlobInventoryPolicyRule.prototype['enabled'] = undefined;

/**
 * A rule name can contain any combination of alpha numeric characters. Rule name is case-sensitive. It must be unique within a policy.
 * @member {String} name
 */
BlobInventoryPolicyRule.prototype['name'] = undefined;

/**
 * Container name where blob inventory files are stored. Must be pre-created.
 * @member {String} destination
 */
BlobInventoryPolicyRule.prototype['destination'] = undefined;

/**
 * @member {module:model/BlobInventoryPolicyDefinition} definition
 */
BlobInventoryPolicyRule.prototype['definition'] = undefined;






export default BlobInventoryPolicyRule;

