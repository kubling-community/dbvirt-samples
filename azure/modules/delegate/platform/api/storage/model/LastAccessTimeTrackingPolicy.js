/**
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2023-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../../BaseApiClient";

/**
 * The LastAccessTimeTrackingPolicy model module.
 * @module model/LastAccessTimeTrackingPolicy
 * @version 2023-01-01
 */
class LastAccessTimeTrackingPolicy {
    /**
     * Constructs a new <code>LastAccessTimeTrackingPolicy</code>.
     * The blob service properties for Last access time based tracking policy.
     * @alias module:model/LastAccessTimeTrackingPolicy
     * @param enable {Boolean} When set to true last access time based tracking is enabled.
     */
    constructor(enable) { 
        
        LastAccessTimeTrackingPolicy.initialize(this, enable);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, enable) { 
        obj['enable'] = enable;
    }

    /**
     * Constructs a <code>LastAccessTimeTrackingPolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LastAccessTimeTrackingPolicy} obj Optional instance to populate.
     * @return {module:model/LastAccessTimeTrackingPolicy} The populated <code>LastAccessTimeTrackingPolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LastAccessTimeTrackingPolicy();

            if (data.hasOwnProperty('enable')) {
                obj['enable'] = ApiClient.convertToType(data['enable'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('trackingGranularityInDays')) {
                obj['trackingGranularityInDays'] = ApiClient.convertToType(data['trackingGranularityInDays'], 'Number');
            }
            if (data.hasOwnProperty('blobType')) {
                obj['blobType'] = ApiClient.convertToType(data['blobType'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LastAccessTimeTrackingPolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LastAccessTimeTrackingPolicy</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LastAccessTimeTrackingPolicy.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['blobType'])) {
            throw new Error("Expected the field `blobType` to be an array in the JSON data but got " + data['blobType']);
        }

        return true;
    }


}

LastAccessTimeTrackingPolicy.RequiredProperties = ["enable"];

/**
 * When set to true last access time based tracking is enabled.
 * @member {Boolean} enable
 */
LastAccessTimeTrackingPolicy.prototype['enable'] = undefined;

/**
 * Name of the policy. The valid value is AccessTimeTracking. This field is currently read only
 * @member {module:model/LastAccessTimeTrackingPolicy.NameEnum} name
 */
LastAccessTimeTrackingPolicy.prototype['name'] = undefined;

/**
 * The field specifies blob object tracking granularity in days, typically how often the blob object should be tracked.This field is currently read only with value as 1
 * @member {Number} trackingGranularityInDays
 */
LastAccessTimeTrackingPolicy.prototype['trackingGranularityInDays'] = undefined;

/**
 * An array of predefined supported blob types. Only blockBlob is the supported value. This field is currently read only
 * @member {Array.<String>} blobType
 */
LastAccessTimeTrackingPolicy.prototype['blobType'] = undefined;





/**
 * Allowed values for the <code>name</code> property.
 * @enum {String}
 * @readonly
 */
LastAccessTimeTrackingPolicy['NameEnum'] = {

    /**
     * value: "AccessTimeTracking"
     * @const
     */
    "AccessTimeTracking": "AccessTimeTracking"
};



export default LastAccessTimeTrackingPolicy;

