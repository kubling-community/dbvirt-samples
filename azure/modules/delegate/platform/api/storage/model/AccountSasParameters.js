/**
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2023-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../../BaseApiClient";

/**
 * The AccountSasParameters model module.
 * @module model/AccountSasParameters
 * @version 2023-01-01
 */
class AccountSasParameters {
    /**
     * Constructs a new <code>AccountSasParameters</code>.
     * The parameters to list SAS credentials of a storage account.
     * @alias module:model/AccountSasParameters
     * @param signedServices {module:model/AccountSasParameters.SignedServicesEnum} The signed services accessible with the account SAS. Possible values include: Blob (b), Queue (q), Table (t), File (f).
     * @param signedResourceTypes {module:model/AccountSasParameters.SignedResourceTypesEnum} The signed resource types that are accessible with the account SAS. Service (s): Access to service-level APIs; Container (c): Access to container-level APIs; Object (o): Access to object-level APIs for blobs, queue messages, table entities, and files.
     * @param signedPermission {module:model/AccountSasParameters.SignedPermissionEnum} The signed permissions for the account SAS. Possible values include: Read (r), Write (w), Delete (d), List (l), Add (a), Create (c), Update (u) and Process (p).
     * @param signedExpiry {Date} The time at which the shared access signature becomes invalid.
     */
    constructor(signedServices, signedResourceTypes, signedPermission, signedExpiry) { 
        
        AccountSasParameters.initialize(this, signedServices, signedResourceTypes, signedPermission, signedExpiry);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, signedServices, signedResourceTypes, signedPermission, signedExpiry) { 
        obj['signedServices'] = signedServices;
        obj['signedResourceTypes'] = signedResourceTypes;
        obj['signedPermission'] = signedPermission;
        obj['signedExpiry'] = signedExpiry;
    }

    /**
     * Constructs a <code>AccountSasParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccountSasParameters} obj Optional instance to populate.
     * @return {module:model/AccountSasParameters} The populated <code>AccountSasParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccountSasParameters();

            if (data.hasOwnProperty('signedServices')) {
                obj['signedServices'] = ApiClient.convertToType(data['signedServices'], 'String');
            }
            if (data.hasOwnProperty('signedResourceTypes')) {
                obj['signedResourceTypes'] = ApiClient.convertToType(data['signedResourceTypes'], 'String');
            }
            if (data.hasOwnProperty('signedPermission')) {
                obj['signedPermission'] = ApiClient.convertToType(data['signedPermission'], 'String');
            }
            if (data.hasOwnProperty('signedIp')) {
                obj['signedIp'] = ApiClient.convertToType(data['signedIp'], 'String');
            }
            if (data.hasOwnProperty('signedProtocol')) {
                obj['signedProtocol'] = ApiClient.convertToType(data['signedProtocol'], 'String');
            }
            if (data.hasOwnProperty('signedStart')) {
                obj['signedStart'] = ApiClient.convertToType(data['signedStart'], 'Date');
            }
            if (data.hasOwnProperty('signedExpiry')) {
                obj['signedExpiry'] = ApiClient.convertToType(data['signedExpiry'], 'Date');
            }
            if (data.hasOwnProperty('keyToSign')) {
                obj['keyToSign'] = ApiClient.convertToType(data['keyToSign'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AccountSasParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccountSasParameters</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AccountSasParameters.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['signedServices'] && !(typeof data['signedServices'] === 'string' || data['signedServices'] instanceof String)) {
            throw new Error("Expected the field `signedServices` to be a primitive type in the JSON string but got " + data['signedServices']);
        }
        // ensure the json data is a string
        if (data['signedResourceTypes'] && !(typeof data['signedResourceTypes'] === 'string' || data['signedResourceTypes'] instanceof String)) {
            throw new Error("Expected the field `signedResourceTypes` to be a primitive type in the JSON string but got " + data['signedResourceTypes']);
        }
        // ensure the json data is a string
        if (data['signedPermission'] && !(typeof data['signedPermission'] === 'string' || data['signedPermission'] instanceof String)) {
            throw new Error("Expected the field `signedPermission` to be a primitive type in the JSON string but got " + data['signedPermission']);
        }
        // ensure the json data is a string
        if (data['signedIp'] && !(typeof data['signedIp'] === 'string' || data['signedIp'] instanceof String)) {
            throw new Error("Expected the field `signedIp` to be a primitive type in the JSON string but got " + data['signedIp']);
        }
        // ensure the json data is a string
        if (data['signedProtocol'] && !(typeof data['signedProtocol'] === 'string' || data['signedProtocol'] instanceof String)) {
            throw new Error("Expected the field `signedProtocol` to be a primitive type in the JSON string but got " + data['signedProtocol']);
        }
        // ensure the json data is a string
        if (data['keyToSign'] && !(typeof data['keyToSign'] === 'string' || data['keyToSign'] instanceof String)) {
            throw new Error("Expected the field `keyToSign` to be a primitive type in the JSON string but got " + data['keyToSign']);
        }

        return true;
    }


}

AccountSasParameters.RequiredProperties = ["signedServices", "signedResourceTypes", "signedPermission", "signedExpiry"];

/**
 * The signed services accessible with the account SAS. Possible values include: Blob (b), Queue (q), Table (t), File (f).
 * @member {module:model/AccountSasParameters.SignedServicesEnum} signedServices
 */
AccountSasParameters.prototype['signedServices'] = undefined;

/**
 * The signed resource types that are accessible with the account SAS. Service (s): Access to service-level APIs; Container (c): Access to container-level APIs; Object (o): Access to object-level APIs for blobs, queue messages, table entities, and files.
 * @member {module:model/AccountSasParameters.SignedResourceTypesEnum} signedResourceTypes
 */
AccountSasParameters.prototype['signedResourceTypes'] = undefined;

/**
 * The signed permissions for the account SAS. Possible values include: Read (r), Write (w), Delete (d), List (l), Add (a), Create (c), Update (u) and Process (p).
 * @member {module:model/AccountSasParameters.SignedPermissionEnum} signedPermission
 */
AccountSasParameters.prototype['signedPermission'] = undefined;

/**
 * An IP address or a range of IP addresses from which to accept requests.
 * @member {String} signedIp
 */
AccountSasParameters.prototype['signedIp'] = undefined;

/**
 * The protocol permitted for a request made with the account SAS.
 * @member {module:model/AccountSasParameters.SignedProtocolEnum} signedProtocol
 */
AccountSasParameters.prototype['signedProtocol'] = undefined;

/**
 * The time at which the SAS becomes valid.
 * @member {Date} signedStart
 */
AccountSasParameters.prototype['signedStart'] = undefined;

/**
 * The time at which the shared access signature becomes invalid.
 * @member {Date} signedExpiry
 */
AccountSasParameters.prototype['signedExpiry'] = undefined;

/**
 * The key to sign the account SAS token with.
 * @member {String} keyToSign
 */
AccountSasParameters.prototype['keyToSign'] = undefined;





/**
 * Allowed values for the <code>signedServices</code> property.
 * @enum {String}
 * @readonly
 */
AccountSasParameters['SignedServicesEnum'] = {

    /**
     * value: "b"
     * @const
     */
    "b": "b",

    /**
     * value: "q"
     * @const
     */
    "q": "q",

    /**
     * value: "t"
     * @const
     */
    "t": "t",

    /**
     * value: "f"
     * @const
     */
    "f": "f"
};


/**
 * Allowed values for the <code>signedResourceTypes</code> property.
 * @enum {String}
 * @readonly
 */
AccountSasParameters['SignedResourceTypesEnum'] = {

    /**
     * value: "s"
     * @const
     */
    "s": "s",

    /**
     * value: "c"
     * @const
     */
    "c": "c",

    /**
     * value: "o"
     * @const
     */
    "o": "o"
};


/**
 * Allowed values for the <code>signedPermission</code> property.
 * @enum {String}
 * @readonly
 */
AccountSasParameters['SignedPermissionEnum'] = {

    /**
     * value: "r"
     * @const
     */
    "r": "r",

    /**
     * value: "d"
     * @const
     */
    "d": "d",

    /**
     * value: "w"
     * @const
     */
    "w": "w",

    /**
     * value: "l"
     * @const
     */
    "l": "l",

    /**
     * value: "a"
     * @const
     */
    "a": "a",

    /**
     * value: "c"
     * @const
     */
    "c": "c",

    /**
     * value: "u"
     * @const
     */
    "u": "u",

    /**
     * value: "p"
     * @const
     */
    "p": "p"
};


/**
 * Allowed values for the <code>signedProtocol</code> property.
 * @enum {String}
 * @readonly
 */
AccountSasParameters['SignedProtocolEnum'] = {

    /**
     * value: "https,http"
     * @const
     */
    "https,http": "https,http",

    /**
     * value: "https"
     * @const
     */
    "https": "https"
};



export default AccountSasParameters;

