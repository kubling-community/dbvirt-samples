/**
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2023-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../../BaseApiClient";

/**
 * The ServiceSasParameters model module.
 * @module model/ServiceSasParameters
 * @version 2023-01-01
 */
class ServiceSasParameters {
    /**
     * Constructs a new <code>ServiceSasParameters</code>.
     * The parameters to list service SAS credentials of a specific resource.
     * @alias module:model/ServiceSasParameters
     * @param canonicalizedResource {String} The canonical path to the signed resource.
     */
    constructor(canonicalizedResource) { 
        
        ServiceSasParameters.initialize(this, canonicalizedResource);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, canonicalizedResource) { 
        obj['canonicalizedResource'] = canonicalizedResource;
    }

    /**
     * Constructs a <code>ServiceSasParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServiceSasParameters} obj Optional instance to populate.
     * @return {module:model/ServiceSasParameters} The populated <code>ServiceSasParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServiceSasParameters();

            if (data.hasOwnProperty('canonicalizedResource')) {
                obj['canonicalizedResource'] = ApiClient.convertToType(data['canonicalizedResource'], 'String');
            }
            if (data.hasOwnProperty('signedResource')) {
                obj['signedResource'] = ApiClient.convertToType(data['signedResource'], 'String');
            }
            if (data.hasOwnProperty('signedPermission')) {
                obj['signedPermission'] = ApiClient.convertToType(data['signedPermission'], 'String');
            }
            if (data.hasOwnProperty('signedIp')) {
                obj['signedIp'] = ApiClient.convertToType(data['signedIp'], 'String');
            }
            if (data.hasOwnProperty('signedProtocol')) {
                obj['signedProtocol'] = ApiClient.convertToType(data['signedProtocol'], 'String');
            }
            if (data.hasOwnProperty('signedStart')) {
                obj['signedStart'] = ApiClient.convertToType(data['signedStart'], 'Date');
            }
            if (data.hasOwnProperty('signedExpiry')) {
                obj['signedExpiry'] = ApiClient.convertToType(data['signedExpiry'], 'Date');
            }
            if (data.hasOwnProperty('signedIdentifier')) {
                obj['signedIdentifier'] = ApiClient.convertToType(data['signedIdentifier'], 'String');
            }
            if (data.hasOwnProperty('startPk')) {
                obj['startPk'] = ApiClient.convertToType(data['startPk'], 'String');
            }
            if (data.hasOwnProperty('endPk')) {
                obj['endPk'] = ApiClient.convertToType(data['endPk'], 'String');
            }
            if (data.hasOwnProperty('startRk')) {
                obj['startRk'] = ApiClient.convertToType(data['startRk'], 'String');
            }
            if (data.hasOwnProperty('endRk')) {
                obj['endRk'] = ApiClient.convertToType(data['endRk'], 'String');
            }
            if (data.hasOwnProperty('keyToSign')) {
                obj['keyToSign'] = ApiClient.convertToType(data['keyToSign'], 'String');
            }
            if (data.hasOwnProperty('rscc')) {
                obj['rscc'] = ApiClient.convertToType(data['rscc'], 'String');
            }
            if (data.hasOwnProperty('rscd')) {
                obj['rscd'] = ApiClient.convertToType(data['rscd'], 'String');
            }
            if (data.hasOwnProperty('rsce')) {
                obj['rsce'] = ApiClient.convertToType(data['rsce'], 'String');
            }
            if (data.hasOwnProperty('rscl')) {
                obj['rscl'] = ApiClient.convertToType(data['rscl'], 'String');
            }
            if (data.hasOwnProperty('rsct')) {
                obj['rsct'] = ApiClient.convertToType(data['rsct'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServiceSasParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServiceSasParameters</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ServiceSasParameters.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['canonicalizedResource'] && !(typeof data['canonicalizedResource'] === 'string' || data['canonicalizedResource'] instanceof String)) {
            throw new Error("Expected the field `canonicalizedResource` to be a primitive type in the JSON string but got " + data['canonicalizedResource']);
        }
        // ensure the json data is a string
        if (data['signedResource'] && !(typeof data['signedResource'] === 'string' || data['signedResource'] instanceof String)) {
            throw new Error("Expected the field `signedResource` to be a primitive type in the JSON string but got " + data['signedResource']);
        }
        // ensure the json data is a string
        if (data['signedPermission'] && !(typeof data['signedPermission'] === 'string' || data['signedPermission'] instanceof String)) {
            throw new Error("Expected the field `signedPermission` to be a primitive type in the JSON string but got " + data['signedPermission']);
        }
        // ensure the json data is a string
        if (data['signedIp'] && !(typeof data['signedIp'] === 'string' || data['signedIp'] instanceof String)) {
            throw new Error("Expected the field `signedIp` to be a primitive type in the JSON string but got " + data['signedIp']);
        }
        // ensure the json data is a string
        if (data['signedProtocol'] && !(typeof data['signedProtocol'] === 'string' || data['signedProtocol'] instanceof String)) {
            throw new Error("Expected the field `signedProtocol` to be a primitive type in the JSON string but got " + data['signedProtocol']);
        }
        // ensure the json data is a string
        if (data['signedIdentifier'] && !(typeof data['signedIdentifier'] === 'string' || data['signedIdentifier'] instanceof String)) {
            throw new Error("Expected the field `signedIdentifier` to be a primitive type in the JSON string but got " + data['signedIdentifier']);
        }
        // ensure the json data is a string
        if (data['startPk'] && !(typeof data['startPk'] === 'string' || data['startPk'] instanceof String)) {
            throw new Error("Expected the field `startPk` to be a primitive type in the JSON string but got " + data['startPk']);
        }
        // ensure the json data is a string
        if (data['endPk'] && !(typeof data['endPk'] === 'string' || data['endPk'] instanceof String)) {
            throw new Error("Expected the field `endPk` to be a primitive type in the JSON string but got " + data['endPk']);
        }
        // ensure the json data is a string
        if (data['startRk'] && !(typeof data['startRk'] === 'string' || data['startRk'] instanceof String)) {
            throw new Error("Expected the field `startRk` to be a primitive type in the JSON string but got " + data['startRk']);
        }
        // ensure the json data is a string
        if (data['endRk'] && !(typeof data['endRk'] === 'string' || data['endRk'] instanceof String)) {
            throw new Error("Expected the field `endRk` to be a primitive type in the JSON string but got " + data['endRk']);
        }
        // ensure the json data is a string
        if (data['keyToSign'] && !(typeof data['keyToSign'] === 'string' || data['keyToSign'] instanceof String)) {
            throw new Error("Expected the field `keyToSign` to be a primitive type in the JSON string but got " + data['keyToSign']);
        }
        // ensure the json data is a string
        if (data['rscc'] && !(typeof data['rscc'] === 'string' || data['rscc'] instanceof String)) {
            throw new Error("Expected the field `rscc` to be a primitive type in the JSON string but got " + data['rscc']);
        }
        // ensure the json data is a string
        if (data['rscd'] && !(typeof data['rscd'] === 'string' || data['rscd'] instanceof String)) {
            throw new Error("Expected the field `rscd` to be a primitive type in the JSON string but got " + data['rscd']);
        }
        // ensure the json data is a string
        if (data['rsce'] && !(typeof data['rsce'] === 'string' || data['rsce'] instanceof String)) {
            throw new Error("Expected the field `rsce` to be a primitive type in the JSON string but got " + data['rsce']);
        }
        // ensure the json data is a string
        if (data['rscl'] && !(typeof data['rscl'] === 'string' || data['rscl'] instanceof String)) {
            throw new Error("Expected the field `rscl` to be a primitive type in the JSON string but got " + data['rscl']);
        }
        // ensure the json data is a string
        if (data['rsct'] && !(typeof data['rsct'] === 'string' || data['rsct'] instanceof String)) {
            throw new Error("Expected the field `rsct` to be a primitive type in the JSON string but got " + data['rsct']);
        }

        return true;
    }


}

ServiceSasParameters.RequiredProperties = ["canonicalizedResource"];

/**
 * The canonical path to the signed resource.
 * @member {String} canonicalizedResource
 */
ServiceSasParameters.prototype['canonicalizedResource'] = undefined;

/**
 * The signed services accessible with the service SAS. Possible values include: Blob (b), Container (c), File (f), Share (s).
 * @member {module:model/ServiceSasParameters.SignedResourceEnum} signedResource
 */
ServiceSasParameters.prototype['signedResource'] = undefined;

/**
 * The signed permissions for the service SAS. Possible values include: Read (r), Write (w), Delete (d), List (l), Add (a), Create (c), Update (u) and Process (p).
 * @member {module:model/ServiceSasParameters.SignedPermissionEnum} signedPermission
 */
ServiceSasParameters.prototype['signedPermission'] = undefined;

/**
 * An IP address or a range of IP addresses from which to accept requests.
 * @member {String} signedIp
 */
ServiceSasParameters.prototype['signedIp'] = undefined;

/**
 * The protocol permitted for a request made with the account SAS.
 * @member {module:model/ServiceSasParameters.SignedProtocolEnum} signedProtocol
 */
ServiceSasParameters.prototype['signedProtocol'] = undefined;

/**
 * The time at which the SAS becomes valid.
 * @member {Date} signedStart
 */
ServiceSasParameters.prototype['signedStart'] = undefined;

/**
 * The time at which the shared access signature becomes invalid.
 * @member {Date} signedExpiry
 */
ServiceSasParameters.prototype['signedExpiry'] = undefined;

/**
 * A unique value up to 64 characters in length that correlates to an access policy specified for the container, queue, or table.
 * @member {String} signedIdentifier
 */
ServiceSasParameters.prototype['signedIdentifier'] = undefined;

/**
 * The start of partition key.
 * @member {String} startPk
 */
ServiceSasParameters.prototype['startPk'] = undefined;

/**
 * The end of partition key.
 * @member {String} endPk
 */
ServiceSasParameters.prototype['endPk'] = undefined;

/**
 * The start of row key.
 * @member {String} startRk
 */
ServiceSasParameters.prototype['startRk'] = undefined;

/**
 * The end of row key.
 * @member {String} endRk
 */
ServiceSasParameters.prototype['endRk'] = undefined;

/**
 * The key to sign the account SAS token with.
 * @member {String} keyToSign
 */
ServiceSasParameters.prototype['keyToSign'] = undefined;

/**
 * The response header override for cache control.
 * @member {String} rscc
 */
ServiceSasParameters.prototype['rscc'] = undefined;

/**
 * The response header override for content disposition.
 * @member {String} rscd
 */
ServiceSasParameters.prototype['rscd'] = undefined;

/**
 * The response header override for content encoding.
 * @member {String} rsce
 */
ServiceSasParameters.prototype['rsce'] = undefined;

/**
 * The response header override for content language.
 * @member {String} rscl
 */
ServiceSasParameters.prototype['rscl'] = undefined;

/**
 * The response header override for content type.
 * @member {String} rsct
 */
ServiceSasParameters.prototype['rsct'] = undefined;





/**
 * Allowed values for the <code>signedResource</code> property.
 * @enum {String}
 * @readonly
 */
ServiceSasParameters['SignedResourceEnum'] = {

    /**
     * value: "b"
     * @const
     */
    "b": "b",

    /**
     * value: "c"
     * @const
     */
    "c": "c",

    /**
     * value: "f"
     * @const
     */
    "f": "f",

    /**
     * value: "s"
     * @const
     */
    "s": "s"
};


/**
 * Allowed values for the <code>signedPermission</code> property.
 * @enum {String}
 * @readonly
 */
ServiceSasParameters['SignedPermissionEnum'] = {

    /**
     * value: "r"
     * @const
     */
    "r": "r",

    /**
     * value: "d"
     * @const
     */
    "d": "d",

    /**
     * value: "w"
     * @const
     */
    "w": "w",

    /**
     * value: "l"
     * @const
     */
    "l": "l",

    /**
     * value: "a"
     * @const
     */
    "a": "a",

    /**
     * value: "c"
     * @const
     */
    "c": "c",

    /**
     * value: "u"
     * @const
     */
    "u": "u",

    /**
     * value: "p"
     * @const
     */
    "p": "p"
};


/**
 * Allowed values for the <code>signedProtocol</code> property.
 * @enum {String}
 * @readonly
 */
ServiceSasParameters['SignedProtocolEnum'] = {

    /**
     * value: "https,http"
     * @const
     */
    "https,http": "https,http",

    /**
     * value: "https"
     * @const
     */
    "https": "https"
};



export default ServiceSasParameters;

