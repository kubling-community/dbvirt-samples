/**
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2023-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../../BaseApiClient";

/**
 * The EncryptionIdentity model module.
 * @module model/EncryptionIdentity
 * @version 2023-01-01
 */
class EncryptionIdentity {
    /**
     * Constructs a new <code>EncryptionIdentity</code>.
     * Encryption identity for the storage account.
     * @alias module:model/EncryptionIdentity
     */
    constructor() { 
        
        EncryptionIdentity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EncryptionIdentity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EncryptionIdentity} obj Optional instance to populate.
     * @return {module:model/EncryptionIdentity} The populated <code>EncryptionIdentity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EncryptionIdentity();

            if (data.hasOwnProperty('userAssignedIdentity')) {
                obj['userAssignedIdentity'] = ApiClient.convertToType(data['userAssignedIdentity'], 'String');
            }
            if (data.hasOwnProperty('federatedIdentityClientId')) {
                obj['federatedIdentityClientId'] = ApiClient.convertToType(data['federatedIdentityClientId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EncryptionIdentity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EncryptionIdentity</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['userAssignedIdentity'] && !(typeof data['userAssignedIdentity'] === 'string' || data['userAssignedIdentity'] instanceof String)) {
            throw new Error("Expected the field `userAssignedIdentity` to be a primitive type in the JSON string but got " + data['userAssignedIdentity']);
        }
        // ensure the json data is a string
        if (data['federatedIdentityClientId'] && !(typeof data['federatedIdentityClientId'] === 'string' || data['federatedIdentityClientId'] instanceof String)) {
            throw new Error("Expected the field `federatedIdentityClientId` to be a primitive type in the JSON string but got " + data['federatedIdentityClientId']);
        }

        return true;
    }


}



/**
 * Resource identifier of the UserAssigned identity to be associated with server-side encryption on the storage account.
 * @member {String} userAssignedIdentity
 */
EncryptionIdentity.prototype['userAssignedIdentity'] = undefined;

/**
 * ClientId of the multi-tenant application to be used in conjunction with the user-assigned identity for cross-tenant customer-managed-keys server-side encryption on the storage account.
 * @member {String} federatedIdentityClientId
 */
EncryptionIdentity.prototype['federatedIdentityClientId'] = undefined;






export default EncryptionIdentity;

