/**
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2023-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../../BaseApiClient";

/**
 * The TagFilter model module.
 * @module model/TagFilter
 * @version 2023-01-01
 */
class TagFilter {
    /**
     * Constructs a new <code>TagFilter</code>.
     * Blob index tag based filtering for blob objects
     * @alias module:model/TagFilter
     * @param name {String} This is the filter tag name, it can have 1 - 128 characters
     * @param op {String} This is the comparison operator which is used for object comparison and filtering. Only == (equality operator) is currently supported
     * @param value {String} This is the filter tag value field used for tag based filtering, it can have 0 - 256 characters
     */
    constructor(name, op, value) { 
        
        TagFilter.initialize(this, name, op, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, op, value) { 
        obj['name'] = name;
        obj['op'] = op;
        obj['value'] = value;
    }

    /**
     * Constructs a <code>TagFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TagFilter} obj Optional instance to populate.
     * @return {module:model/TagFilter} The populated <code>TagFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TagFilter();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('op')) {
                obj['op'] = ApiClient.convertToType(data['op'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TagFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TagFilter</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TagFilter.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['op'] && !(typeof data['op'] === 'string' || data['op'] instanceof String)) {
            throw new Error("Expected the field `op` to be a primitive type in the JSON string but got " + data['op']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}

TagFilter.RequiredProperties = ["name", "op", "value"];

/**
 * This is the filter tag name, it can have 1 - 128 characters
 * @member {String} name
 */
TagFilter.prototype['name'] = undefined;

/**
 * This is the comparison operator which is used for object comparison and filtering. Only == (equality operator) is currently supported
 * @member {String} op
 */
TagFilter.prototype['op'] = undefined;

/**
 * This is the filter tag value field used for tag based filtering, it can have 0 - 256 characters
 * @member {String} value
 */
TagFilter.prototype['value'] = undefined;






export default TagFilter;

