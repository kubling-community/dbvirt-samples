/**
 * BillingManagementClient
 * Billing client provides access to billing resources for Azure subscriptions.
 *
 * The version of the OpenAPI document: 2020-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../../BaseApiClient";
import AzurePlan from './AzurePlan';
import Reseller from './Reseller';

/**
 * The CustomerProperties model module.
 * @module model/CustomerProperties
 * @version 2020-05-01
 */
class CustomerProperties {
    /**
     * Constructs a new <code>CustomerProperties</code>.
     * The properties of a customer.
     * @alias module:model/CustomerProperties
     */
    constructor() { 
        
        CustomerProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CustomerProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CustomerProperties} obj Optional instance to populate.
     * @return {module:model/CustomerProperties} The populated <code>CustomerProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CustomerProperties();

            if (data.hasOwnProperty('billingProfileId')) {
                obj['billingProfileId'] = ApiClient.convertToType(data['billingProfileId'], 'String');
            }
            if (data.hasOwnProperty('billingProfileDisplayName')) {
                obj['billingProfileDisplayName'] = ApiClient.convertToType(data['billingProfileDisplayName'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('enabledAzurePlans')) {
                obj['enabledAzurePlans'] = ApiClient.convertToType(data['enabledAzurePlans'], [AzurePlan]);
            }
            if (data.hasOwnProperty('resellers')) {
                obj['resellers'] = ApiClient.convertToType(data['resellers'], [Reseller]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CustomerProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CustomerProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['billingProfileId'] && !(typeof data['billingProfileId'] === 'string' || data['billingProfileId'] instanceof String)) {
            throw new Error("Expected the field `billingProfileId` to be a primitive type in the JSON string but got " + data['billingProfileId']);
        }
        // ensure the json data is a string
        if (data['billingProfileDisplayName'] && !(typeof data['billingProfileDisplayName'] === 'string' || data['billingProfileDisplayName'] instanceof String)) {
            throw new Error("Expected the field `billingProfileDisplayName` to be a primitive type in the JSON string but got " + data['billingProfileDisplayName']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        if (data['enabledAzurePlans']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['enabledAzurePlans'])) {
                throw new Error("Expected the field `enabledAzurePlans` to be an array in the JSON data but got " + data['enabledAzurePlans']);
            }
            // validate the optional field `enabledAzurePlans` (array)
            for (const item of data['enabledAzurePlans']) {
                AzurePlan.validateJSON(item);
            };
        }
        if (data['resellers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['resellers'])) {
                throw new Error("Expected the field `resellers` to be an array in the JSON data but got " + data['resellers']);
            }
            // validate the optional field `resellers` (array)
            for (const item of data['resellers']) {
                Reseller.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The ID of the billing profile for the invoice section.
 * @member {String} billingProfileId
 */
CustomerProperties.prototype['billingProfileId'] = undefined;

/**
 * The name of the billing profile for the invoice section.
 * @member {String} billingProfileDisplayName
 */
CustomerProperties.prototype['billingProfileDisplayName'] = undefined;

/**
 * The name of the customer.
 * @member {String} displayName
 */
CustomerProperties.prototype['displayName'] = undefined;

/**
 * Azure plans enabled for the customer.
 * @member {Array.<module:model/AzurePlan>} enabledAzurePlans
 */
CustomerProperties.prototype['enabledAzurePlans'] = undefined;

/**
 * The list of resellers for which an Azure plan is enabled for the customer.
 * @member {Array.<module:model/Reseller>} resellers
 */
CustomerProperties.prototype['resellers'] = undefined;






export default CustomerProperties;

