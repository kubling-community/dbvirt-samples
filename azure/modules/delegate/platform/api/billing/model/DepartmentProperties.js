/**
 * BillingManagementClient
 * Billing client provides access to billing resources for Azure subscriptions.
 *
 * The version of the OpenAPI document: 2020-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../../BaseApiClient";
import EnrollmentAccount from './EnrollmentAccount';

/**
 * The DepartmentProperties model module.
 * @module model/DepartmentProperties
 * @version 2020-05-01
 */
class DepartmentProperties {
    /**
     * Constructs a new <code>DepartmentProperties</code>.
     * The properties of a department.
     * @alias module:model/DepartmentProperties
     */
    constructor() { 
        
        DepartmentProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DepartmentProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DepartmentProperties} obj Optional instance to populate.
     * @return {module:model/DepartmentProperties} The populated <code>DepartmentProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DepartmentProperties();

            if (data.hasOwnProperty('departmentName')) {
                obj['departmentName'] = ApiClient.convertToType(data['departmentName'], 'String');
            }
            if (data.hasOwnProperty('costCenter')) {
                obj['costCenter'] = ApiClient.convertToType(data['costCenter'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('enrollmentAccounts')) {
                obj['enrollmentAccounts'] = ApiClient.convertToType(data['enrollmentAccounts'], [EnrollmentAccount]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DepartmentProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DepartmentProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['departmentName'] && !(typeof data['departmentName'] === 'string' || data['departmentName'] instanceof String)) {
            throw new Error("Expected the field `departmentName` to be a primitive type in the JSON string but got " + data['departmentName']);
        }
        // ensure the json data is a string
        if (data['costCenter'] && !(typeof data['costCenter'] === 'string' || data['costCenter'] instanceof String)) {
            throw new Error("Expected the field `costCenter` to be a primitive type in the JSON string but got " + data['costCenter']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        if (data['enrollmentAccounts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['enrollmentAccounts'])) {
                throw new Error("Expected the field `enrollmentAccounts` to be an array in the JSON data but got " + data['enrollmentAccounts']);
            }
            // validate the optional field `enrollmentAccounts` (array)
            for (const item of data['enrollmentAccounts']) {
                EnrollmentAccount.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The name of the department.
 * @member {String} departmentName
 */
DepartmentProperties.prototype['departmentName'] = undefined;

/**
 * The cost center associated with the department.
 * @member {String} costCenter
 */
DepartmentProperties.prototype['costCenter'] = undefined;

/**
 * The status of the department.
 * @member {String} status
 */
DepartmentProperties.prototype['status'] = undefined;

/**
 * Associated enrollment accounts. By default this is not populated, unless it's specified in $expand.
 * @member {Array.<module:model/EnrollmentAccount>} enrollmentAccounts
 */
DepartmentProperties.prototype['enrollmentAccounts'] = undefined;






export default DepartmentProperties;

