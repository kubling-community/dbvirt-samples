/**
 * BillingManagementClient
 * Billing client provides access to billing resources for Azure subscriptions.
 *
 * The version of the OpenAPI document: 2020-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../../BaseApiClient";

/**
 * The Reseller model module.
 * @module model/Reseller
 * @version 2020-05-01
 */
class Reseller {
    /**
     * Constructs a new <code>Reseller</code>.
     * Details of the reseller.
     * @alias module:model/Reseller
     */
    constructor() { 
        
        Reseller.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Reseller</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Reseller} obj Optional instance to populate.
     * @return {module:model/Reseller} The populated <code>Reseller</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Reseller();

            if (data.hasOwnProperty('resellerId')) {
                obj['resellerId'] = ApiClient.convertToType(data['resellerId'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Reseller</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Reseller</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['resellerId'] && !(typeof data['resellerId'] === 'string' || data['resellerId'] instanceof String)) {
            throw new Error("Expected the field `resellerId` to be a primitive type in the JSON string but got " + data['resellerId']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }

        return true;
    }


}



/**
 * The MPN ID of the reseller.
 * @member {String} resellerId
 */
Reseller.prototype['resellerId'] = undefined;

/**
 * The name of the reseller.
 * @member {String} description
 */
Reseller.prototype['description'] = undefined;






export default Reseller;

