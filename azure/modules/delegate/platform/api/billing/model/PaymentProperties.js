/**
 * BillingManagementClient
 * Billing client provides access to billing resources for Azure subscriptions.
 *
 * The version of the OpenAPI document: 2020-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../../BaseApiClient";
import Amount from './Amount';

/**
 * The PaymentProperties model module.
 * @module model/PaymentProperties
 * @version 2020-05-01
 */
class PaymentProperties {
    /**
     * Constructs a new <code>PaymentProperties</code>.
     * The properties of a payment.
     * @alias module:model/PaymentProperties
     */
    constructor() { 
        
        PaymentProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PaymentProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentProperties} obj Optional instance to populate.
     * @return {module:model/PaymentProperties} The populated <code>PaymentProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentProperties();

            if (data.hasOwnProperty('paymentType')) {
                obj['paymentType'] = ApiClient.convertToType(data['paymentType'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = Amount.constructFromObject(data['amount']);
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
            if (data.hasOwnProperty('paymentMethodFamily')) {
                obj['paymentMethodFamily'] = ApiClient.convertToType(data['paymentMethodFamily'], 'String');
            }
            if (data.hasOwnProperty('paymentMethodType')) {
                obj['paymentMethodType'] = ApiClient.convertToType(data['paymentMethodType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaymentProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaymentProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['paymentType'] && !(typeof data['paymentType'] === 'string' || data['paymentType'] instanceof String)) {
            throw new Error("Expected the field `paymentType` to be a primitive type in the JSON string but got " + data['paymentType']);
        }
        // validate the optional field `amount`
        if (data['amount']) { // data not null
          Amount.validateJSON(data['amount']);
        }
        // ensure the json data is a string
        if (data['paymentMethodFamily'] && !(typeof data['paymentMethodFamily'] === 'string' || data['paymentMethodFamily'] instanceof String)) {
            throw new Error("Expected the field `paymentMethodFamily` to be a primitive type in the JSON string but got " + data['paymentMethodFamily']);
        }
        // ensure the json data is a string
        if (data['paymentMethodType'] && !(typeof data['paymentMethodType'] === 'string' || data['paymentMethodType'] instanceof String)) {
            throw new Error("Expected the field `paymentMethodType` to be a primitive type in the JSON string but got " + data['paymentMethodType']);
        }

        return true;
    }


}



/**
 * The type of payment.
 * @member {String} paymentType
 */
PaymentProperties.prototype['paymentType'] = undefined;

/**
 * @member {module:model/Amount} amount
 */
PaymentProperties.prototype['amount'] = undefined;

/**
 * The date when the payment was made.
 * @member {Date} date
 */
PaymentProperties.prototype['date'] = undefined;

/**
 * The family of payment method.
 * @member {module:model/PaymentProperties.PaymentMethodFamilyEnum} paymentMethodFamily
 */
PaymentProperties.prototype['paymentMethodFamily'] = undefined;

/**
 * The type of payment method.
 * @member {String} paymentMethodType
 */
PaymentProperties.prototype['paymentMethodType'] = undefined;





/**
 * Allowed values for the <code>paymentMethodFamily</code> property.
 * @enum {String}
 * @readonly
 */
PaymentProperties['PaymentMethodFamilyEnum'] = {

    /**
     * value: "Credits"
     * @const
     */
    "Credits": "Credits",

    /**
     * value: "CheckWire"
     * @const
     */
    "CheckWire": "CheckWire",

    /**
     * value: "CreditCard"
     * @const
     */
    "CreditCard": "CreditCard",

    /**
     * value: "None"
     * @const
     */
    "None": "None"
};



export default PaymentProperties;

