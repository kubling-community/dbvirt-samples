/**
 * BillingManagementClient
 * Billing client provides access to billing resources for Azure subscriptions.
 *
 * The version of the OpenAPI document: 2020-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../../BaseApiClient";

/**
 * The Document model module.
 * @module model/Document
 * @version 2020-05-01
 */
class Document {
    /**
     * Constructs a new <code>Document</code>.
     * The properties of a document.
     * @alias module:model/Document
     */
    constructor() { 
        
        Document.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Document</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Document} obj Optional instance to populate.
     * @return {module:model/Document} The populated <code>Document</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Document();

            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Document</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Document</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }

        return true;
    }


}



/**
 * The type of the document.
 * @member {module:model/Document.KindEnum} kind
 */
Document.prototype['kind'] = undefined;

/**
 * Document URL.
 * @member {String} url
 */
Document.prototype['url'] = undefined;

/**
 * The source of the document. ENF for Brazil and DRS for rest of the world.
 * @member {module:model/Document.SourceEnum} source
 */
Document.prototype['source'] = undefined;





/**
 * Allowed values for the <code>kind</code> property.
 * @enum {String}
 * @readonly
 */
Document['KindEnum'] = {

    /**
     * value: "Invoice"
     * @const
     */
    "Invoice": "Invoice",

    /**
     * value: "VoidNote"
     * @const
     */
    "VoidNote": "VoidNote",

    /**
     * value: "TaxReceipt"
     * @const
     */
    "TaxReceipt": "TaxReceipt",

    /**
     * value: "CreditNote"
     * @const
     */
    "CreditNote": "CreditNote"
};


/**
 * Allowed values for the <code>source</code> property.
 * @enum {String}
 * @readonly
 */
Document['SourceEnum'] = {

    /**
     * value: "DRS"
     * @const
     */
    "DRS": "DRS",

    /**
     * value: "ENF"
     * @const
     */
    "ENF": "ENF"
};



export default Document;

