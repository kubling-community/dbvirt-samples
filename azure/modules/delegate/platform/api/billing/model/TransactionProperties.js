/**
 * BillingManagementClient
 * Billing client provides access to billing resources for Azure subscriptions.
 *
 * The version of the OpenAPI document: 2020-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../../BaseApiClient";
import Amount from './Amount';

/**
 * The TransactionProperties model module.
 * @module model/TransactionProperties
 * @version 2020-05-01
 */
class TransactionProperties {
    /**
     * Constructs a new <code>TransactionProperties</code>.
     * The properties of a transaction.
     * @alias module:model/TransactionProperties
     */
    constructor() { 
        
        TransactionProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TransactionProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransactionProperties} obj Optional instance to populate.
     * @return {module:model/TransactionProperties} The populated <code>TransactionProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransactionProperties();

            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
            if (data.hasOwnProperty('invoice')) {
                obj['invoice'] = ApiClient.convertToType(data['invoice'], 'String');
            }
            if (data.hasOwnProperty('invoiceId')) {
                obj['invoiceId'] = ApiClient.convertToType(data['invoiceId'], 'String');
            }
            if (data.hasOwnProperty('orderId')) {
                obj['orderId'] = ApiClient.convertToType(data['orderId'], 'String');
            }
            if (data.hasOwnProperty('orderName')) {
                obj['orderName'] = ApiClient.convertToType(data['orderName'], 'String');
            }
            if (data.hasOwnProperty('productFamily')) {
                obj['productFamily'] = ApiClient.convertToType(data['productFamily'], 'String');
            }
            if (data.hasOwnProperty('productTypeId')) {
                obj['productTypeId'] = ApiClient.convertToType(data['productTypeId'], 'String');
            }
            if (data.hasOwnProperty('productType')) {
                obj['productType'] = ApiClient.convertToType(data['productType'], 'String');
            }
            if (data.hasOwnProperty('productDescription')) {
                obj['productDescription'] = ApiClient.convertToType(data['productDescription'], 'String');
            }
            if (data.hasOwnProperty('transactionType')) {
                obj['transactionType'] = ApiClient.convertToType(data['transactionType'], 'String');
            }
            if (data.hasOwnProperty('transactionAmount')) {
                obj['transactionAmount'] = Amount.constructFromObject(data['transactionAmount']);
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('invoiceSectionId')) {
                obj['invoiceSectionId'] = ApiClient.convertToType(data['invoiceSectionId'], 'String');
            }
            if (data.hasOwnProperty('invoiceSectionDisplayName')) {
                obj['invoiceSectionDisplayName'] = ApiClient.convertToType(data['invoiceSectionDisplayName'], 'String');
            }
            if (data.hasOwnProperty('billingProfileId')) {
                obj['billingProfileId'] = ApiClient.convertToType(data['billingProfileId'], 'String');
            }
            if (data.hasOwnProperty('billingProfileDisplayName')) {
                obj['billingProfileDisplayName'] = ApiClient.convertToType(data['billingProfileDisplayName'], 'String');
            }
            if (data.hasOwnProperty('customerId')) {
                obj['customerId'] = ApiClient.convertToType(data['customerId'], 'String');
            }
            if (data.hasOwnProperty('customerDisplayName')) {
                obj['customerDisplayName'] = ApiClient.convertToType(data['customerDisplayName'], 'String');
            }
            if (data.hasOwnProperty('subscriptionId')) {
                obj['subscriptionId'] = ApiClient.convertToType(data['subscriptionId'], 'String');
            }
            if (data.hasOwnProperty('subscriptionName')) {
                obj['subscriptionName'] = ApiClient.convertToType(data['subscriptionName'], 'String');
            }
            if (data.hasOwnProperty('azurePlan')) {
                obj['azurePlan'] = ApiClient.convertToType(data['azurePlan'], 'String');
            }
            if (data.hasOwnProperty('azureCreditApplied')) {
                obj['azureCreditApplied'] = Amount.constructFromObject(data['azureCreditApplied']);
            }
            if (data.hasOwnProperty('billingCurrency')) {
                obj['billingCurrency'] = ApiClient.convertToType(data['billingCurrency'], 'String');
            }
            if (data.hasOwnProperty('discount')) {
                obj['discount'] = ApiClient.convertToType(data['discount'], 'Number');
            }
            if (data.hasOwnProperty('effectivePrice')) {
                obj['effectivePrice'] = Amount.constructFromObject(data['effectivePrice']);
            }
            if (data.hasOwnProperty('exchangeRate')) {
                obj['exchangeRate'] = ApiClient.convertToType(data['exchangeRate'], 'Number');
            }
            if (data.hasOwnProperty('marketPrice')) {
                obj['marketPrice'] = Amount.constructFromObject(data['marketPrice']);
            }
            if (data.hasOwnProperty('pricingCurrency')) {
                obj['pricingCurrency'] = ApiClient.convertToType(data['pricingCurrency'], 'String');
            }
            if (data.hasOwnProperty('servicePeriodStartDate')) {
                obj['servicePeriodStartDate'] = ApiClient.convertToType(data['servicePeriodStartDate'], 'Date');
            }
            if (data.hasOwnProperty('servicePeriodEndDate')) {
                obj['servicePeriodEndDate'] = ApiClient.convertToType(data['servicePeriodEndDate'], 'Date');
            }
            if (data.hasOwnProperty('subTotal')) {
                obj['subTotal'] = Amount.constructFromObject(data['subTotal']);
            }
            if (data.hasOwnProperty('tax')) {
                obj['tax'] = Amount.constructFromObject(data['tax']);
            }
            if (data.hasOwnProperty('unitOfMeasure')) {
                obj['unitOfMeasure'] = ApiClient.convertToType(data['unitOfMeasure'], 'String');
            }
            if (data.hasOwnProperty('units')) {
                obj['units'] = ApiClient.convertToType(data['units'], 'Number');
            }
            if (data.hasOwnProperty('unitType')) {
                obj['unitType'] = ApiClient.convertToType(data['unitType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransactionProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransactionProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['invoice'] && !(typeof data['invoice'] === 'string' || data['invoice'] instanceof String)) {
            throw new Error("Expected the field `invoice` to be a primitive type in the JSON string but got " + data['invoice']);
        }
        // ensure the json data is a string
        if (data['invoiceId'] && !(typeof data['invoiceId'] === 'string' || data['invoiceId'] instanceof String)) {
            throw new Error("Expected the field `invoiceId` to be a primitive type in the JSON string but got " + data['invoiceId']);
        }
        // ensure the json data is a string
        if (data['orderId'] && !(typeof data['orderId'] === 'string' || data['orderId'] instanceof String)) {
            throw new Error("Expected the field `orderId` to be a primitive type in the JSON string but got " + data['orderId']);
        }
        // ensure the json data is a string
        if (data['orderName'] && !(typeof data['orderName'] === 'string' || data['orderName'] instanceof String)) {
            throw new Error("Expected the field `orderName` to be a primitive type in the JSON string but got " + data['orderName']);
        }
        // ensure the json data is a string
        if (data['productFamily'] && !(typeof data['productFamily'] === 'string' || data['productFamily'] instanceof String)) {
            throw new Error("Expected the field `productFamily` to be a primitive type in the JSON string but got " + data['productFamily']);
        }
        // ensure the json data is a string
        if (data['productTypeId'] && !(typeof data['productTypeId'] === 'string' || data['productTypeId'] instanceof String)) {
            throw new Error("Expected the field `productTypeId` to be a primitive type in the JSON string but got " + data['productTypeId']);
        }
        // ensure the json data is a string
        if (data['productType'] && !(typeof data['productType'] === 'string' || data['productType'] instanceof String)) {
            throw new Error("Expected the field `productType` to be a primitive type in the JSON string but got " + data['productType']);
        }
        // ensure the json data is a string
        if (data['productDescription'] && !(typeof data['productDescription'] === 'string' || data['productDescription'] instanceof String)) {
            throw new Error("Expected the field `productDescription` to be a primitive type in the JSON string but got " + data['productDescription']);
        }
        // ensure the json data is a string
        if (data['transactionType'] && !(typeof data['transactionType'] === 'string' || data['transactionType'] instanceof String)) {
            throw new Error("Expected the field `transactionType` to be a primitive type in the JSON string but got " + data['transactionType']);
        }
        // validate the optional field `transactionAmount`
        if (data['transactionAmount']) { // data not null
          Amount.validateJSON(data['transactionAmount']);
        }
        // ensure the json data is a string
        if (data['invoiceSectionId'] && !(typeof data['invoiceSectionId'] === 'string' || data['invoiceSectionId'] instanceof String)) {
            throw new Error("Expected the field `invoiceSectionId` to be a primitive type in the JSON string but got " + data['invoiceSectionId']);
        }
        // ensure the json data is a string
        if (data['invoiceSectionDisplayName'] && !(typeof data['invoiceSectionDisplayName'] === 'string' || data['invoiceSectionDisplayName'] instanceof String)) {
            throw new Error("Expected the field `invoiceSectionDisplayName` to be a primitive type in the JSON string but got " + data['invoiceSectionDisplayName']);
        }
        // ensure the json data is a string
        if (data['billingProfileId'] && !(typeof data['billingProfileId'] === 'string' || data['billingProfileId'] instanceof String)) {
            throw new Error("Expected the field `billingProfileId` to be a primitive type in the JSON string but got " + data['billingProfileId']);
        }
        // ensure the json data is a string
        if (data['billingProfileDisplayName'] && !(typeof data['billingProfileDisplayName'] === 'string' || data['billingProfileDisplayName'] instanceof String)) {
            throw new Error("Expected the field `billingProfileDisplayName` to be a primitive type in the JSON string but got " + data['billingProfileDisplayName']);
        }
        // ensure the json data is a string
        if (data['customerId'] && !(typeof data['customerId'] === 'string' || data['customerId'] instanceof String)) {
            throw new Error("Expected the field `customerId` to be a primitive type in the JSON string but got " + data['customerId']);
        }
        // ensure the json data is a string
        if (data['customerDisplayName'] && !(typeof data['customerDisplayName'] === 'string' || data['customerDisplayName'] instanceof String)) {
            throw new Error("Expected the field `customerDisplayName` to be a primitive type in the JSON string but got " + data['customerDisplayName']);
        }
        // ensure the json data is a string
        if (data['subscriptionId'] && !(typeof data['subscriptionId'] === 'string' || data['subscriptionId'] instanceof String)) {
            throw new Error("Expected the field `subscriptionId` to be a primitive type in the JSON string but got " + data['subscriptionId']);
        }
        // ensure the json data is a string
        if (data['subscriptionName'] && !(typeof data['subscriptionName'] === 'string' || data['subscriptionName'] instanceof String)) {
            throw new Error("Expected the field `subscriptionName` to be a primitive type in the JSON string but got " + data['subscriptionName']);
        }
        // ensure the json data is a string
        if (data['azurePlan'] && !(typeof data['azurePlan'] === 'string' || data['azurePlan'] instanceof String)) {
            throw new Error("Expected the field `azurePlan` to be a primitive type in the JSON string but got " + data['azurePlan']);
        }
        // validate the optional field `azureCreditApplied`
        if (data['azureCreditApplied']) { // data not null
          Amount.validateJSON(data['azureCreditApplied']);
        }
        // ensure the json data is a string
        if (data['billingCurrency'] && !(typeof data['billingCurrency'] === 'string' || data['billingCurrency'] instanceof String)) {
            throw new Error("Expected the field `billingCurrency` to be a primitive type in the JSON string but got " + data['billingCurrency']);
        }
        // validate the optional field `effectivePrice`
        if (data['effectivePrice']) { // data not null
          Amount.validateJSON(data['effectivePrice']);
        }
        // validate the optional field `marketPrice`
        if (data['marketPrice']) { // data not null
          Amount.validateJSON(data['marketPrice']);
        }
        // ensure the json data is a string
        if (data['pricingCurrency'] && !(typeof data['pricingCurrency'] === 'string' || data['pricingCurrency'] instanceof String)) {
            throw new Error("Expected the field `pricingCurrency` to be a primitive type in the JSON string but got " + data['pricingCurrency']);
        }
        // validate the optional field `subTotal`
        if (data['subTotal']) { // data not null
          Amount.validateJSON(data['subTotal']);
        }
        // validate the optional field `tax`
        if (data['tax']) { // data not null
          Amount.validateJSON(data['tax']);
        }
        // ensure the json data is a string
        if (data['unitOfMeasure'] && !(typeof data['unitOfMeasure'] === 'string' || data['unitOfMeasure'] instanceof String)) {
            throw new Error("Expected the field `unitOfMeasure` to be a primitive type in the JSON string but got " + data['unitOfMeasure']);
        }
        // ensure the json data is a string
        if (data['unitType'] && !(typeof data['unitType'] === 'string' || data['unitType'] instanceof String)) {
            throw new Error("Expected the field `unitType` to be a primitive type in the JSON string but got " + data['unitType']);
        }

        return true;
    }


}



/**
 * The kind of transaction. Options are all or reservation.
 * @member {module:model/TransactionProperties.KindEnum} kind
 */
TransactionProperties.prototype['kind'] = undefined;

/**
 * The date of transaction.
 * @member {Date} date
 */
TransactionProperties.prototype['date'] = undefined;

/**
 * Invoice on which the transaction was billed or 'pending' if the transaction is not billed.
 * @member {String} invoice
 */
TransactionProperties.prototype['invoice'] = undefined;

/**
 * The ID of the invoice on which the transaction was billed. This field is only applicable for transactions which are billed.
 * @member {String} invoiceId
 */
TransactionProperties.prototype['invoiceId'] = undefined;

/**
 * The order ID of the reservation. The field is only applicable for transaction of kind reservation.
 * @member {String} orderId
 */
TransactionProperties.prototype['orderId'] = undefined;

/**
 * The name of the reservation order. The field is only applicable for transactions of kind reservation.
 * @member {String} orderName
 */
TransactionProperties.prototype['orderName'] = undefined;

/**
 * The family of the product for which the transaction took place.
 * @member {String} productFamily
 */
TransactionProperties.prototype['productFamily'] = undefined;

/**
 * The ID of the product type for which the transaction took place.
 * @member {String} productTypeId
 */
TransactionProperties.prototype['productTypeId'] = undefined;

/**
 * The type of the product for which the transaction took place.
 * @member {String} productType
 */
TransactionProperties.prototype['productType'] = undefined;

/**
 * The description of the product for which the transaction took place.
 * @member {String} productDescription
 */
TransactionProperties.prototype['productDescription'] = undefined;

/**
 * The type of transaction.
 * @member {module:model/TransactionProperties.TransactionTypeEnum} transactionType
 */
TransactionProperties.prototype['transactionType'] = undefined;

/**
 * @member {module:model/Amount} transactionAmount
 */
TransactionProperties.prototype['transactionAmount'] = undefined;

/**
 * The quantity purchased in the transaction.
 * @member {Number} quantity
 */
TransactionProperties.prototype['quantity'] = undefined;

/**
 * The ID of the invoice section which will be billed for the transaction.
 * @member {String} invoiceSectionId
 */
TransactionProperties.prototype['invoiceSectionId'] = undefined;

/**
 * The name of the invoice section which will be billed for the transaction.
 * @member {String} invoiceSectionDisplayName
 */
TransactionProperties.prototype['invoiceSectionDisplayName'] = undefined;

/**
 * The ID of the billing profile which will be billed for the transaction.
 * @member {String} billingProfileId
 */
TransactionProperties.prototype['billingProfileId'] = undefined;

/**
 * The name of the billing profile which will be billed for the transaction.
 * @member {String} billingProfileDisplayName
 */
TransactionProperties.prototype['billingProfileDisplayName'] = undefined;

/**
 * The ID of the customer for which the transaction took place. The field is applicable only for Microsoft Partner Agreement billing account.
 * @member {String} customerId
 */
TransactionProperties.prototype['customerId'] = undefined;

/**
 * The name of the customer for which the transaction took place. The field is applicable only for Microsoft Partner Agreement billing account.
 * @member {String} customerDisplayName
 */
TransactionProperties.prototype['customerDisplayName'] = undefined;

/**
 * The ID of the subscription that was used for the transaction. The field is only applicable for transaction of kind reservation.
 * @member {String} subscriptionId
 */
TransactionProperties.prototype['subscriptionId'] = undefined;

/**
 * The name of the subscription that was used for the transaction. The field is only applicable for transaction of kind reservation.
 * @member {String} subscriptionName
 */
TransactionProperties.prototype['subscriptionName'] = undefined;

/**
 * The type of azure plan of the subscription that was used for the transaction.
 * @member {String} azurePlan
 */
TransactionProperties.prototype['azurePlan'] = undefined;

/**
 * @member {module:model/Amount} azureCreditApplied
 */
TransactionProperties.prototype['azureCreditApplied'] = undefined;

/**
 * The ISO 4217 code for the currency in which this transaction is billed.
 * @member {String} billingCurrency
 */
TransactionProperties.prototype['billingCurrency'] = undefined;

/**
 * The percentage discount, if any, applied to this transaction.
 * @member {Number} discount
 */
TransactionProperties.prototype['discount'] = undefined;

/**
 * @member {module:model/Amount} effectivePrice
 */
TransactionProperties.prototype['effectivePrice'] = undefined;

/**
 * The exchange rate used to convert charged amount to billing currency, if applicable.
 * @member {Number} exchangeRate
 */
TransactionProperties.prototype['exchangeRate'] = undefined;

/**
 * @member {module:model/Amount} marketPrice
 */
TransactionProperties.prototype['marketPrice'] = undefined;

/**
 * The ISO 4217 code for the currency in which the product is priced.
 * @member {String} pricingCurrency
 */
TransactionProperties.prototype['pricingCurrency'] = undefined;

/**
 * The date of the purchase of the product, or the start date of the month in which usage started.
 * @member {Date} servicePeriodStartDate
 */
TransactionProperties.prototype['servicePeriodStartDate'] = undefined;

/**
 * The end date of the product term, or the end date of the month in which usage ended.
 * @member {Date} servicePeriodEndDate
 */
TransactionProperties.prototype['servicePeriodEndDate'] = undefined;

/**
 * @member {module:model/Amount} subTotal
 */
TransactionProperties.prototype['subTotal'] = undefined;

/**
 * @member {module:model/Amount} tax
 */
TransactionProperties.prototype['tax'] = undefined;

/**
 * The unit of measure used to bill for the product. For example, compute services are billed per hour.
 * @member {String} unitOfMeasure
 */
TransactionProperties.prototype['unitOfMeasure'] = undefined;

/**
 * The number of units used for a given product.
 * @member {Number} units
 */
TransactionProperties.prototype['units'] = undefined;

/**
 * The description for the unit of measure for a given product.
 * @member {String} unitType
 */
TransactionProperties.prototype['unitType'] = undefined;





/**
 * Allowed values for the <code>kind</code> property.
 * @enum {String}
 * @readonly
 */
TransactionProperties['KindEnum'] = {

    /**
     * value: "all"
     * @const
     */
    "all": "all",

    /**
     * value: "reservation"
     * @const
     */
    "reservation": "reservation"
};


/**
 * Allowed values for the <code>transactionType</code> property.
 * @enum {String}
 * @readonly
 */
TransactionProperties['TransactionTypeEnum'] = {

    /**
     * value: "Purchase"
     * @const
     */
    "Purchase": "Purchase",

    /**
     * value: "Usage Charge"
     * @const
     */
    "Usage Charge": "Usage Charge"
};



export default TransactionProperties;

