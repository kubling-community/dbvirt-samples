/**
 * BillingManagementClient
 * Billing client provides access to billing resources for Azure subscriptions.
 *
 * The version of the OpenAPI document: 2020-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../../BaseApiClient";
import Amount from './Amount';
import Reseller from './Reseller';

/**
 * The ProductProperties model module.
 * @module model/ProductProperties
 * @version 2020-05-01
 */
class ProductProperties {
    /**
     * Constructs a new <code>ProductProperties</code>.
     * The properties of a product.
     * @alias module:model/ProductProperties
     */
    constructor() { 
        
        ProductProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProductProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProductProperties} obj Optional instance to populate.
     * @return {module:model/ProductProperties} The populated <code>ProductProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProductProperties();

            if (data.hasOwnProperty('autoRenew')) {
                obj['autoRenew'] = ApiClient.convertToType(data['autoRenew'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('purchaseDate')) {
                obj['purchaseDate'] = ApiClient.convertToType(data['purchaseDate'], 'Date');
            }
            if (data.hasOwnProperty('productTypeId')) {
                obj['productTypeId'] = ApiClient.convertToType(data['productTypeId'], 'String');
            }
            if (data.hasOwnProperty('productType')) {
                obj['productType'] = ApiClient.convertToType(data['productType'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('endDate')) {
                obj['endDate'] = ApiClient.convertToType(data['endDate'], 'Date');
            }
            if (data.hasOwnProperty('billingFrequency')) {
                obj['billingFrequency'] = ApiClient.convertToType(data['billingFrequency'], 'String');
            }
            if (data.hasOwnProperty('lastCharge')) {
                obj['lastCharge'] = Amount.constructFromObject(data['lastCharge']);
            }
            if (data.hasOwnProperty('lastChargeDate')) {
                obj['lastChargeDate'] = ApiClient.convertToType(data['lastChargeDate'], 'Date');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('skuId')) {
                obj['skuId'] = ApiClient.convertToType(data['skuId'], 'String');
            }
            if (data.hasOwnProperty('skuDescription')) {
                obj['skuDescription'] = ApiClient.convertToType(data['skuDescription'], 'String');
            }
            if (data.hasOwnProperty('tenantId')) {
                obj['tenantId'] = ApiClient.convertToType(data['tenantId'], 'String');
            }
            if (data.hasOwnProperty('availabilityId')) {
                obj['availabilityId'] = ApiClient.convertToType(data['availabilityId'], 'String');
            }
            if (data.hasOwnProperty('invoiceSectionId')) {
                obj['invoiceSectionId'] = ApiClient.convertToType(data['invoiceSectionId'], 'String');
            }
            if (data.hasOwnProperty('invoiceSectionDisplayName')) {
                obj['invoiceSectionDisplayName'] = ApiClient.convertToType(data['invoiceSectionDisplayName'], 'String');
            }
            if (data.hasOwnProperty('billingProfileId')) {
                obj['billingProfileId'] = ApiClient.convertToType(data['billingProfileId'], 'String');
            }
            if (data.hasOwnProperty('billingProfileDisplayName')) {
                obj['billingProfileDisplayName'] = ApiClient.convertToType(data['billingProfileDisplayName'], 'String');
            }
            if (data.hasOwnProperty('customerId')) {
                obj['customerId'] = ApiClient.convertToType(data['customerId'], 'String');
            }
            if (data.hasOwnProperty('customerDisplayName')) {
                obj['customerDisplayName'] = ApiClient.convertToType(data['customerDisplayName'], 'String');
            }
            if (data.hasOwnProperty('reseller')) {
                obj['reseller'] = Reseller.constructFromObject(data['reseller']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProductProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProductProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['autoRenew'] && !(typeof data['autoRenew'] === 'string' || data['autoRenew'] instanceof String)) {
            throw new Error("Expected the field `autoRenew` to be a primitive type in the JSON string but got " + data['autoRenew']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['productTypeId'] && !(typeof data['productTypeId'] === 'string' || data['productTypeId'] instanceof String)) {
            throw new Error("Expected the field `productTypeId` to be a primitive type in the JSON string but got " + data['productTypeId']);
        }
        // ensure the json data is a string
        if (data['productType'] && !(typeof data['productType'] === 'string' || data['productType'] instanceof String)) {
            throw new Error("Expected the field `productType` to be a primitive type in the JSON string but got " + data['productType']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['billingFrequency'] && !(typeof data['billingFrequency'] === 'string' || data['billingFrequency'] instanceof String)) {
            throw new Error("Expected the field `billingFrequency` to be a primitive type in the JSON string but got " + data['billingFrequency']);
        }
        // validate the optional field `lastCharge`
        if (data['lastCharge']) { // data not null
          Amount.validateJSON(data['lastCharge']);
        }
        // ensure the json data is a string
        if (data['skuId'] && !(typeof data['skuId'] === 'string' || data['skuId'] instanceof String)) {
            throw new Error("Expected the field `skuId` to be a primitive type in the JSON string but got " + data['skuId']);
        }
        // ensure the json data is a string
        if (data['skuDescription'] && !(typeof data['skuDescription'] === 'string' || data['skuDescription'] instanceof String)) {
            throw new Error("Expected the field `skuDescription` to be a primitive type in the JSON string but got " + data['skuDescription']);
        }
        // ensure the json data is a string
        if (data['tenantId'] && !(typeof data['tenantId'] === 'string' || data['tenantId'] instanceof String)) {
            throw new Error("Expected the field `tenantId` to be a primitive type in the JSON string but got " + data['tenantId']);
        }
        // ensure the json data is a string
        if (data['availabilityId'] && !(typeof data['availabilityId'] === 'string' || data['availabilityId'] instanceof String)) {
            throw new Error("Expected the field `availabilityId` to be a primitive type in the JSON string but got " + data['availabilityId']);
        }
        // ensure the json data is a string
        if (data['invoiceSectionId'] && !(typeof data['invoiceSectionId'] === 'string' || data['invoiceSectionId'] instanceof String)) {
            throw new Error("Expected the field `invoiceSectionId` to be a primitive type in the JSON string but got " + data['invoiceSectionId']);
        }
        // ensure the json data is a string
        if (data['invoiceSectionDisplayName'] && !(typeof data['invoiceSectionDisplayName'] === 'string' || data['invoiceSectionDisplayName'] instanceof String)) {
            throw new Error("Expected the field `invoiceSectionDisplayName` to be a primitive type in the JSON string but got " + data['invoiceSectionDisplayName']);
        }
        // ensure the json data is a string
        if (data['billingProfileId'] && !(typeof data['billingProfileId'] === 'string' || data['billingProfileId'] instanceof String)) {
            throw new Error("Expected the field `billingProfileId` to be a primitive type in the JSON string but got " + data['billingProfileId']);
        }
        // ensure the json data is a string
        if (data['billingProfileDisplayName'] && !(typeof data['billingProfileDisplayName'] === 'string' || data['billingProfileDisplayName'] instanceof String)) {
            throw new Error("Expected the field `billingProfileDisplayName` to be a primitive type in the JSON string but got " + data['billingProfileDisplayName']);
        }
        // ensure the json data is a string
        if (data['customerId'] && !(typeof data['customerId'] === 'string' || data['customerId'] instanceof String)) {
            throw new Error("Expected the field `customerId` to be a primitive type in the JSON string but got " + data['customerId']);
        }
        // ensure the json data is a string
        if (data['customerDisplayName'] && !(typeof data['customerDisplayName'] === 'string' || data['customerDisplayName'] instanceof String)) {
            throw new Error("Expected the field `customerDisplayName` to be a primitive type in the JSON string but got " + data['customerDisplayName']);
        }
        // validate the optional field `reseller`
        if (data['reseller']) { // data not null
          Reseller.validateJSON(data['reseller']);
        }

        return true;
    }


}



/**
 * Indicates whether auto renewal is turned on or off for a product.
 * @member {module:model/ProductProperties.AutoRenewEnum} autoRenew
 */
ProductProperties.prototype['autoRenew'] = undefined;

/**
 * The display name of the product.
 * @member {String} displayName
 */
ProductProperties.prototype['displayName'] = undefined;

/**
 * The date when the product was purchased.
 * @member {Date} purchaseDate
 */
ProductProperties.prototype['purchaseDate'] = undefined;

/**
 * The ID of the type of product.
 * @member {String} productTypeId
 */
ProductProperties.prototype['productTypeId'] = undefined;

/**
 * The description of the type of product.
 * @member {String} productType
 */
ProductProperties.prototype['productType'] = undefined;

/**
 * The current status of the product.
 * @member {module:model/ProductProperties.StatusEnum} status
 */
ProductProperties.prototype['status'] = undefined;

/**
 * The date when the product will be renewed or canceled.
 * @member {Date} endDate
 */
ProductProperties.prototype['endDate'] = undefined;

/**
 * The frequency at which the product will be billed.
 * @member {module:model/ProductProperties.BillingFrequencyEnum} billingFrequency
 */
ProductProperties.prototype['billingFrequency'] = undefined;

/**
 * @member {module:model/Amount} lastCharge
 */
ProductProperties.prototype['lastCharge'] = undefined;

/**
 * The date of the last charge.
 * @member {Date} lastChargeDate
 */
ProductProperties.prototype['lastChargeDate'] = undefined;

/**
 * The quantity purchased for the product.
 * @member {Number} quantity
 */
ProductProperties.prototype['quantity'] = undefined;

/**
 * The sku ID of the product.
 * @member {String} skuId
 */
ProductProperties.prototype['skuId'] = undefined;

/**
 * The sku description of the product.
 * @member {String} skuDescription
 */
ProductProperties.prototype['skuDescription'] = undefined;

/**
 * The id of the tenant in which the product is used.
 * @member {String} tenantId
 */
ProductProperties.prototype['tenantId'] = undefined;

/**
 * The availability of the product.
 * @member {String} availabilityId
 */
ProductProperties.prototype['availabilityId'] = undefined;

/**
 * The ID of the invoice section to which the product is billed.
 * @member {String} invoiceSectionId
 */
ProductProperties.prototype['invoiceSectionId'] = undefined;

/**
 * The name of the invoice section to which the product is billed.
 * @member {String} invoiceSectionDisplayName
 */
ProductProperties.prototype['invoiceSectionDisplayName'] = undefined;

/**
 * The ID of the billing profile to which the product is billed.
 * @member {String} billingProfileId
 */
ProductProperties.prototype['billingProfileId'] = undefined;

/**
 * The name of the billing profile to which the product is billed.
 * @member {String} billingProfileDisplayName
 */
ProductProperties.prototype['billingProfileDisplayName'] = undefined;

/**
 * The ID of the customer for whom the product was purchased. The field is applicable only for Microsoft Partner Agreement billing account.
 * @member {String} customerId
 */
ProductProperties.prototype['customerId'] = undefined;

/**
 * The name of the customer for whom the product was purchased. The field is applicable only for Microsoft Partner Agreement billing account.
 * @member {String} customerDisplayName
 */
ProductProperties.prototype['customerDisplayName'] = undefined;

/**
 * @member {module:model/Reseller} reseller
 */
ProductProperties.prototype['reseller'] = undefined;





/**
 * Allowed values for the <code>autoRenew</code> property.
 * @enum {String}
 * @readonly
 */
ProductProperties['AutoRenewEnum'] = {

    /**
     * value: "Off"
     * @const
     */
    "Off": "Off",

    /**
     * value: "On"
     * @const
     */
    "On": "On"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
ProductProperties['StatusEnum'] = {

    /**
     * value: "Active"
     * @const
     */
    "Active": "Active",

    /**
     * value: "Inactive"
     * @const
     */
    "Inactive": "Inactive",

    /**
     * value: "PastDue"
     * @const
     */
    "PastDue": "PastDue",

    /**
     * value: "Expiring"
     * @const
     */
    "Expiring": "Expiring",

    /**
     * value: "Expired"
     * @const
     */
    "Expired": "Expired",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled",

    /**
     * value: "Cancelled"
     * @const
     */
    "Cancelled": "Cancelled",

    /**
     * value: "AutoRenew"
     * @const
     */
    "AutoRenew": "AutoRenew"
};


/**
 * Allowed values for the <code>billingFrequency</code> property.
 * @enum {String}
 * @readonly
 */
ProductProperties['BillingFrequencyEnum'] = {

    /**
     * value: "OneTime"
     * @const
     */
    "OneTime": "OneTime",

    /**
     * value: "Monthly"
     * @const
     */
    "Monthly": "Monthly",

    /**
     * value: "UsageBased"
     * @const
     */
    "UsageBased": "UsageBased"
};



export default ProductProperties;

