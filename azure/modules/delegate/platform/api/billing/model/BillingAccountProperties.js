/**
 * BillingManagementClient
 * Billing client provides access to billing resources for Azure subscriptions.
 *
 * The version of the OpenAPI document: 2020-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../../BaseApiClient";
import AddressDetails from './AddressDetails';
import BillingProfilesOnExpand from './BillingProfilesOnExpand';
import Department from './Department';
import Enrollment from './Enrollment';
import EnrollmentAccount from './EnrollmentAccount';

/**
 * The BillingAccountProperties model module.
 * @module model/BillingAccountProperties
 * @version 2020-05-01
 */
class BillingAccountProperties {
    /**
     * Constructs a new <code>BillingAccountProperties</code>.
     * The properties of the billing account.
     * @alias module:model/BillingAccountProperties
     */
    constructor() { 
        
        BillingAccountProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BillingAccountProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BillingAccountProperties} obj Optional instance to populate.
     * @return {module:model/BillingAccountProperties} The populated <code>BillingAccountProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BillingAccountProperties();

            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('soldTo')) {
                obj['soldTo'] = AddressDetails.constructFromObject(data['soldTo']);
            }
            if (data.hasOwnProperty('agreementType')) {
                obj['agreementType'] = ApiClient.convertToType(data['agreementType'], 'String');
            }
            if (data.hasOwnProperty('accountType')) {
                obj['accountType'] = ApiClient.convertToType(data['accountType'], 'String');
            }
            if (data.hasOwnProperty('accountStatus')) {
                obj['accountStatus'] = ApiClient.convertToType(data['accountStatus'], 'String');
            }
            if (data.hasOwnProperty('billingProfiles')) {
                obj['billingProfiles'] = BillingProfilesOnExpand.constructFromObject(data['billingProfiles']);
            }
            if (data.hasOwnProperty('enrollmentDetails')) {
                obj['enrollmentDetails'] = Enrollment.constructFromObject(data['enrollmentDetails']);
            }
            if (data.hasOwnProperty('departments')) {
                obj['departments'] = ApiClient.convertToType(data['departments'], [Department]);
            }
            if (data.hasOwnProperty('enrollmentAccounts')) {
                obj['enrollmentAccounts'] = ApiClient.convertToType(data['enrollmentAccounts'], [EnrollmentAccount]);
            }
            if (data.hasOwnProperty('hasReadAccess')) {
                obj['hasReadAccess'] = ApiClient.convertToType(data['hasReadAccess'], 'Boolean');
            }
            if (data.hasOwnProperty('notificationEmailAddress')) {
                obj['notificationEmailAddress'] = ApiClient.convertToType(data['notificationEmailAddress'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BillingAccountProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BillingAccountProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // validate the optional field `soldTo`
        if (data['soldTo']) { // data not null
          AddressDetails.validateJSON(data['soldTo']);
        }
        // ensure the json data is a string
        if (data['agreementType'] && !(typeof data['agreementType'] === 'string' || data['agreementType'] instanceof String)) {
            throw new Error("Expected the field `agreementType` to be a primitive type in the JSON string but got " + data['agreementType']);
        }
        // ensure the json data is a string
        if (data['accountType'] && !(typeof data['accountType'] === 'string' || data['accountType'] instanceof String)) {
            throw new Error("Expected the field `accountType` to be a primitive type in the JSON string but got " + data['accountType']);
        }
        // ensure the json data is a string
        if (data['accountStatus'] && !(typeof data['accountStatus'] === 'string' || data['accountStatus'] instanceof String)) {
            throw new Error("Expected the field `accountStatus` to be a primitive type in the JSON string but got " + data['accountStatus']);
        }
        // validate the optional field `billingProfiles`
        if (data['billingProfiles']) { // data not null
          BillingProfilesOnExpand.validateJSON(data['billingProfiles']);
        }
        // validate the optional field `enrollmentDetails`
        if (data['enrollmentDetails']) { // data not null
          Enrollment.validateJSON(data['enrollmentDetails']);
        }
        if (data['departments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['departments'])) {
                throw new Error("Expected the field `departments` to be an array in the JSON data but got " + data['departments']);
            }
            // validate the optional field `departments` (array)
            for (const item of data['departments']) {
                Department.validateJSON(item);
            };
        }
        if (data['enrollmentAccounts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['enrollmentAccounts'])) {
                throw new Error("Expected the field `enrollmentAccounts` to be an array in the JSON data but got " + data['enrollmentAccounts']);
            }
            // validate the optional field `enrollmentAccounts` (array)
            for (const item of data['enrollmentAccounts']) {
                EnrollmentAccount.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['notificationEmailAddress'] && !(typeof data['notificationEmailAddress'] === 'string' || data['notificationEmailAddress'] instanceof String)) {
            throw new Error("Expected the field `notificationEmailAddress` to be a primitive type in the JSON string but got " + data['notificationEmailAddress']);
        }

        return true;
    }


}



/**
 * The billing account name.
 * @member {String} displayName
 */
BillingAccountProperties.prototype['displayName'] = undefined;

/**
 * @member {module:model/AddressDetails} soldTo
 */
BillingAccountProperties.prototype['soldTo'] = undefined;

/**
 * The type of agreement.
 * @member {module:model/BillingAccountProperties.AgreementTypeEnum} agreementType
 */
BillingAccountProperties.prototype['agreementType'] = undefined;

/**
 * The type of customer.
 * @member {module:model/BillingAccountProperties.AccountTypeEnum} accountType
 */
BillingAccountProperties.prototype['accountType'] = undefined;

/**
 * The current status of the billing account.
 * @member {module:model/BillingAccountProperties.AccountStatusEnum} accountStatus
 */
BillingAccountProperties.prototype['accountStatus'] = undefined;

/**
 * @member {module:model/BillingProfilesOnExpand} billingProfiles
 */
BillingAccountProperties.prototype['billingProfiles'] = undefined;

/**
 * @member {module:model/Enrollment} enrollmentDetails
 */
BillingAccountProperties.prototype['enrollmentDetails'] = undefined;

/**
 * The departments associated to the enrollment.
 * @member {Array.<module:model/Department>} departments
 */
BillingAccountProperties.prototype['departments'] = undefined;

/**
 * The accounts associated to the enrollment.
 * @member {Array.<module:model/EnrollmentAccount>} enrollmentAccounts
 */
BillingAccountProperties.prototype['enrollmentAccounts'] = undefined;

/**
 * Indicates whether user has read access to the billing account.
 * @member {Boolean} hasReadAccess
 */
BillingAccountProperties.prototype['hasReadAccess'] = undefined;

/**
 * Notification email address, only for legacy accounts
 * @member {String} notificationEmailAddress
 */
BillingAccountProperties.prototype['notificationEmailAddress'] = undefined;





/**
 * Allowed values for the <code>agreementType</code> property.
 * @enum {String}
 * @readonly
 */
BillingAccountProperties['AgreementTypeEnum'] = {

    /**
     * value: "MicrosoftCustomerAgreement"
     * @const
     */
    "MicrosoftCustomerAgreement": "MicrosoftCustomerAgreement",

    /**
     * value: "EnterpriseAgreement"
     * @const
     */
    "EnterpriseAgreement": "EnterpriseAgreement",

    /**
     * value: "MicrosoftOnlineServicesProgram"
     * @const
     */
    "MicrosoftOnlineServicesProgram": "MicrosoftOnlineServicesProgram",

    /**
     * value: "MicrosoftPartnerAgreement"
     * @const
     */
    "MicrosoftPartnerAgreement": "MicrosoftPartnerAgreement"
};


/**
 * Allowed values for the <code>accountType</code> property.
 * @enum {String}
 * @readonly
 */
BillingAccountProperties['AccountTypeEnum'] = {

    /**
     * value: "Enterprise"
     * @const
     */
    "Enterprise": "Enterprise",

    /**
     * value: "Individual"
     * @const
     */
    "Individual": "Individual",

    /**
     * value: "Partner"
     * @const
     */
    "Partner": "Partner"
};


/**
 * Allowed values for the <code>accountStatus</code> property.
 * @enum {String}
 * @readonly
 */
BillingAccountProperties['AccountStatusEnum'] = {

    /**
     * value: "Active"
     * @const
     */
    "Active": "Active",

    /**
     * value: "Deleted"
     * @const
     */
    "Deleted": "Deleted",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled",

    /**
     * value: "Expired"
     * @const
     */
    "Expired": "Expired",

    /**
     * value: "Transferred"
     * @const
     */
    "Transferred": "Transferred",

    /**
     * value: "Extended"
     * @const
     */
    "Extended": "Extended",

    /**
     * value: "Terminated"
     * @const
     */
    "Terminated": "Terminated"
};



export default BillingAccountProperties;

