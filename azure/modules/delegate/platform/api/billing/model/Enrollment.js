/**
 * BillingManagementClient
 * Billing client provides access to billing resources for Azure subscriptions.
 *
 * The version of the OpenAPI document: 2020-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../../BaseApiClient";
import EnrollmentPolicies from './EnrollmentPolicies';

/**
 * The Enrollment model module.
 * @module model/Enrollment
 * @version 2020-05-01
 */
class Enrollment {
    /**
     * Constructs a new <code>Enrollment</code>.
     * The properties of an enrollment.
     * @alias module:model/Enrollment
     */
    constructor() { 
        
        Enrollment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Enrollment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Enrollment} obj Optional instance to populate.
     * @return {module:model/Enrollment} The populated <code>Enrollment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Enrollment();

            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'Date');
            }
            if (data.hasOwnProperty('endDate')) {
                obj['endDate'] = ApiClient.convertToType(data['endDate'], 'Date');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('channel')) {
                obj['channel'] = ApiClient.convertToType(data['channel'], 'String');
            }
            if (data.hasOwnProperty('policies')) {
                obj['policies'] = EnrollmentPolicies.constructFromObject(data['policies']);
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('countryCode')) {
                obj['countryCode'] = ApiClient.convertToType(data['countryCode'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('billingCycle')) {
                obj['billingCycle'] = ApiClient.convertToType(data['billingCycle'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Enrollment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Enrollment</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['channel'] && !(typeof data['channel'] === 'string' || data['channel'] instanceof String)) {
            throw new Error("Expected the field `channel` to be a primitive type in the JSON string but got " + data['channel']);
        }
        // validate the optional field `policies`
        if (data['policies']) { // data not null
          EnrollmentPolicies.validateJSON(data['policies']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['countryCode'] && !(typeof data['countryCode'] === 'string' || data['countryCode'] instanceof String)) {
            throw new Error("Expected the field `countryCode` to be a primitive type in the JSON string but got " + data['countryCode']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['billingCycle'] && !(typeof data['billingCycle'] === 'string' || data['billingCycle'] instanceof String)) {
            throw new Error("Expected the field `billingCycle` to be a primitive type in the JSON string but got " + data['billingCycle']);
        }

        return true;
    }


}



/**
 * The start date of the enrollment.
 * @member {Date} startDate
 */
Enrollment.prototype['startDate'] = undefined;

/**
 * The end date of the enrollment.
 * @member {Date} endDate
 */
Enrollment.prototype['endDate'] = undefined;

/**
 * The billing currency for the enrollment.
 * @member {String} currency
 */
Enrollment.prototype['currency'] = undefined;

/**
 * The channel type of the enrollment.
 * @member {String} channel
 */
Enrollment.prototype['channel'] = undefined;

/**
 * @member {module:model/EnrollmentPolicies} policies
 */
Enrollment.prototype['policies'] = undefined;

/**
 * The language for the enrollment.
 * @member {String} language
 */
Enrollment.prototype['language'] = undefined;

/**
 * The country code of the enrollment.
 * @member {String} countryCode
 */
Enrollment.prototype['countryCode'] = undefined;

/**
 * The current status of the enrollment.
 * @member {String} status
 */
Enrollment.prototype['status'] = undefined;

/**
 * The billing cycle for the enrollment.
 * @member {String} billingCycle
 */
Enrollment.prototype['billingCycle'] = undefined;






export default Enrollment;

