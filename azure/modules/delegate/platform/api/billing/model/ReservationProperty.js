/**
 * BillingManagementClient
 * Billing client provides access to billing resources for Azure subscriptions.
 *
 * The version of the OpenAPI document: 2020-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../../BaseApiClient";
import ReservationPropertyUtilization from './ReservationPropertyUtilization';

/**
 * The ReservationProperty model module.
 * @module model/ReservationProperty
 * @version 2020-05-01
 */
class ReservationProperty {
    /**
     * Constructs a new <code>ReservationProperty</code>.
     * The property of reservation object.
     * @alias module:model/ReservationProperty
     */
    constructor() { 
        
        ReservationProperty.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReservationProperty</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReservationProperty} obj Optional instance to populate.
     * @return {module:model/ReservationProperty} The populated <code>ReservationProperty</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReservationProperty();

            if (data.hasOwnProperty('appliedScopes')) {
                obj['appliedScopes'] = ApiClient.convertToType(data['appliedScopes'], ['String']);
            }
            if (data.hasOwnProperty('appliedScopeType')) {
                obj['appliedScopeType'] = ApiClient.convertToType(data['appliedScopeType'], 'String');
            }
            if (data.hasOwnProperty('reservedResourceType')) {
                obj['reservedResourceType'] = ApiClient.convertToType(data['reservedResourceType'], 'String');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('expiryDate')) {
                obj['expiryDate'] = ApiClient.convertToType(data['expiryDate'], 'String');
            }
            if (data.hasOwnProperty('provisioningSubState')) {
                obj['provisioningSubState'] = ApiClient.convertToType(data['provisioningSubState'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('displayProvisioningState')) {
                obj['displayProvisioningState'] = ApiClient.convertToType(data['displayProvisioningState'], 'String');
            }
            if (data.hasOwnProperty('userFriendlyRenewState')) {
                obj['userFriendlyRenewState'] = ApiClient.convertToType(data['userFriendlyRenewState'], 'String');
            }
            if (data.hasOwnProperty('userFriendlyAppliedScopeType')) {
                obj['userFriendlyAppliedScopeType'] = ApiClient.convertToType(data['userFriendlyAppliedScopeType'], 'String');
            }
            if (data.hasOwnProperty('effectiveDateTime')) {
                obj['effectiveDateTime'] = ApiClient.convertToType(data['effectiveDateTime'], 'String');
            }
            if (data.hasOwnProperty('skuDescription')) {
                obj['skuDescription'] = ApiClient.convertToType(data['skuDescription'], 'String');
            }
            if (data.hasOwnProperty('term')) {
                obj['term'] = ApiClient.convertToType(data['term'], 'String');
            }
            if (data.hasOwnProperty('renew')) {
                obj['renew'] = ApiClient.convertToType(data['renew'], 'Boolean');
            }
            if (data.hasOwnProperty('renewSource')) {
                obj['renewSource'] = ApiClient.convertToType(data['renewSource'], 'String');
            }
            if (data.hasOwnProperty('utilization')) {
                obj['utilization'] = ReservationPropertyUtilization.constructFromObject(data['utilization']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReservationProperty</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReservationProperty</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['appliedScopes'])) {
            throw new Error("Expected the field `appliedScopes` to be an array in the JSON data but got " + data['appliedScopes']);
        }
        // ensure the json data is a string
        if (data['appliedScopeType'] && !(typeof data['appliedScopeType'] === 'string' || data['appliedScopeType'] instanceof String)) {
            throw new Error("Expected the field `appliedScopeType` to be a primitive type in the JSON string but got " + data['appliedScopeType']);
        }
        // ensure the json data is a string
        if (data['reservedResourceType'] && !(typeof data['reservedResourceType'] === 'string' || data['reservedResourceType'] instanceof String)) {
            throw new Error("Expected the field `reservedResourceType` to be a primitive type in the JSON string but got " + data['reservedResourceType']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['expiryDate'] && !(typeof data['expiryDate'] === 'string' || data['expiryDate'] instanceof String)) {
            throw new Error("Expected the field `expiryDate` to be a primitive type in the JSON string but got " + data['expiryDate']);
        }
        // ensure the json data is a string
        if (data['provisioningSubState'] && !(typeof data['provisioningSubState'] === 'string' || data['provisioningSubState'] instanceof String)) {
            throw new Error("Expected the field `provisioningSubState` to be a primitive type in the JSON string but got " + data['provisioningSubState']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['displayProvisioningState'] && !(typeof data['displayProvisioningState'] === 'string' || data['displayProvisioningState'] instanceof String)) {
            throw new Error("Expected the field `displayProvisioningState` to be a primitive type in the JSON string but got " + data['displayProvisioningState']);
        }
        // ensure the json data is a string
        if (data['userFriendlyRenewState'] && !(typeof data['userFriendlyRenewState'] === 'string' || data['userFriendlyRenewState'] instanceof String)) {
            throw new Error("Expected the field `userFriendlyRenewState` to be a primitive type in the JSON string but got " + data['userFriendlyRenewState']);
        }
        // ensure the json data is a string
        if (data['userFriendlyAppliedScopeType'] && !(typeof data['userFriendlyAppliedScopeType'] === 'string' || data['userFriendlyAppliedScopeType'] instanceof String)) {
            throw new Error("Expected the field `userFriendlyAppliedScopeType` to be a primitive type in the JSON string but got " + data['userFriendlyAppliedScopeType']);
        }
        // ensure the json data is a string
        if (data['effectiveDateTime'] && !(typeof data['effectiveDateTime'] === 'string' || data['effectiveDateTime'] instanceof String)) {
            throw new Error("Expected the field `effectiveDateTime` to be a primitive type in the JSON string but got " + data['effectiveDateTime']);
        }
        // ensure the json data is a string
        if (data['skuDescription'] && !(typeof data['skuDescription'] === 'string' || data['skuDescription'] instanceof String)) {
            throw new Error("Expected the field `skuDescription` to be a primitive type in the JSON string but got " + data['skuDescription']);
        }
        // ensure the json data is a string
        if (data['term'] && !(typeof data['term'] === 'string' || data['term'] instanceof String)) {
            throw new Error("Expected the field `term` to be a primitive type in the JSON string but got " + data['term']);
        }
        // ensure the json data is a string
        if (data['renewSource'] && !(typeof data['renewSource'] === 'string' || data['renewSource'] instanceof String)) {
            throw new Error("Expected the field `renewSource` to be a primitive type in the JSON string but got " + data['renewSource']);
        }
        // validate the optional field `utilization`
        if (data['utilization']) { // data not null
          ReservationPropertyUtilization.validateJSON(data['utilization']);
        }

        return true;
    }


}



/**
 * The array of applied scopes of a reservation. Will be null if the reservation is in Shared scope
 * @member {Array.<String>} appliedScopes
 */
ReservationProperty.prototype['appliedScopes'] = undefined;

/**
 * The applied scope type of the reservation.
 * @member {String} appliedScopeType
 */
ReservationProperty.prototype['appliedScopeType'] = undefined;

/**
 * The reserved source type of the reservation, e.g. virtual machine.
 * @member {String} reservedResourceType
 */
ReservationProperty.prototype['reservedResourceType'] = undefined;

/**
 * The number of the reservation.
 * @member {Number} quantity
 */
ReservationProperty.prototype['quantity'] = undefined;

/**
 * The provisioning state of the reservation, e.g. Succeeded
 * @member {String} provisioningState
 */
ReservationProperty.prototype['provisioningState'] = undefined;

/**
 * The expiry date of the reservation
 * @member {String} expiryDate
 */
ReservationProperty.prototype['expiryDate'] = undefined;

/**
 * The provisioning state of the reservation, e.g. Succeeded
 * @member {String} provisioningSubState
 */
ReservationProperty.prototype['provisioningSubState'] = undefined;

/**
 * The display name of the reservation
 * @member {String} displayName
 */
ReservationProperty.prototype['displayName'] = undefined;

/**
 * The provisioning state of the reservation for display, e.g. Succeeded
 * @member {String} displayProvisioningState
 */
ReservationProperty.prototype['displayProvisioningState'] = undefined;

/**
 * The renew state of the reservation for display, e.g. On
 * @member {String} userFriendlyRenewState
 */
ReservationProperty.prototype['userFriendlyRenewState'] = undefined;

/**
 * The applied scope type of the reservation for display, e.g. Shared
 * @member {String} userFriendlyAppliedScopeType
 */
ReservationProperty.prototype['userFriendlyAppliedScopeType'] = undefined;

/**
 * The effective date time of the reservation
 * @member {String} effectiveDateTime
 */
ReservationProperty.prototype['effectiveDateTime'] = undefined;

/**
 * The sku description of the reservation
 * @member {String} skuDescription
 */
ReservationProperty.prototype['skuDescription'] = undefined;

/**
 * The term of the reservation, e.g. P1Y
 * @member {String} term
 */
ReservationProperty.prototype['term'] = undefined;

/**
 * The renew state of the reservation
 * @member {Boolean} renew
 */
ReservationProperty.prototype['renew'] = undefined;

/**
 * The renew source of the reservation
 * @member {String} renewSource
 */
ReservationProperty.prototype['renewSource'] = undefined;

/**
 * @member {module:model/ReservationPropertyUtilization} utilization
 */
ReservationProperty.prototype['utilization'] = undefined;






export default ReservationProperty;

