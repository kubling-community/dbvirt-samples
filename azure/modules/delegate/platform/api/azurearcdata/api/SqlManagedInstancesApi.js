/**
 * AzureArcDataManagementClient
 * The AzureArcData management API provides a RESTful set of web APIs to manage Azure Data Services on Azure Arc Resources.
 *
 * The version of the OpenAPI document: 2023-01-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import SqlManagedInstance from '../model/SqlManagedInstance';
import SqlManagedInstanceListResult from '../model/SqlManagedInstanceListResult';
import SqlManagedInstanceUpdate from '../model/SqlManagedInstanceUpdate';

/**
* SqlManagedInstances service.
* @module api/SqlManagedInstancesApi
* @version 2023-01-15-preview
*/
export default class SqlManagedInstancesApi {

    /**
    * Constructs a new SqlManagedInstancesApi. 
    * @alias module:api/SqlManagedInstancesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the sqlManagedInstancesCreate operation.
     * @callback module:api/SqlManagedInstancesApi~sqlManagedInstancesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SqlManagedInstance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or replaces a SQL Managed Instance resource
     * @param {String} subscriptionId The ID of the Azure subscription
     * @param {String} resourceGroupName The name of the Azure resource group
     * @param {String} sqlManagedInstanceName Name of SQL Managed Instance
     * @param {String} apiVersion The API version to use for the request
     * @param {module:model/SqlManagedInstance} sqlManagedInstance The SQL Managed Instance to be created or updated.
     * @param {module:api/SqlManagedInstancesApi~sqlManagedInstancesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SqlManagedInstance}
     */
    sqlManagedInstancesCreate(subscriptionId, resourceGroupName, sqlManagedInstanceName, apiVersion, sqlManagedInstance, callback) {
      let postBody = sqlManagedInstance;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sqlManagedInstancesCreate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sqlManagedInstancesCreate");
      }
      // verify the required parameter 'sqlManagedInstanceName' is set
      if (sqlManagedInstanceName === undefined || sqlManagedInstanceName === null) {
        throw new Error("Missing the required parameter 'sqlManagedInstanceName' when calling sqlManagedInstancesCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sqlManagedInstancesCreate");
      }
      // verify the required parameter 'sqlManagedInstance' is set
      if (sqlManagedInstance === undefined || sqlManagedInstance === null) {
        throw new Error("Missing the required parameter 'sqlManagedInstance' when calling sqlManagedInstancesCreate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'sqlManagedInstanceName': sqlManagedInstanceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SqlManagedInstance;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlManagedInstances/{sqlManagedInstanceName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sqlManagedInstancesDelete operation.
     * @callback module:api/SqlManagedInstancesApi~sqlManagedInstancesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a SQL Managed Instance resource
     * @param {String} subscriptionId The ID of the Azure subscription
     * @param {String} resourceGroupName The name of the Azure resource group
     * @param {String} sqlManagedInstanceName Name of SQL Managed Instance
     * @param {String} apiVersion The API version to use for the request
     * @param {module:api/SqlManagedInstancesApi~sqlManagedInstancesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sqlManagedInstancesDelete(subscriptionId, resourceGroupName, sqlManagedInstanceName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sqlManagedInstancesDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sqlManagedInstancesDelete");
      }
      // verify the required parameter 'sqlManagedInstanceName' is set
      if (sqlManagedInstanceName === undefined || sqlManagedInstanceName === null) {
        throw new Error("Missing the required parameter 'sqlManagedInstanceName' when calling sqlManagedInstancesDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sqlManagedInstancesDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'sqlManagedInstanceName': sqlManagedInstanceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlManagedInstances/{sqlManagedInstanceName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sqlManagedInstancesGet operation.
     * @callback module:api/SqlManagedInstancesApi~sqlManagedInstancesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SqlManagedInstance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a SQL Managed Instance resource
     * @param {String} subscriptionId The ID of the Azure subscription
     * @param {String} resourceGroupName The name of the Azure resource group
     * @param {String} sqlManagedInstanceName Name of SQL Managed Instance
     * @param {String} apiVersion The API version to use for the request
     * @param {module:api/SqlManagedInstancesApi~sqlManagedInstancesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SqlManagedInstance}
     */
    sqlManagedInstancesGet(subscriptionId, resourceGroupName, sqlManagedInstanceName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sqlManagedInstancesGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sqlManagedInstancesGet");
      }
      // verify the required parameter 'sqlManagedInstanceName' is set
      if (sqlManagedInstanceName === undefined || sqlManagedInstanceName === null) {
        throw new Error("Missing the required parameter 'sqlManagedInstanceName' when calling sqlManagedInstancesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sqlManagedInstancesGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'sqlManagedInstanceName': sqlManagedInstanceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SqlManagedInstance;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlManagedInstances/{sqlManagedInstanceName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sqlManagedInstancesList operation.
     * @callback module:api/SqlManagedInstancesApi~sqlManagedInstancesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SqlManagedInstanceListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List sqlManagedInstance resources in the subscription
     * @param {String} subscriptionId The ID of the Azure subscription
     * @param {String} apiVersion The API version to use for the request
     * @param {module:api/SqlManagedInstancesApi~sqlManagedInstancesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SqlManagedInstanceListResult}
     */
    sqlManagedInstancesList(subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sqlManagedInstancesList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sqlManagedInstancesList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SqlManagedInstanceListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.AzureArcData/sqlManagedInstances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sqlManagedInstancesListByResourceGroup operation.
     * @callback module:api/SqlManagedInstancesApi~sqlManagedInstancesListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SqlManagedInstanceListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List sqlManagedInstance resources in the resource group
     * Gets all sqlManagedInstances in a resource group.
     * @param {String} subscriptionId The ID of the Azure subscription
     * @param {String} resourceGroupName The name of the Azure resource group
     * @param {String} apiVersion The API version to use for the request
     * @param {module:api/SqlManagedInstancesApi~sqlManagedInstancesListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SqlManagedInstanceListResult}
     */
    sqlManagedInstancesListByResourceGroup(subscriptionId, resourceGroupName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sqlManagedInstancesListByResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sqlManagedInstancesListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sqlManagedInstancesListByResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SqlManagedInstanceListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlManagedInstances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sqlManagedInstancesUpdate operation.
     * @callback module:api/SqlManagedInstancesApi~sqlManagedInstancesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SqlManagedInstance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a SQL Managed Instance resource
     * @param {String} subscriptionId The ID of the Azure subscription
     * @param {String} resourceGroupName The name of the Azure resource group
     * @param {String} sqlManagedInstanceName Name of SQL Managed Instance
     * @param {String} apiVersion The API version to use for the request
     * @param {module:model/SqlManagedInstanceUpdate} sqlManagedInstanceUpdate The SQL Managed Instance.
     * @param {module:api/SqlManagedInstancesApi~sqlManagedInstancesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SqlManagedInstance}
     */
    sqlManagedInstancesUpdate(subscriptionId, resourceGroupName, sqlManagedInstanceName, apiVersion, sqlManagedInstanceUpdate, callback) {
      let postBody = sqlManagedInstanceUpdate;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sqlManagedInstancesUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sqlManagedInstancesUpdate");
      }
      // verify the required parameter 'sqlManagedInstanceName' is set
      if (sqlManagedInstanceName === undefined || sqlManagedInstanceName === null) {
        throw new Error("Missing the required parameter 'sqlManagedInstanceName' when calling sqlManagedInstancesUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sqlManagedInstancesUpdate");
      }
      // verify the required parameter 'sqlManagedInstanceUpdate' is set
      if (sqlManagedInstanceUpdate === undefined || sqlManagedInstanceUpdate === null) {
        throw new Error("Missing the required parameter 'sqlManagedInstanceUpdate' when calling sqlManagedInstancesUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'sqlManagedInstanceName': sqlManagedInstanceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SqlManagedInstance;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlManagedInstances/{sqlManagedInstanceName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
