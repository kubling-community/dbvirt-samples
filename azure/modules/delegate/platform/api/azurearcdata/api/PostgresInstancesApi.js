/**
 * AzureArcDataManagementClient
 * The AzureArcData management API provides a RESTful set of web APIs to manage Azure Data Services on Azure Arc Resources.
 *
 * The version of the OpenAPI document: 2023-01-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import PostgresInstance from '../model/PostgresInstance';
import PostgresInstanceListResult from '../model/PostgresInstanceListResult';
import PostgresInstanceUpdate from '../model/PostgresInstanceUpdate';

/**
* PostgresInstances service.
* @module api/PostgresInstancesApi
* @version 2023-01-15-preview
*/
export default class PostgresInstancesApi {

    /**
    * Constructs a new PostgresInstancesApi. 
    * @alias module:api/PostgresInstancesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the postgresInstancesCreate operation.
     * @callback module:api/PostgresInstancesApi~postgresInstancesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostgresInstance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or replaces a postgres Instance resource
     * @param {String} subscriptionId The ID of the Azure subscription
     * @param {String} resourceGroupName The name of the Azure resource group
     * @param {String} postgresInstanceName Name of Postgres Instance
     * @param {String} apiVersion The API version to use for the request
     * @param {module:model/PostgresInstance} postgresInstance The postgres instance
     * @param {module:api/PostgresInstancesApi~postgresInstancesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostgresInstance}
     */
    postgresInstancesCreate(subscriptionId, resourceGroupName, postgresInstanceName, apiVersion, postgresInstance, callback) {
      let postBody = postgresInstance;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling postgresInstancesCreate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling postgresInstancesCreate");
      }
      // verify the required parameter 'postgresInstanceName' is set
      if (postgresInstanceName === undefined || postgresInstanceName === null) {
        throw new Error("Missing the required parameter 'postgresInstanceName' when calling postgresInstancesCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling postgresInstancesCreate");
      }
      // verify the required parameter 'postgresInstance' is set
      if (postgresInstance === undefined || postgresInstance === null) {
        throw new Error("Missing the required parameter 'postgresInstance' when calling postgresInstancesCreate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'postgresInstanceName': postgresInstanceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PostgresInstance;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/postgresInstances/{postgresInstanceName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postgresInstancesDelete operation.
     * @callback module:api/PostgresInstancesApi~postgresInstancesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a postgres Instance resource
     * @param {String} subscriptionId The ID of the Azure subscription
     * @param {String} resourceGroupName The name of the Azure resource group
     * @param {String} postgresInstanceName Name of Postgres Instance
     * @param {String} apiVersion The API version to use for the request
     * @param {module:api/PostgresInstancesApi~postgresInstancesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postgresInstancesDelete(subscriptionId, resourceGroupName, postgresInstanceName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling postgresInstancesDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling postgresInstancesDelete");
      }
      // verify the required parameter 'postgresInstanceName' is set
      if (postgresInstanceName === undefined || postgresInstanceName === null) {
        throw new Error("Missing the required parameter 'postgresInstanceName' when calling postgresInstancesDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling postgresInstancesDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'postgresInstanceName': postgresInstanceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/postgresInstances/{postgresInstanceName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postgresInstancesGet operation.
     * @callback module:api/PostgresInstancesApi~postgresInstancesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostgresInstance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a postgres Instance resource
     * @param {String} subscriptionId The ID of the Azure subscription
     * @param {String} resourceGroupName The name of the Azure resource group
     * @param {String} postgresInstanceName Name of Postgres Instance
     * @param {String} apiVersion The API version to use for the request
     * @param {module:api/PostgresInstancesApi~postgresInstancesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostgresInstance}
     */
    postgresInstancesGet(subscriptionId, resourceGroupName, postgresInstanceName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling postgresInstancesGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling postgresInstancesGet");
      }
      // verify the required parameter 'postgresInstanceName' is set
      if (postgresInstanceName === undefined || postgresInstanceName === null) {
        throw new Error("Missing the required parameter 'postgresInstanceName' when calling postgresInstancesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling postgresInstancesGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'postgresInstanceName': postgresInstanceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PostgresInstance;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/postgresInstances/{postgresInstanceName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postgresInstancesList operation.
     * @callback module:api/PostgresInstancesApi~postgresInstancesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostgresInstanceListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List postgres Instance resources in the subscription
     * @param {String} subscriptionId The ID of the Azure subscription
     * @param {String} apiVersion The API version to use for the request
     * @param {module:api/PostgresInstancesApi~postgresInstancesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostgresInstanceListResult}
     */
    postgresInstancesList(subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling postgresInstancesList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling postgresInstancesList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PostgresInstanceListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.AzureArcData/postgresInstances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postgresInstancesListByResourceGroup operation.
     * @callback module:api/PostgresInstancesApi~postgresInstancesListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostgresInstanceListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List postgres Instance resources in the resource group
     * Get a postgres Instances list by Resource group name.
     * @param {String} subscriptionId The ID of the Azure subscription
     * @param {String} resourceGroupName The name of the Azure resource group
     * @param {String} apiVersion The API version to use for the request
     * @param {module:api/PostgresInstancesApi~postgresInstancesListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostgresInstanceListResult}
     */
    postgresInstancesListByResourceGroup(subscriptionId, resourceGroupName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling postgresInstancesListByResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling postgresInstancesListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling postgresInstancesListByResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PostgresInstanceListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/postgresInstances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postgresInstancesUpdate operation.
     * @callback module:api/PostgresInstancesApi~postgresInstancesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostgresInstance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a postgres Instance resource
     * @param {String} subscriptionId The ID of the Azure subscription
     * @param {String} resourceGroupName The name of the Azure resource group
     * @param {String} postgresInstanceName Name of Postgres Instance
     * @param {String} apiVersion The API version to use for the request
     * @param {module:model/PostgresInstanceUpdate} postgresInstanceUpdate The Postgres Instance.
     * @param {module:api/PostgresInstancesApi~postgresInstancesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostgresInstance}
     */
    postgresInstancesUpdate(subscriptionId, resourceGroupName, postgresInstanceName, apiVersion, postgresInstanceUpdate, callback) {
      let postBody = postgresInstanceUpdate;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling postgresInstancesUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling postgresInstancesUpdate");
      }
      // verify the required parameter 'postgresInstanceName' is set
      if (postgresInstanceName === undefined || postgresInstanceName === null) {
        throw new Error("Missing the required parameter 'postgresInstanceName' when calling postgresInstancesUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling postgresInstancesUpdate");
      }
      // verify the required parameter 'postgresInstanceUpdate' is set
      if (postgresInstanceUpdate === undefined || postgresInstanceUpdate === null) {
        throw new Error("Missing the required parameter 'postgresInstanceUpdate' when calling postgresInstancesUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'postgresInstanceName': postgresInstanceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PostgresInstance;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/postgresInstances/{postgresInstanceName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
