/**
 * AzureArcDataManagementClient
 * The AzureArcData management API provides a RESTful set of web APIs to manage Azure Data Services on Azure Arc Resources.
 *
 * The version of the OpenAPI document: 2023-01-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DataControllerResource from '../model/DataControllerResource';
import DataControllerUpdate from '../model/DataControllerUpdate';
import ErrorResponse from '../model/ErrorResponse';
import PageOfDataControllerResource from '../model/PageOfDataControllerResource';

/**
* DataControllers service.
* @module api/DataControllersApi
* @version 2023-01-15-preview
*/
export default class DataControllersApi {

    /**
    * Constructs a new DataControllersApi. 
    * @alias module:api/DataControllersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the dataControllersDeleteDataController operation.
     * @callback module:api/DataControllersApi~dataControllersDeleteDataControllerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a dataController resource
     * @param {String} subscriptionId The ID of the Azure subscription
     * @param {String} resourceGroupName The name of the Azure resource group
     * @param {String} dataControllerName The name of the data controller
     * @param {String} apiVersion The API version to use for the request
     * @param {module:api/DataControllersApi~dataControllersDeleteDataControllerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dataControllersDeleteDataController(subscriptionId, resourceGroupName, dataControllerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dataControllersDeleteDataController");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dataControllersDeleteDataController");
      }
      // verify the required parameter 'dataControllerName' is set
      if (dataControllerName === undefined || dataControllerName === null) {
        throw new Error("Missing the required parameter 'dataControllerName' when calling dataControllersDeleteDataController");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dataControllersDeleteDataController");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'dataControllerName': dataControllerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/dataControllers/{dataControllerName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataControllersGetDataController operation.
     * @callback module:api/DataControllersApi~dataControllersGetDataControllerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataControllerResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a dataController resource
     * @param {String} subscriptionId The ID of the Azure subscription
     * @param {String} resourceGroupName The name of the Azure resource group
     * @param {String} dataControllerName The name of the data controller
     * @param {String} apiVersion The API version to use for the request
     * @param {module:api/DataControllersApi~dataControllersGetDataControllerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataControllerResource}
     */
    dataControllersGetDataController(subscriptionId, resourceGroupName, dataControllerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dataControllersGetDataController");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dataControllersGetDataController");
      }
      // verify the required parameter 'dataControllerName' is set
      if (dataControllerName === undefined || dataControllerName === null) {
        throw new Error("Missing the required parameter 'dataControllerName' when calling dataControllersGetDataController");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dataControllersGetDataController");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'dataControllerName': dataControllerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DataControllerResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/dataControllers/{dataControllerName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataControllersListInGroup operation.
     * @callback module:api/DataControllersApi~dataControllersListInGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageOfDataControllerResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List dataController resources in the resource group
     * @param {String} subscriptionId The ID of the Azure subscription
     * @param {String} resourceGroupName The name of the Azure resource group
     * @param {String} apiVersion The API version to use for the request
     * @param {module:api/DataControllersApi~dataControllersListInGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageOfDataControllerResource}
     */
    dataControllersListInGroup(subscriptionId, resourceGroupName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dataControllersListInGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dataControllersListInGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dataControllersListInGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageOfDataControllerResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/dataControllers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataControllersListInSubscription operation.
     * @callback module:api/DataControllersApi~dataControllersListInSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageOfDataControllerResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List dataController resources in the subscription
     * @param {String} subscriptionId The ID of the Azure subscription
     * @param {String} apiVersion The API version to use for the request
     * @param {module:api/DataControllersApi~dataControllersListInSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageOfDataControllerResource}
     */
    dataControllersListInSubscription(subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dataControllersListInSubscription");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dataControllersListInSubscription");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageOfDataControllerResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.AzureArcData/dataControllers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataControllersPatchDataController operation.
     * @callback module:api/DataControllersApi~dataControllersPatchDataControllerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataControllerResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a dataController resource
     * @param {String} subscriptionId The ID of the Azure subscription
     * @param {String} resourceGroupName The name of the Azure resource group
     * @param {String} dataControllerName The name of the data controller
     * @param {String} apiVersion The API version to use for the request
     * @param {module:model/DataControllerUpdate} dataControllerUpdate The update data controller resource
     * @param {module:api/DataControllersApi~dataControllersPatchDataControllerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataControllerResource}
     */
    dataControllersPatchDataController(subscriptionId, resourceGroupName, dataControllerName, apiVersion, dataControllerUpdate, callback) {
      let postBody = dataControllerUpdate;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dataControllersPatchDataController");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dataControllersPatchDataController");
      }
      // verify the required parameter 'dataControllerName' is set
      if (dataControllerName === undefined || dataControllerName === null) {
        throw new Error("Missing the required parameter 'dataControllerName' when calling dataControllersPatchDataController");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dataControllersPatchDataController");
      }
      // verify the required parameter 'dataControllerUpdate' is set
      if (dataControllerUpdate === undefined || dataControllerUpdate === null) {
        throw new Error("Missing the required parameter 'dataControllerUpdate' when calling dataControllersPatchDataController");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'dataControllerName': dataControllerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DataControllerResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/dataControllers/{dataControllerName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataControllersPutDataController operation.
     * @callback module:api/DataControllersApi~dataControllersPutDataControllerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataControllerResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or replaces a dataController resource
     * @param {String} subscriptionId The ID of the Azure subscription
     * @param {String} resourceGroupName The name of the Azure resource group
     * @param {String} dataControllerName The name of the data controller
     * @param {String} apiVersion The API version to use for the request
     * @param {module:model/DataControllerResource} dataControllerResource desc
     * @param {module:api/DataControllersApi~dataControllersPutDataControllerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataControllerResource}
     */
    dataControllersPutDataController(subscriptionId, resourceGroupName, dataControllerName, apiVersion, dataControllerResource, callback) {
      let postBody = dataControllerResource;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dataControllersPutDataController");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dataControllersPutDataController");
      }
      // verify the required parameter 'dataControllerName' is set
      if (dataControllerName === undefined || dataControllerName === null) {
        throw new Error("Missing the required parameter 'dataControllerName' when calling dataControllersPutDataController");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dataControllersPutDataController");
      }
      // verify the required parameter 'dataControllerResource' is set
      if (dataControllerResource === undefined || dataControllerResource === null) {
        throw new Error("Missing the required parameter 'dataControllerResource' when calling dataControllersPutDataController");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'dataControllerName': dataControllerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DataControllerResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/dataControllers/{dataControllerName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
