/**
 * AzureArcDataManagementClient
 * The AzureArcData management API provides a RESTful set of web APIs to manage Azure Data Services on Azure Arc Resources.
 *
 * The version of the OpenAPI document: 2023-01-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ActiveDirectoryInformation from './ActiveDirectoryInformation';
import BasicLoginInformation from './BasicLoginInformation';
import SqlManagedInstanceK8sRaw from './SqlManagedInstanceK8sRaw';

/**
 * The SqlManagedInstanceProperties model module.
 * @module model/SqlManagedInstanceProperties
 * @version 2023-01-15-preview
 */
class SqlManagedInstanceProperties {
    /**
     * Constructs a new <code>SqlManagedInstanceProperties</code>.
     * Properties of sqlManagedInstance.
     * @alias module:model/SqlManagedInstanceProperties
     */
    constructor() { 
        
        SqlManagedInstanceProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SqlManagedInstanceProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SqlManagedInstanceProperties} obj Optional instance to populate.
     * @return {module:model/SqlManagedInstanceProperties} The populated <code>SqlManagedInstanceProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SqlManagedInstanceProperties();

            if (data.hasOwnProperty('dataControllerId')) {
                obj['dataControllerId'] = ApiClient.convertToType(data['dataControllerId'], 'String');
            }
            if (data.hasOwnProperty('admin')) {
                obj['admin'] = ApiClient.convertToType(data['admin'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'String');
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'String');
            }
            if (data.hasOwnProperty('k8sRaw')) {
                obj['k8sRaw'] = SqlManagedInstanceK8sRaw.constructFromObject(data['k8sRaw']);
            }
            if (data.hasOwnProperty('basicLoginInformation')) {
                obj['basicLoginInformation'] = BasicLoginInformation.constructFromObject(data['basicLoginInformation']);
            }
            if (data.hasOwnProperty('lastUploadedDate')) {
                obj['lastUploadedDate'] = ApiClient.convertToType(data['lastUploadedDate'], 'Date');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('activeDirectoryInformation')) {
                obj['activeDirectoryInformation'] = ActiveDirectoryInformation.constructFromObject(data['activeDirectoryInformation']);
            }
            if (data.hasOwnProperty('licenseType')) {
                obj['licenseType'] = ApiClient.convertToType(data['licenseType'], 'String');
            }
            if (data.hasOwnProperty('clusterId')) {
                obj['clusterId'] = ApiClient.convertToType(data['clusterId'], 'String');
            }
            if (data.hasOwnProperty('extensionId')) {
                obj['extensionId'] = ApiClient.convertToType(data['extensionId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SqlManagedInstanceProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SqlManagedInstanceProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dataControllerId'] && !(typeof data['dataControllerId'] === 'string' || data['dataControllerId'] instanceof String)) {
            throw new Error("Expected the field `dataControllerId` to be a primitive type in the JSON string but got " + data['dataControllerId']);
        }
        // ensure the json data is a string
        if (data['admin'] && !(typeof data['admin'] === 'string' || data['admin'] instanceof String)) {
            throw new Error("Expected the field `admin` to be a primitive type in the JSON string but got " + data['admin']);
        }
        // ensure the json data is a string
        if (data['startTime'] && !(typeof data['startTime'] === 'string' || data['startTime'] instanceof String)) {
            throw new Error("Expected the field `startTime` to be a primitive type in the JSON string but got " + data['startTime']);
        }
        // ensure the json data is a string
        if (data['endTime'] && !(typeof data['endTime'] === 'string' || data['endTime'] instanceof String)) {
            throw new Error("Expected the field `endTime` to be a primitive type in the JSON string but got " + data['endTime']);
        }
        // validate the optional field `basicLoginInformation`
        if (data['basicLoginInformation']) { // data not null
          BasicLoginInformation.validateJSON(data['basicLoginInformation']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // validate the optional field `activeDirectoryInformation`
        if (data['activeDirectoryInformation']) { // data not null
          ActiveDirectoryInformation.validateJSON(data['activeDirectoryInformation']);
        }
        // ensure the json data is a string
        if (data['licenseType'] && !(typeof data['licenseType'] === 'string' || data['licenseType'] instanceof String)) {
            throw new Error("Expected the field `licenseType` to be a primitive type in the JSON string but got " + data['licenseType']);
        }
        // ensure the json data is a string
        if (data['clusterId'] && !(typeof data['clusterId'] === 'string' || data['clusterId'] instanceof String)) {
            throw new Error("Expected the field `clusterId` to be a primitive type in the JSON string but got " + data['clusterId']);
        }
        // ensure the json data is a string
        if (data['extensionId'] && !(typeof data['extensionId'] === 'string' || data['extensionId'] instanceof String)) {
            throw new Error("Expected the field `extensionId` to be a primitive type in the JSON string but got " + data['extensionId']);
        }

        return true;
    }


}



/**
 * null
 * @member {String} dataControllerId
 */
SqlManagedInstanceProperties.prototype['dataControllerId'] = undefined;

/**
 * The instance admin user
 * @member {String} admin
 */
SqlManagedInstanceProperties.prototype['admin'] = undefined;

/**
 * The instance start time
 * @member {String} startTime
 */
SqlManagedInstanceProperties.prototype['startTime'] = undefined;

/**
 * The instance end time
 * @member {String} endTime
 */
SqlManagedInstanceProperties.prototype['endTime'] = undefined;

/**
 * @member {module:model/SqlManagedInstanceK8sRaw} k8sRaw
 */
SqlManagedInstanceProperties.prototype['k8sRaw'] = undefined;

/**
 * @member {module:model/BasicLoginInformation} basicLoginInformation
 */
SqlManagedInstanceProperties.prototype['basicLoginInformation'] = undefined;

/**
 * Last uploaded date from Kubernetes cluster. Defaults to current date time
 * @member {Date} lastUploadedDate
 */
SqlManagedInstanceProperties.prototype['lastUploadedDate'] = undefined;

/**
 * The provisioning state of the Arc-enabled SQL Managed Instance resource.
 * @member {String} provisioningState
 */
SqlManagedInstanceProperties.prototype['provisioningState'] = undefined;

/**
 * @member {module:model/ActiveDirectoryInformation} activeDirectoryInformation
 */
SqlManagedInstanceProperties.prototype['activeDirectoryInformation'] = undefined;

/**
 * The license type to apply for this managed instance.
 * @member {module:model/SqlManagedInstanceProperties.LicenseTypeEnum} licenseType
 * @default 'BasePrice'
 */
SqlManagedInstanceProperties.prototype['licenseType'] = 'BasePrice';

/**
 * If a CustomLocation is provided, this contains the ARM id of the connected cluster the custom location belongs to.
 * @member {String} clusterId
 */
SqlManagedInstanceProperties.prototype['clusterId'] = undefined;

/**
 * If a CustomLocation is provided, this contains the ARM id of the extension the custom location belongs to.
 * @member {String} extensionId
 */
SqlManagedInstanceProperties.prototype['extensionId'] = undefined;





/**
 * Allowed values for the <code>licenseType</code> property.
 * @enum {String}
 * @readonly
 */
SqlManagedInstanceProperties['LicenseTypeEnum'] = {

    /**
     * value: "BasePrice"
     * @const
     */
    "BasePrice": "BasePrice",

    /**
     * value: "LicenseIncluded"
     * @const
     */
    "LicenseIncluded": "LicenseIncluded",

    /**
     * value: "DisasterRecovery"
     * @const
     */
    "DisasterRecovery": "DisasterRecovery"
};



export default SqlManagedInstanceProperties;

