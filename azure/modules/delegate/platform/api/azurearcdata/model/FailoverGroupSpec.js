/**
 * AzureArcDataManagementClient
 * The AzureArcData management API provides a RESTful set of web APIs to manage Azure Data Services on Azure Arc Resources.
 *
 * The version of the OpenAPI document: 2023-01-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FailoverGroupSpec model module.
 * @module model/FailoverGroupSpec
 * @version 2023-01-15-preview
 */
class FailoverGroupSpec {
    /**
     * Constructs a new <code>FailoverGroupSpec</code>.
     * The specifications of the failover group resource.
     * @alias module:model/FailoverGroupSpec
     * @extends Object
     * @param role {module:model/FailoverGroupSpec.RoleEnum} The role of the SQL managed instance in this failover group.
     */
    constructor(role) { 
        
        FailoverGroupSpec.initialize(this, role);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, role) { 
        obj['role'] = role || 'primary';
    }

    /**
     * Constructs a <code>FailoverGroupSpec</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FailoverGroupSpec} obj Optional instance to populate.
     * @return {module:model/FailoverGroupSpec} The populated <code>FailoverGroupSpec</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FailoverGroupSpec();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('sharedName')) {
                obj['sharedName'] = ApiClient.convertToType(data['sharedName'], 'String');
            }
            if (data.hasOwnProperty('sourceMI')) {
                obj['sourceMI'] = ApiClient.convertToType(data['sourceMI'], 'String');
            }
            if (data.hasOwnProperty('partnerMI')) {
                obj['partnerMI'] = ApiClient.convertToType(data['partnerMI'], 'String');
            }
            if (data.hasOwnProperty('partnerMirroringURL')) {
                obj['partnerMirroringURL'] = ApiClient.convertToType(data['partnerMirroringURL'], 'String');
            }
            if (data.hasOwnProperty('partnerMirroringCert')) {
                obj['partnerMirroringCert'] = ApiClient.convertToType(data['partnerMirroringCert'], 'String');
            }
            if (data.hasOwnProperty('partnerSyncMode')) {
                obj['partnerSyncMode'] = ApiClient.convertToType(data['partnerSyncMode'], 'String');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FailoverGroupSpec</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FailoverGroupSpec</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FailoverGroupSpec.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['sharedName'] && !(typeof data['sharedName'] === 'string' || data['sharedName'] instanceof String)) {
            throw new Error("Expected the field `sharedName` to be a primitive type in the JSON string but got " + data['sharedName']);
        }
        // ensure the json data is a string
        if (data['sourceMI'] && !(typeof data['sourceMI'] === 'string' || data['sourceMI'] instanceof String)) {
            throw new Error("Expected the field `sourceMI` to be a primitive type in the JSON string but got " + data['sourceMI']);
        }
        // ensure the json data is a string
        if (data['partnerMI'] && !(typeof data['partnerMI'] === 'string' || data['partnerMI'] instanceof String)) {
            throw new Error("Expected the field `partnerMI` to be a primitive type in the JSON string but got " + data['partnerMI']);
        }
        // ensure the json data is a string
        if (data['partnerMirroringURL'] && !(typeof data['partnerMirroringURL'] === 'string' || data['partnerMirroringURL'] instanceof String)) {
            throw new Error("Expected the field `partnerMirroringURL` to be a primitive type in the JSON string but got " + data['partnerMirroringURL']);
        }
        // ensure the json data is a string
        if (data['partnerMirroringCert'] && !(typeof data['partnerMirroringCert'] === 'string' || data['partnerMirroringCert'] instanceof String)) {
            throw new Error("Expected the field `partnerMirroringCert` to be a primitive type in the JSON string but got " + data['partnerMirroringCert']);
        }
        // ensure the json data is a string
        if (data['partnerSyncMode'] && !(typeof data['partnerSyncMode'] === 'string' || data['partnerSyncMode'] instanceof String)) {
            throw new Error("Expected the field `partnerSyncMode` to be a primitive type in the JSON string but got " + data['partnerSyncMode']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }

        return true;
    }


}

FailoverGroupSpec.RequiredProperties = ["role"];

/**
 * The shared name of the failover group for this SQL managed instance. Both SQL managed instance and its partner have to use the same shared name.
 * @member {String} sharedName
 */
FailoverGroupSpec.prototype['sharedName'] = undefined;

/**
 * The name of the SQL managed instance with this failover group role.
 * @member {String} sourceMI
 */
FailoverGroupSpec.prototype['sourceMI'] = undefined;

/**
 * The name of the partner SQL managed instance.
 * @member {String} partnerMI
 */
FailoverGroupSpec.prototype['partnerMI'] = undefined;

/**
 * The mirroring endpoint URL of the partner SQL managed instance.
 * @member {String} partnerMirroringURL
 */
FailoverGroupSpec.prototype['partnerMirroringURL'] = undefined;

/**
 * The mirroring endpoint public certificate for the partner SQL managed instance. Only PEM format is supported.
 * @member {String} partnerMirroringCert
 */
FailoverGroupSpec.prototype['partnerMirroringCert'] = undefined;

/**
 * The partner sync mode of the SQL managed instance.
 * @member {module:model/FailoverGroupSpec.PartnerSyncModeEnum} partnerSyncMode
 * @default 'async'
 */
FailoverGroupSpec.prototype['partnerSyncMode'] = 'async';

/**
 * The role of the SQL managed instance in this failover group.
 * @member {module:model/FailoverGroupSpec.RoleEnum} role
 * @default 'primary'
 */
FailoverGroupSpec.prototype['role'] = 'primary';





/**
 * Allowed values for the <code>partnerSyncMode</code> property.
 * @enum {String}
 * @readonly
 */
FailoverGroupSpec['PartnerSyncModeEnum'] = {

    /**
     * value: "async"
     * @const
     */
    "async": "async",

    /**
     * value: "sync"
     * @const
     */
    "sync": "sync"
};


/**
 * Allowed values for the <code>role</code> property.
 * @enum {String}
 * @readonly
 */
FailoverGroupSpec['RoleEnum'] = {

    /**
     * value: "primary"
     * @const
     */
    "primary": "primary",

    /**
     * value: "secondary"
     * @const
     */
    "secondary": "secondary",

    /**
     * value: "force-primary-allow-data-loss"
     * @const
     */
    "force-primary-allow-data-loss": "force-primary-allow-data-loss",

    /**
     * value: "force-secondary"
     * @const
     */
    "force-secondary": "force-secondary"
};



export default FailoverGroupSpec;

