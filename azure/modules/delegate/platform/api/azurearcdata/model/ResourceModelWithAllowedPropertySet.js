/**
 * AzureArcDataManagementClient
 * The AzureArcData management API provides a RESTful set of web APIs to manage Azure Data Services on Azure Arc Resources.
 *
 * The version of the OpenAPI document: 2023-01-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Identity from './Identity';
import Plan from './Plan';
import Sku from './Sku';
import SystemData from './SystemData';
import TrackedResource from './TrackedResource';

/**
 * The ResourceModelWithAllowedPropertySet model module.
 * @module model/ResourceModelWithAllowedPropertySet
 * @version 2023-01-15-preview
 */
class ResourceModelWithAllowedPropertySet {
    /**
     * Constructs a new <code>ResourceModelWithAllowedPropertySet</code>.
     * The resource model definition containing the full set of allowed properties for a resource. Except properties bag, there cannot be a top level property outside of this set.
     * @alias module:model/ResourceModelWithAllowedPropertySet
     * @implements module:model/TrackedResource
     * @param location {String} The geo-location where the resource lives
     */
    constructor(location) { 
        TrackedResource.initialize(this);
        ResourceModelWithAllowedPropertySet.initialize(this, location);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, location) { 
        obj['location'] = location;
    }

    /**
     * Constructs a <code>ResourceModelWithAllowedPropertySet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResourceModelWithAllowedPropertySet} obj Optional instance to populate.
     * @return {module:model/ResourceModelWithAllowedPropertySet} The populated <code>ResourceModelWithAllowedPropertySet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResourceModelWithAllowedPropertySet();
            TrackedResource.constructFromObject(data, obj);

            if (data.hasOwnProperty('managedBy')) {
                obj['managedBy'] = ApiClient.convertToType(data['managedBy'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('identity')) {
                obj['identity'] = ApiClient.convertToType(data['identity'], Identity);
            }
            if (data.hasOwnProperty('sku')) {
                obj['sku'] = ApiClient.convertToType(data['sku'], Sku);
            }
            if (data.hasOwnProperty('plan')) {
                obj['plan'] = ApiClient.convertToType(data['plan'], Plan);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': 'String'});
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('systemData')) {
                obj['systemData'] = SystemData.constructFromObject(data['systemData']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResourceModelWithAllowedPropertySet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResourceModelWithAllowedPropertySet</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ResourceModelWithAllowedPropertySet.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['managedBy'] && !(typeof data['managedBy'] === 'string' || data['managedBy'] instanceof String)) {
            throw new Error("Expected the field `managedBy` to be a primitive type in the JSON string but got " + data['managedBy']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // validate the optional field `identity`
        if (data['identity']) { // data not null
          Identity.validateJSON(data['identity']);
        }
        // validate the optional field `sku`
        if (data['sku']) { // data not null
          Sku.validateJSON(data['sku']);
        }
        // validate the optional field `plan`
        if (data['plan']) { // data not null
          Plan.validateJSON(data['plan']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

ResourceModelWithAllowedPropertySet.RequiredProperties = ["location"];

/**
 * The fully qualified resource ID of the resource that manages this resource. Indicates if this resource is managed by another Azure resource. If this is present, complete mode deployment will not delete the resource if it is removed from the template since it is managed by another resource.
 * @member {String} managedBy
 */
ResourceModelWithAllowedPropertySet.prototype['managedBy'] = undefined;

/**
 * Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value.
 * @member {String} kind
 */
ResourceModelWithAllowedPropertySet.prototype['kind'] = undefined;

/**
 * The etag field is *not* required. If it is provided in the response body, it must also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. 
 * @member {String} etag
 */
ResourceModelWithAllowedPropertySet.prototype['etag'] = undefined;

/**
 * @member {module:model/Identity} identity
 */
ResourceModelWithAllowedPropertySet.prototype['identity'] = undefined;

/**
 * @member {module:model/Sku} sku
 */
ResourceModelWithAllowedPropertySet.prototype['sku'] = undefined;

/**
 * @member {module:model/Plan} plan
 */
ResourceModelWithAllowedPropertySet.prototype['plan'] = undefined;

/**
 * Resource tags.
 * @member {Object.<String, String>} tags
 */
ResourceModelWithAllowedPropertySet.prototype['tags'] = undefined;

/**
 * The geo-location where the resource lives
 * @member {String} location
 */
ResourceModelWithAllowedPropertySet.prototype['location'] = undefined;

/**
 * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
 * @member {String} id
 */
ResourceModelWithAllowedPropertySet.prototype['id'] = undefined;

/**
 * The name of the resource
 * @member {String} name
 */
ResourceModelWithAllowedPropertySet.prototype['name'] = undefined;

/**
 * The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"
 * @member {String} type
 */
ResourceModelWithAllowedPropertySet.prototype['type'] = undefined;

/**
 * @member {module:model/SystemData} systemData
 */
ResourceModelWithAllowedPropertySet.prototype['systemData'] = undefined;


// Implement TrackedResource interface:
/**
 * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
 * @member {String} id
 */
TrackedResource.prototype['id'] = undefined;
/**
 * The name of the resource
 * @member {String} name
 */
TrackedResource.prototype['name'] = undefined;
/**
 * The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"
 * @member {String} type
 */
TrackedResource.prototype['type'] = undefined;
/**
 * @member {module:model/SystemData} systemData
 */
TrackedResource.prototype['systemData'] = undefined;




export default ResourceModelWithAllowedPropertySet;

