/**
 * AzureArcDataManagementClient
 * The AzureArcData management API provides a RESTful set of web APIs to manage Azure Data Services on Azure Arc Resources.
 *
 * The version of the OpenAPI document: 2023-01-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ActiveDirectoryConnectorDNSDetails model module.
 * @module model/ActiveDirectoryConnectorDNSDetails
 * @version 2023-01-15-preview
 */
class ActiveDirectoryConnectorDNSDetails {
    /**
     * Constructs a new <code>ActiveDirectoryConnectorDNSDetails</code>.
     * DNS server details
     * @alias module:model/ActiveDirectoryConnectorDNSDetails
     * @param nameserverIPAddresses {Array.<String>} List of Active Directory DNS server IP addresses.
     */
    constructor(nameserverIPAddresses) { 
        
        ActiveDirectoryConnectorDNSDetails.initialize(this, nameserverIPAddresses);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, nameserverIPAddresses) { 
        obj['nameserverIPAddresses'] = nameserverIPAddresses;
    }

    /**
     * Constructs a <code>ActiveDirectoryConnectorDNSDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ActiveDirectoryConnectorDNSDetails} obj Optional instance to populate.
     * @return {module:model/ActiveDirectoryConnectorDNSDetails} The populated <code>ActiveDirectoryConnectorDNSDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ActiveDirectoryConnectorDNSDetails();

            if (data.hasOwnProperty('domainName')) {
                obj['domainName'] = ApiClient.convertToType(data['domainName'], 'String');
            }
            if (data.hasOwnProperty('nameserverIPAddresses')) {
                obj['nameserverIPAddresses'] = ApiClient.convertToType(data['nameserverIPAddresses'], ['String']);
            }
            if (data.hasOwnProperty('replicas')) {
                obj['replicas'] = ApiClient.convertToType(data['replicas'], 'Number');
            }
            if (data.hasOwnProperty('preferK8sDnsForPtrLookups')) {
                obj['preferK8sDnsForPtrLookups'] = ApiClient.convertToType(data['preferK8sDnsForPtrLookups'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ActiveDirectoryConnectorDNSDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ActiveDirectoryConnectorDNSDetails</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ActiveDirectoryConnectorDNSDetails.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['domainName'] && !(typeof data['domainName'] === 'string' || data['domainName'] instanceof String)) {
            throw new Error("Expected the field `domainName` to be a primitive type in the JSON string but got " + data['domainName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['nameserverIPAddresses'])) {
            throw new Error("Expected the field `nameserverIPAddresses` to be an array in the JSON data but got " + data['nameserverIPAddresses']);
        }

        return true;
    }


}

ActiveDirectoryConnectorDNSDetails.RequiredProperties = ["nameserverIPAddresses"];

/**
 * DNS domain name for which DNS lookups should be forwarded to the Active Directory DNS servers.
 * @member {String} domainName
 */
ActiveDirectoryConnectorDNSDetails.prototype['domainName'] = undefined;

/**
 * List of Active Directory DNS server IP addresses.
 * @member {Array.<String>} nameserverIPAddresses
 */
ActiveDirectoryConnectorDNSDetails.prototype['nameserverIPAddresses'] = undefined;

/**
 * Replica count for DNS proxy service. Default value is 1.
 * @member {Number} replicas
 * @default 1
 */
ActiveDirectoryConnectorDNSDetails.prototype['replicas'] = 1;

/**
 * Flag indicating whether to prefer Kubernetes DNS server response over AD DNS server response for IP address lookups.
 * @member {Boolean} preferK8sDnsForPtrLookups
 * @default true
 */
ActiveDirectoryConnectorDNSDetails.prototype['preferK8sDnsForPtrLookups'] = true;






export default ActiveDirectoryConnectorDNSDetails;

