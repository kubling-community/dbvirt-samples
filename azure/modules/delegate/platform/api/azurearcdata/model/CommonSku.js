/**
 * AzureArcDataManagementClient
 * The AzureArcData management API provides a RESTful set of web APIs to manage Azure Data Services on Azure Arc Resources.
 *
 * The version of the OpenAPI document: 2023-01-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CommonSku model module.
 * @module model/CommonSku
 * @version 2023-01-15-preview
 */
class CommonSku {
    /**
     * Constructs a new <code>CommonSku</code>.
     * The resource model definition representing SKU for ARM resources
     * @alias module:model/CommonSku
     * @param name {String} The name of the SKU.  It is typically a letter+number code
     */
    constructor(name) { 
        
        CommonSku.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
    }

    /**
     * Constructs a <code>CommonSku</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CommonSku} obj Optional instance to populate.
     * @return {module:model/CommonSku} The populated <code>CommonSku</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CommonSku();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('dev')) {
                obj['dev'] = ApiClient.convertToType(data['dev'], 'Boolean');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'String');
            }
            if (data.hasOwnProperty('family')) {
                obj['family'] = ApiClient.convertToType(data['family'], 'String');
            }
            if (data.hasOwnProperty('capacity')) {
                obj['capacity'] = ApiClient.convertToType(data['capacity'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CommonSku</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CommonSku</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CommonSku.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['size'] && !(typeof data['size'] === 'string' || data['size'] instanceof String)) {
            throw new Error("Expected the field `size` to be a primitive type in the JSON string but got " + data['size']);
        }
        // ensure the json data is a string
        if (data['family'] && !(typeof data['family'] === 'string' || data['family'] instanceof String)) {
            throw new Error("Expected the field `family` to be a primitive type in the JSON string but got " + data['family']);
        }

        return true;
    }


}

CommonSku.RequiredProperties = ["name"];

/**
 * The name of the SKU.  It is typically a letter+number code
 * @member {String} name
 */
CommonSku.prototype['name'] = undefined;

/**
 * Whether dev/test is enabled. When the dev field is set to true, the resource is used for dev/test purpose. 
 * @member {Boolean} dev
 * @default true
 */
CommonSku.prototype['dev'] = true;

/**
 * The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. 
 * @member {String} size
 */
CommonSku.prototype['size'] = undefined;

/**
 * If the service has different generations of hardware, for the same SKU, then that can be captured here.
 * @member {String} family
 */
CommonSku.prototype['family'] = undefined;

/**
 * If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
 * @member {Number} capacity
 */
CommonSku.prototype['capacity'] = undefined;






export default CommonSku;

