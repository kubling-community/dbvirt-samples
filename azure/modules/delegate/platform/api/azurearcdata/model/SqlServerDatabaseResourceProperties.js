/**
 * AzureArcDataManagementClient
 * The AzureArcData management API provides a RESTful set of web APIs to manage Azure Data Services on Azure Arc Resources.
 *
 * The version of the OpenAPI document: 2023-01-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SqlServerDatabaseResourcePropertiesBackupInformation from './SqlServerDatabaseResourcePropertiesBackupInformation';
import SqlServerDatabaseResourcePropertiesDatabaseOptions from './SqlServerDatabaseResourcePropertiesDatabaseOptions';

/**
 * The SqlServerDatabaseResourceProperties model module.
 * @module model/SqlServerDatabaseResourceProperties
 * @version 2023-01-15-preview
 */
class SqlServerDatabaseResourceProperties {
    /**
     * Constructs a new <code>SqlServerDatabaseResourceProperties</code>.
     * The properties of Arc Sql Server database resource
     * @alias module:model/SqlServerDatabaseResourceProperties
     */
    constructor() { 
        
        SqlServerDatabaseResourceProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SqlServerDatabaseResourceProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SqlServerDatabaseResourceProperties} obj Optional instance to populate.
     * @return {module:model/SqlServerDatabaseResourceProperties} The populated <code>SqlServerDatabaseResourceProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SqlServerDatabaseResourceProperties();

            if (data.hasOwnProperty('collationName')) {
                obj['collationName'] = ApiClient.convertToType(data['collationName'], 'String');
            }
            if (data.hasOwnProperty('databaseCreationDate')) {
                obj['databaseCreationDate'] = ApiClient.convertToType(data['databaseCreationDate'], 'Date');
            }
            if (data.hasOwnProperty('compatibilityLevel')) {
                obj['compatibilityLevel'] = ApiClient.convertToType(data['compatibilityLevel'], 'Number');
            }
            if (data.hasOwnProperty('sizeMB')) {
                obj['sizeMB'] = ApiClient.convertToType(data['sizeMB'], 'Number');
            }
            if (data.hasOwnProperty('spaceAvailableMB')) {
                obj['spaceAvailableMB'] = ApiClient.convertToType(data['spaceAvailableMB'], 'Number');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('isReadOnly')) {
                obj['isReadOnly'] = ApiClient.convertToType(data['isReadOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('recoveryMode')) {
                obj['recoveryMode'] = ApiClient.convertToType(data['recoveryMode'], 'String');
            }
            if (data.hasOwnProperty('databaseOptions')) {
                obj['databaseOptions'] = SqlServerDatabaseResourcePropertiesDatabaseOptions.constructFromObject(data['databaseOptions']);
            }
            if (data.hasOwnProperty('backupInformation')) {
                obj['backupInformation'] = SqlServerDatabaseResourcePropertiesBackupInformation.constructFromObject(data['backupInformation']);
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SqlServerDatabaseResourceProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SqlServerDatabaseResourceProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['collationName'] && !(typeof data['collationName'] === 'string' || data['collationName'] instanceof String)) {
            throw new Error("Expected the field `collationName` to be a primitive type in the JSON string but got " + data['collationName']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['recoveryMode'] && !(typeof data['recoveryMode'] === 'string' || data['recoveryMode'] instanceof String)) {
            throw new Error("Expected the field `recoveryMode` to be a primitive type in the JSON string but got " + data['recoveryMode']);
        }
        // validate the optional field `databaseOptions`
        if (data['databaseOptions']) { // data not null
          SqlServerDatabaseResourcePropertiesDatabaseOptions.validateJSON(data['databaseOptions']);
        }
        // validate the optional field `backupInformation`
        if (data['backupInformation']) { // data not null
          SqlServerDatabaseResourcePropertiesBackupInformation.validateJSON(data['backupInformation']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }

        return true;
    }


}



/**
 * Collation of the database.
 * @member {String} collationName
 */
SqlServerDatabaseResourceProperties.prototype['collationName'] = undefined;

/**
 * Creation date of the database.
 * @member {Date} databaseCreationDate
 */
SqlServerDatabaseResourceProperties.prototype['databaseCreationDate'] = undefined;

/**
 * Compatibility level of the database
 * @member {Number} compatibilityLevel
 */
SqlServerDatabaseResourceProperties.prototype['compatibilityLevel'] = undefined;

/**
 * Size of the database.
 * @member {Number} sizeMB
 */
SqlServerDatabaseResourceProperties.prototype['sizeMB'] = undefined;

/**
 * Space left of the database.
 * @member {Number} spaceAvailableMB
 */
SqlServerDatabaseResourceProperties.prototype['spaceAvailableMB'] = undefined;

/**
 * State of the database.
 * @member {module:model/SqlServerDatabaseResourceProperties.StateEnum} state
 */
SqlServerDatabaseResourceProperties.prototype['state'] = undefined;

/**
 * Whether the database is read only or not.
 * @member {Boolean} isReadOnly
 */
SqlServerDatabaseResourceProperties.prototype['isReadOnly'] = undefined;

/**
 * Status of the database.
 * @member {module:model/SqlServerDatabaseResourceProperties.RecoveryModeEnum} recoveryMode
 */
SqlServerDatabaseResourceProperties.prototype['recoveryMode'] = undefined;

/**
 * @member {module:model/SqlServerDatabaseResourcePropertiesDatabaseOptions} databaseOptions
 */
SqlServerDatabaseResourceProperties.prototype['databaseOptions'] = undefined;

/**
 * @member {module:model/SqlServerDatabaseResourcePropertiesBackupInformation} backupInformation
 */
SqlServerDatabaseResourceProperties.prototype['backupInformation'] = undefined;

/**
 * The provisioning state of the Arc-enabled SQL Server database resource.
 * @member {String} provisioningState
 */
SqlServerDatabaseResourceProperties.prototype['provisioningState'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
SqlServerDatabaseResourceProperties['StateEnum'] = {

    /**
     * value: "Online"
     * @const
     */
    "Online": "Online",

    /**
     * value: "Restoring"
     * @const
     */
    "Restoring": "Restoring",

    /**
     * value: "Recovering"
     * @const
     */
    "Recovering": "Recovering",

    /**
     * value: "RecoveryPending"
     * @const
     */
    "RecoveryPending": "RecoveryPending",

    /**
     * value: "Suspect"
     * @const
     */
    "Suspect": "Suspect",

    /**
     * value: "Emergency"
     * @const
     */
    "Emergency": "Emergency",

    /**
     * value: "Offline"
     * @const
     */
    "Offline": "Offline",

    /**
     * value: "Copying"
     * @const
     */
    "Copying": "Copying",

    /**
     * value: "OfflineSecondary"
     * @const
     */
    "OfflineSecondary": "OfflineSecondary"
};


/**
 * Allowed values for the <code>recoveryMode</code> property.
 * @enum {String}
 * @readonly
 */
SqlServerDatabaseResourceProperties['RecoveryModeEnum'] = {

    /**
     * value: "Full"
     * @const
     */
    "Full": "Full",

    /**
     * value: "Bulk-logged"
     * @const
     */
    "Bulk-logged": "Bulk-logged",

    /**
     * value: "Simple"
     * @const
     */
    "Simple": "Simple"
};



export default SqlServerDatabaseResourceProperties;

