/**
 * AzureArcDataManagementClient
 * The AzureArcData management API provides a RESTful set of web APIs to manage Azure Data Services on Azure Arc Resources.
 *
 * The version of the OpenAPI document: 2023-01-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BasicLoginInformation from './BasicLoginInformation';
import LogAnalyticsWorkspaceConfig from './LogAnalyticsWorkspaceConfig';
import OnPremiseProperty from './OnPremiseProperty';
import UploadServicePrincipal from './UploadServicePrincipal';
import UploadWatermark from './UploadWatermark';

/**
 * The DataControllerProperties model module.
 * @module model/DataControllerProperties
 * @version 2023-01-15-preview
 */
class DataControllerProperties {
    /**
     * Constructs a new <code>DataControllerProperties</code>.
     * The data controller properties.
     * @alias module:model/DataControllerProperties
     */
    constructor() { 
        
        DataControllerProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DataControllerProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataControllerProperties} obj Optional instance to populate.
     * @return {module:model/DataControllerProperties} The populated <code>DataControllerProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataControllerProperties();

            if (data.hasOwnProperty('infrastructure')) {
                obj['infrastructure'] = ApiClient.convertToType(data['infrastructure'], 'String');
            }
            if (data.hasOwnProperty('onPremiseProperty')) {
                obj['onPremiseProperty'] = OnPremiseProperty.constructFromObject(data['onPremiseProperty']);
            }
            if (data.hasOwnProperty('k8sRaw')) {
                obj['k8sRaw'] = ApiClient.convertToType(data['k8sRaw'], Object);
            }
            if (data.hasOwnProperty('uploadWatermark')) {
                obj['uploadWatermark'] = UploadWatermark.constructFromObject(data['uploadWatermark']);
            }
            if (data.hasOwnProperty('lastUploadedDate')) {
                obj['lastUploadedDate'] = ApiClient.convertToType(data['lastUploadedDate'], 'Date');
            }
            if (data.hasOwnProperty('basicLoginInformation')) {
                obj['basicLoginInformation'] = BasicLoginInformation.constructFromObject(data['basicLoginInformation']);
            }
            if (data.hasOwnProperty('metricsDashboardCredential')) {
                obj['metricsDashboardCredential'] = BasicLoginInformation.constructFromObject(data['metricsDashboardCredential']);
            }
            if (data.hasOwnProperty('logsDashboardCredential')) {
                obj['logsDashboardCredential'] = BasicLoginInformation.constructFromObject(data['logsDashboardCredential']);
            }
            if (data.hasOwnProperty('logAnalyticsWorkspaceConfig')) {
                obj['logAnalyticsWorkspaceConfig'] = LogAnalyticsWorkspaceConfig.constructFromObject(data['logAnalyticsWorkspaceConfig']);
            }
            if (data.hasOwnProperty('uploadServicePrincipal')) {
                obj['uploadServicePrincipal'] = UploadServicePrincipal.constructFromObject(data['uploadServicePrincipal']);
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('clusterId')) {
                obj['clusterId'] = ApiClient.convertToType(data['clusterId'], 'String');
            }
            if (data.hasOwnProperty('extensionId')) {
                obj['extensionId'] = ApiClient.convertToType(data['extensionId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataControllerProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataControllerProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['infrastructure'] && !(typeof data['infrastructure'] === 'string' || data['infrastructure'] instanceof String)) {
            throw new Error("Expected the field `infrastructure` to be a primitive type in the JSON string but got " + data['infrastructure']);
        }
        // validate the optional field `onPremiseProperty`
        if (data['onPremiseProperty']) { // data not null
          OnPremiseProperty.validateJSON(data['onPremiseProperty']);
        }
        // validate the optional field `uploadWatermark`
        if (data['uploadWatermark']) { // data not null
          UploadWatermark.validateJSON(data['uploadWatermark']);
        }
        // validate the optional field `basicLoginInformation`
        if (data['basicLoginInformation']) { // data not null
          BasicLoginInformation.validateJSON(data['basicLoginInformation']);
        }
        // validate the optional field `metricsDashboardCredential`
        if (data['metricsDashboardCredential']) { // data not null
          BasicLoginInformation.validateJSON(data['metricsDashboardCredential']);
        }
        // validate the optional field `logsDashboardCredential`
        if (data['logsDashboardCredential']) { // data not null
          BasicLoginInformation.validateJSON(data['logsDashboardCredential']);
        }
        // validate the optional field `logAnalyticsWorkspaceConfig`
        if (data['logAnalyticsWorkspaceConfig']) { // data not null
          LogAnalyticsWorkspaceConfig.validateJSON(data['logAnalyticsWorkspaceConfig']);
        }
        // validate the optional field `uploadServicePrincipal`
        if (data['uploadServicePrincipal']) { // data not null
          UploadServicePrincipal.validateJSON(data['uploadServicePrincipal']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['clusterId'] && !(typeof data['clusterId'] === 'string' || data['clusterId'] instanceof String)) {
            throw new Error("Expected the field `clusterId` to be a primitive type in the JSON string but got " + data['clusterId']);
        }
        // ensure the json data is a string
        if (data['extensionId'] && !(typeof data['extensionId'] === 'string' || data['extensionId'] instanceof String)) {
            throw new Error("Expected the field `extensionId` to be a primitive type in the JSON string but got " + data['extensionId']);
        }

        return true;
    }


}



/**
 * The infrastructure the data controller is running on.
 * @member {module:model/DataControllerProperties.InfrastructureEnum} infrastructure
 * @default 'other'
 */
DataControllerProperties.prototype['infrastructure'] = 'other';

/**
 * @member {module:model/OnPremiseProperty} onPremiseProperty
 */
DataControllerProperties.prototype['onPremiseProperty'] = undefined;

/**
 * The raw kubernetes information
 * @member {Object} k8sRaw
 */
DataControllerProperties.prototype['k8sRaw'] = undefined;

/**
 * @member {module:model/UploadWatermark} uploadWatermark
 */
DataControllerProperties.prototype['uploadWatermark'] = undefined;

/**
 * Last uploaded date from Kubernetes cluster. Defaults to current date time
 * @member {Date} lastUploadedDate
 */
DataControllerProperties.prototype['lastUploadedDate'] = undefined;

/**
 * @member {module:model/BasicLoginInformation} basicLoginInformation
 */
DataControllerProperties.prototype['basicLoginInformation'] = undefined;

/**
 * @member {module:model/BasicLoginInformation} metricsDashboardCredential
 */
DataControllerProperties.prototype['metricsDashboardCredential'] = undefined;

/**
 * @member {module:model/BasicLoginInformation} logsDashboardCredential
 */
DataControllerProperties.prototype['logsDashboardCredential'] = undefined;

/**
 * @member {module:model/LogAnalyticsWorkspaceConfig} logAnalyticsWorkspaceConfig
 */
DataControllerProperties.prototype['logAnalyticsWorkspaceConfig'] = undefined;

/**
 * @member {module:model/UploadServicePrincipal} uploadServicePrincipal
 */
DataControllerProperties.prototype['uploadServicePrincipal'] = undefined;

/**
 * The provisioning state of the Arc Data Controller resource.
 * @member {String} provisioningState
 */
DataControllerProperties.prototype['provisioningState'] = undefined;

/**
 * If a CustomLocation is provided, this contains the ARM id of the connected cluster the custom location belongs to.
 * @member {String} clusterId
 */
DataControllerProperties.prototype['clusterId'] = undefined;

/**
 * If a CustomLocation is provided, this contains the ARM id of the extension the custom location belongs to.
 * @member {String} extensionId
 */
DataControllerProperties.prototype['extensionId'] = undefined;





/**
 * Allowed values for the <code>infrastructure</code> property.
 * @enum {String}
 * @readonly
 */
DataControllerProperties['InfrastructureEnum'] = {

    /**
     * value: "azure"
     * @const
     */
    "azure": "azure",

    /**
     * value: "gcp"
     * @const
     */
    "gcp": "gcp",

    /**
     * value: "aws"
     * @const
     */
    "aws": "aws",

    /**
     * value: "alibaba"
     * @const
     */
    "alibaba": "alibaba",

    /**
     * value: "onpremises"
     * @const
     */
    "onpremises": "onpremises",

    /**
     * value: "other"
     * @const
     */
    "other": "other"
};



export default DataControllerProperties;

