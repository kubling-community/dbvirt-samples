/**
 * AzureArcDataManagementClient
 * The AzureArcData management API provides a RESTful set of web APIs to manage Azure Data Services on Azure Arc Resources.
 *
 * The version of the OpenAPI document: 2023-01-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Plan model module.
 * @module model/Plan
 * @version 2023-01-15-preview
 */
class Plan {
    /**
     * Constructs a new <code>Plan</code>.
     * Plan for the resource.
     * @alias module:model/Plan
     * @param name {String} A user defined name of the 3rd Party Artifact that is being procured.
     * @param publisher {String} The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic
     * @param product {String} The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding. 
     */
    constructor(name, publisher, product) { 
        
        Plan.initialize(this, name, publisher, product);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, publisher, product) { 
        obj['name'] = name;
        obj['publisher'] = publisher;
        obj['product'] = product;
    }

    /**
     * Constructs a <code>Plan</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Plan} obj Optional instance to populate.
     * @return {module:model/Plan} The populated <code>Plan</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Plan();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('publisher')) {
                obj['publisher'] = ApiClient.convertToType(data['publisher'], 'String');
            }
            if (data.hasOwnProperty('product')) {
                obj['product'] = ApiClient.convertToType(data['product'], 'String');
            }
            if (data.hasOwnProperty('promotionCode')) {
                obj['promotionCode'] = ApiClient.convertToType(data['promotionCode'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Plan</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Plan</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Plan.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['publisher'] && !(typeof data['publisher'] === 'string' || data['publisher'] instanceof String)) {
            throw new Error("Expected the field `publisher` to be a primitive type in the JSON string but got " + data['publisher']);
        }
        // ensure the json data is a string
        if (data['product'] && !(typeof data['product'] === 'string' || data['product'] instanceof String)) {
            throw new Error("Expected the field `product` to be a primitive type in the JSON string but got " + data['product']);
        }
        // ensure the json data is a string
        if (data['promotionCode'] && !(typeof data['promotionCode'] === 'string' || data['promotionCode'] instanceof String)) {
            throw new Error("Expected the field `promotionCode` to be a primitive type in the JSON string but got " + data['promotionCode']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}

Plan.RequiredProperties = ["name", "publisher", "product"];

/**
 * A user defined name of the 3rd Party Artifact that is being procured.
 * @member {String} name
 */
Plan.prototype['name'] = undefined;

/**
 * The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic
 * @member {String} publisher
 */
Plan.prototype['publisher'] = undefined;

/**
 * The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding. 
 * @member {String} product
 */
Plan.prototype['product'] = undefined;

/**
 * A publisher provided promotion code as provisioned in Data Market for the said product/artifact.
 * @member {String} promotionCode
 */
Plan.prototype['promotionCode'] = undefined;

/**
 * The version of the desired product/artifact.
 * @member {String} version
 */
Plan.prototype['version'] = undefined;






export default Plan;

