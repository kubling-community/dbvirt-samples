/**
 * AzureArcDataManagementClient
 * The AzureArcData management API provides a RESTful set of web APIs to manage Azure Data Services on Azure Arc Resources.
 *
 * The version of the OpenAPI document: 2023-01-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ActiveDirectoryDomainControllers from './ActiveDirectoryDomainControllers';

/**
 * The ActiveDirectoryConnectorDomainDetails model module.
 * @module model/ActiveDirectoryConnectorDomainDetails
 * @version 2023-01-15-preview
 */
class ActiveDirectoryConnectorDomainDetails {
    /**
     * Constructs a new <code>ActiveDirectoryConnectorDomainDetails</code>.
     * Active Directory domain details
     * @alias module:model/ActiveDirectoryConnectorDomainDetails
     * @param realm {String} Name (uppercase) of the Active Directory domain that this AD connector will be associated with.
     */
    constructor(realm) { 
        
        ActiveDirectoryConnectorDomainDetails.initialize(this, realm);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, realm) { 
        obj['realm'] = realm;
    }

    /**
     * Constructs a <code>ActiveDirectoryConnectorDomainDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ActiveDirectoryConnectorDomainDetails} obj Optional instance to populate.
     * @return {module:model/ActiveDirectoryConnectorDomainDetails} The populated <code>ActiveDirectoryConnectorDomainDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ActiveDirectoryConnectorDomainDetails();

            if (data.hasOwnProperty('realm')) {
                obj['realm'] = ApiClient.convertToType(data['realm'], 'String');
            }
            if (data.hasOwnProperty('netbiosDomainName')) {
                obj['netbiosDomainName'] = ApiClient.convertToType(data['netbiosDomainName'], 'String');
            }
            if (data.hasOwnProperty('serviceAccountProvisioning')) {
                obj['serviceAccountProvisioning'] = ApiClient.convertToType(data['serviceAccountProvisioning'], 'String');
            }
            if (data.hasOwnProperty('ouDistinguishedName')) {
                obj['ouDistinguishedName'] = ApiClient.convertToType(data['ouDistinguishedName'], 'String');
            }
            if (data.hasOwnProperty('domainControllers')) {
                obj['domainControllers'] = ActiveDirectoryDomainControllers.constructFromObject(data['domainControllers']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ActiveDirectoryConnectorDomainDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ActiveDirectoryConnectorDomainDetails</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ActiveDirectoryConnectorDomainDetails.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['realm'] && !(typeof data['realm'] === 'string' || data['realm'] instanceof String)) {
            throw new Error("Expected the field `realm` to be a primitive type in the JSON string but got " + data['realm']);
        }
        // ensure the json data is a string
        if (data['netbiosDomainName'] && !(typeof data['netbiosDomainName'] === 'string' || data['netbiosDomainName'] instanceof String)) {
            throw new Error("Expected the field `netbiosDomainName` to be a primitive type in the JSON string but got " + data['netbiosDomainName']);
        }
        // ensure the json data is a string
        if (data['serviceAccountProvisioning'] && !(typeof data['serviceAccountProvisioning'] === 'string' || data['serviceAccountProvisioning'] instanceof String)) {
            throw new Error("Expected the field `serviceAccountProvisioning` to be a primitive type in the JSON string but got " + data['serviceAccountProvisioning']);
        }
        // ensure the json data is a string
        if (data['ouDistinguishedName'] && !(typeof data['ouDistinguishedName'] === 'string' || data['ouDistinguishedName'] instanceof String)) {
            throw new Error("Expected the field `ouDistinguishedName` to be a primitive type in the JSON string but got " + data['ouDistinguishedName']);
        }
        // validate the optional field `domainControllers`
        if (data['domainControllers']) { // data not null
          ActiveDirectoryDomainControllers.validateJSON(data['domainControllers']);
        }

        return true;
    }


}

ActiveDirectoryConnectorDomainDetails.RequiredProperties = ["realm"];

/**
 * Name (uppercase) of the Active Directory domain that this AD connector will be associated with.
 * @member {String} realm
 */
ActiveDirectoryConnectorDomainDetails.prototype['realm'] = undefined;

/**
 * NETBIOS name of the Active Directory domain.
 * @member {String} netbiosDomainName
 */
ActiveDirectoryConnectorDomainDetails.prototype['netbiosDomainName'] = undefined;

/**
 * The service account provisioning mode for this Active Directory connector.
 * @member {module:model/ActiveDirectoryConnectorDomainDetails.ServiceAccountProvisioningEnum} serviceAccountProvisioning
 * @default 'manual'
 */
ActiveDirectoryConnectorDomainDetails.prototype['serviceAccountProvisioning'] = 'manual';

/**
 * The distinguished name of the Active Directory Organizational Unit.
 * @member {String} ouDistinguishedName
 */
ActiveDirectoryConnectorDomainDetails.prototype['ouDistinguishedName'] = undefined;

/**
 * @member {module:model/ActiveDirectoryDomainControllers} domainControllers
 */
ActiveDirectoryConnectorDomainDetails.prototype['domainControllers'] = undefined;





/**
 * Allowed values for the <code>serviceAccountProvisioning</code> property.
 * @enum {String}
 * @readonly
 */
ActiveDirectoryConnectorDomainDetails['ServiceAccountProvisioningEnum'] = {

    /**
     * value: "automatic"
     * @const
     */
    "automatic": "automatic",

    /**
     * value: "manual"
     * @const
     */
    "manual": "manual"
};



export default ActiveDirectoryConnectorDomainDetails;

