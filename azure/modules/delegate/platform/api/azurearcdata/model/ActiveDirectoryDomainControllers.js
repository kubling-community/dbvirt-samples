/**
 * AzureArcDataManagementClient
 * The AzureArcData management API provides a RESTful set of web APIs to manage Azure Data Services on Azure Arc Resources.
 *
 * The version of the OpenAPI document: 2023-01-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ActiveDirectoryDomainController from './ActiveDirectoryDomainController';

/**
 * The ActiveDirectoryDomainControllers model module.
 * @module model/ActiveDirectoryDomainControllers
 * @version 2023-01-15-preview
 */
class ActiveDirectoryDomainControllers {
    /**
     * Constructs a new <code>ActiveDirectoryDomainControllers</code>.
     * Details about the Active Directory domain controllers associated with this AD connector instance
     * @alias module:model/ActiveDirectoryDomainControllers
     */
    constructor() { 
        
        ActiveDirectoryDomainControllers.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ActiveDirectoryDomainControllers</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ActiveDirectoryDomainControllers} obj Optional instance to populate.
     * @return {module:model/ActiveDirectoryDomainControllers} The populated <code>ActiveDirectoryDomainControllers</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ActiveDirectoryDomainControllers();

            if (data.hasOwnProperty('primaryDomainController')) {
                obj['primaryDomainController'] = ActiveDirectoryDomainController.constructFromObject(data['primaryDomainController']);
            }
            if (data.hasOwnProperty('secondaryDomainControllers')) {
                obj['secondaryDomainControllers'] = ApiClient.convertToType(data['secondaryDomainControllers'], [ActiveDirectoryDomainController]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ActiveDirectoryDomainControllers</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ActiveDirectoryDomainControllers</code>.
     */
    static validateJSON(data) {
        // validate the optional field `primaryDomainController`
        if (data['primaryDomainController']) { // data not null
          ActiveDirectoryDomainController.validateJSON(data['primaryDomainController']);
        }
        if (data['secondaryDomainControllers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['secondaryDomainControllers'])) {
                throw new Error("Expected the field `secondaryDomainControllers` to be an array in the JSON data but got " + data['secondaryDomainControllers']);
            }
            // validate the optional field `secondaryDomainControllers` (array)
            for (const item of data['secondaryDomainControllers']) {
                ActiveDirectoryDomainController.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/ActiveDirectoryDomainController} primaryDomainController
 */
ActiveDirectoryDomainControllers.prototype['primaryDomainController'] = undefined;

/**
 * Information about the secondary domain controllers in the AD domain.
 * @member {Array.<module:model/ActiveDirectoryDomainController>} secondaryDomainControllers
 */
ActiveDirectoryDomainControllers.prototype['secondaryDomainControllers'] = undefined;






export default ActiveDirectoryDomainControllers;

